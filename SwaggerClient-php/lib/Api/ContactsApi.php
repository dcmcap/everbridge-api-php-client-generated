<?php
/**
 * ContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addContactUsingPOST
     *
     * Create a new contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the new contact (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function addContactUsingPOST($authorization, $organization_id, $contact)
    {
        list($response) = $this->addContactUsingPOSTWithHttpInfo($authorization, $organization_id, $contact);
        return $response;
    }

    /**
     * Operation addContactUsingPOSTWithHttpInfo
     *
     * Create a new contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the new contact (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function addContactUsingPOSTWithHttpInfo($authorization, $organization_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->addContactUsingPOSTRequest($authorization, $organization_id, $contact);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addContactUsingPOSTAsync
     *
     * Create a new contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the new contact (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContactUsingPOSTAsync($authorization, $organization_id, $contact)
    {
        return $this->addContactUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addContactUsingPOSTAsyncWithHttpInfo
     *
     * Create a new contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the new contact (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContactUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contact)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->addContactUsingPOSTRequest($authorization, $organization_id, $contact);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addContactUsingPOST'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the new contact (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addContactUsingPOSTRequest($authorization, $organization_id, $contact)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addContactUsingPOST'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling addContactUsingPOST'
            );
        }
        // verify the required parameter 'contact' is set
        if ($contact === null || (is_array($contact) && count($contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact when calling addContactUsingPOST'
            );
        }

        $resourcePath = '/contacts/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contact)) {
            $_tempBody = $contact;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addContactsUsingPOST
     *
     * Create contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the contacts (required)
     * @param  int $version Whether use new batch API or not (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function addContactsUsingPOST($authorization, $organization_id, $contacts, $version = '0')
    {
        list($response) = $this->addContactsUsingPOSTWithHttpInfo($authorization, $organization_id, $contacts, $version);
        return $response;
    }

    /**
     * Operation addContactsUsingPOSTWithHttpInfo
     *
     * Create contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the contacts (required)
     * @param  int $version Whether use new batch API or not (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function addContactsUsingPOSTWithHttpInfo($authorization, $organization_id, $contacts, $version = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->addContactsUsingPOSTRequest($authorization, $organization_id, $contacts, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addContactsUsingPOSTAsync
     *
     * Create contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the contacts (required)
     * @param  int $version Whether use new batch API or not (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContactsUsingPOSTAsync($authorization, $organization_id, $contacts, $version = '0')
    {
        return $this->addContactsUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contacts, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addContactsUsingPOSTAsyncWithHttpInfo
     *
     * Create contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the contacts (required)
     * @param  int $version Whether use new batch API or not (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContactsUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contacts, $version = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->addContactsUsingPOSTRequest($authorization, $organization_id, $contacts, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addContactsUsingPOST'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the contacts (required)
     * @param  int $version Whether use new batch API or not (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addContactsUsingPOSTRequest($authorization, $organization_id, $contacts, $version = '0')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addContactsUsingPOST'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling addContactsUsingPOST'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling addContactsUsingPOST'
            );
        }

        $resourcePath = '/contacts/{organizationId}/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contacts)) {
            $_tempBody = $contacts;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContactUsingDELETE
     *
     * Delete the specified contact from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to delete (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function deleteContactUsingDELETE($authorization, $organization_id, $id, $id_type = 'id')
    {
        list($response) = $this->deleteContactUsingDELETEWithHttpInfo($authorization, $organization_id, $id, $id_type);
        return $response;
    }

    /**
     * Operation deleteContactUsingDELETEWithHttpInfo
     *
     * Delete the specified contact from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to delete (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactUsingDELETEWithHttpInfo($authorization, $organization_id, $id, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->deleteContactUsingDELETERequest($authorization, $organization_id, $id, $id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContactUsingDELETEAsync
     *
     * Delete the specified contact from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to delete (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactUsingDELETEAsync($authorization, $organization_id, $id, $id_type = 'id')
    {
        return $this->deleteContactUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $id, $id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContactUsingDELETEAsyncWithHttpInfo
     *
     * Delete the specified contact from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to delete (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $id, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->deleteContactUsingDELETERequest($authorization, $organization_id, $id, $id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContactUsingDELETE'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to delete (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContactUsingDELETERequest($authorization, $organization_id, $id, $id_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteContactUsingDELETE'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteContactUsingDELETE'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteContactUsingDELETE'
            );
        }

        $resourcePath = '/contacts/{organizationId}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContactsUsingDELETE
     *
     * Delete the specified contacts from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function deleteContactsUsingDELETE($authorization, $organization_id, $contact_ids, $id_type = 'id')
    {
        list($response) = $this->deleteContactsUsingDELETEWithHttpInfo($authorization, $organization_id, $contact_ids, $id_type);
        return $response;
    }

    /**
     * Operation deleteContactsUsingDELETEWithHttpInfo
     *
     * Delete the specified contacts from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactsUsingDELETEWithHttpInfo($authorization, $organization_id, $contact_ids, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->deleteContactsUsingDELETERequest($authorization, $organization_id, $contact_ids, $id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContactsUsingDELETEAsync
     *
     * Delete the specified contacts from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactsUsingDELETEAsync($authorization, $organization_id, $contact_ids, $id_type = 'id')
    {
        return $this->deleteContactsUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContactsUsingDELETEAsyncWithHttpInfo
     *
     * Delete the specified contacts from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContactsUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->deleteContactsUsingDELETERequest($authorization, $organization_id, $contact_ids, $id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContactsUsingDELETE'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContactsUsingDELETERequest($authorization, $organization_id, $contact_ids, $id_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteContactsUsingDELETE'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteContactsUsingDELETE'
            );
        }
        // verify the required parameter 'contact_ids' is set
        if ($contact_ids === null || (is_array($contact_ids) && count($contact_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_ids when calling deleteContactsUsingDELETE'
            );
        }

        $resourcePath = '/contacts/{organizationId}/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contact_ids)) {
            $_tempBody = $contact_ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContactUsingGET
     *
     * Retrieve the specified contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to return (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ContactWrapperInstanceResult
     */
    public function getContactUsingGET($authorization, $organization_id, $id, $id_type = 'id')
    {
        list($response) = $this->getContactUsingGETWithHttpInfo($authorization, $organization_id, $id, $id_type);
        return $response;
    }

    /**
     * Operation getContactUsingGETWithHttpInfo
     *
     * Retrieve the specified contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to return (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ContactWrapperInstanceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactUsingGETWithHttpInfo($authorization, $organization_id, $id, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\ContactWrapperInstanceResult';
        $request = $this->getContactUsingGETRequest($authorization, $organization_id, $id, $id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ContactWrapperInstanceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContactUsingGETAsync
     *
     * Retrieve the specified contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to return (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactUsingGETAsync($authorization, $organization_id, $id, $id_type = 'id')
    {
        return $this->getContactUsingGETAsyncWithHttpInfo($authorization, $organization_id, $id, $id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContactUsingGETAsyncWithHttpInfo
     *
     * Retrieve the specified contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to return (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactUsingGETAsyncWithHttpInfo($authorization, $organization_id, $id, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\ContactWrapperInstanceResult';
        $request = $this->getContactUsingGETRequest($authorization, $organization_id, $id, $id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContactUsingGET'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to return (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContactUsingGETRequest($authorization, $organization_id, $id, $id_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getContactUsingGET'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getContactUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getContactUsingGET'
            );
        }

        $resourcePath = '/contacts/{organizationId}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContactsInGroupUsingGET
     *
     * Retrieve all contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string $by_type Whether to get by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to get contacts (optional, default to 0)
     * @param  string $group_name The name of the group to get contacts (optional)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function getContactsInGroupUsingGET($authorization, $organization_id, $by_type = 'id', $group_id = '0', $group_name = null, $page_size = '100', $page_number = '1')
    {
        list($response) = $this->getContactsInGroupUsingGETWithHttpInfo($authorization, $organization_id, $by_type, $group_id, $group_name, $page_size, $page_number);
        return $response;
    }

    /**
     * Operation getContactsInGroupUsingGETWithHttpInfo
     *
     * Retrieve all contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string $by_type Whether to get by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to get contacts (optional, default to 0)
     * @param  string $group_name The name of the group to get contacts (optional)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactsInGroupUsingGETWithHttpInfo($authorization, $organization_id, $by_type = 'id', $group_id = '0', $group_name = null, $page_size = '100', $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->getContactsInGroupUsingGETRequest($authorization, $organization_id, $by_type, $group_id, $group_name, $page_size, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContactsInGroupUsingGETAsync
     *
     * Retrieve all contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string $by_type Whether to get by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to get contacts (optional, default to 0)
     * @param  string $group_name The name of the group to get contacts (optional)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactsInGroupUsingGETAsync($authorization, $organization_id, $by_type = 'id', $group_id = '0', $group_name = null, $page_size = '100', $page_number = '1')
    {
        return $this->getContactsInGroupUsingGETAsyncWithHttpInfo($authorization, $organization_id, $by_type, $group_id, $group_name, $page_size, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContactsInGroupUsingGETAsyncWithHttpInfo
     *
     * Retrieve all contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string $by_type Whether to get by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to get contacts (optional, default to 0)
     * @param  string $group_name The name of the group to get contacts (optional)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactsInGroupUsingGETAsyncWithHttpInfo($authorization, $organization_id, $by_type = 'id', $group_id = '0', $group_name = null, $page_size = '100', $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->getContactsInGroupUsingGETRequest($authorization, $organization_id, $by_type, $group_id, $group_name, $page_size, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContactsInGroupUsingGET'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string $by_type Whether to get by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to get contacts (optional, default to 0)
     * @param  string $group_name The name of the group to get contacts (optional)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContactsInGroupUsingGETRequest($authorization, $organization_id, $by_type = 'id', $group_id = '0', $group_name = null, $page_size = '100', $page_number = '1')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getContactsInGroupUsingGET'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getContactsInGroupUsingGET'
            );
        }

        $resourcePath = '/contacts/groups/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($by_type !== null) {
            $queryParams['byType'] = ObjectSerializer::toQueryValue($by_type);
        }
        // query params
        if ($group_id !== null) {
            $queryParams['groupId'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($group_name !== null) {
            $queryParams['groupName'] = ObjectSerializer::toQueryValue($group_name);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryContactsByPostUsingPOST
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactQueryParam $query_conditions Query conditions (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ContactWrapperCollectionResult
     */
    public function queryContactsByPostUsingPOST($authorization, $organization_id, $query_conditions)
    {
        list($response) = $this->queryContactsByPostUsingPOSTWithHttpInfo($authorization, $organization_id, $query_conditions);
        return $response;
    }

    /**
     * Operation queryContactsByPostUsingPOSTWithHttpInfo
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactQueryParam $query_conditions Query conditions (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ContactWrapperCollectionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryContactsByPostUsingPOSTWithHttpInfo($authorization, $organization_id, $query_conditions)
    {
        $returnType = '\Swagger\Client\Model\ContactWrapperCollectionResult';
        $request = $this->queryContactsByPostUsingPOSTRequest($authorization, $organization_id, $query_conditions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ContactWrapperCollectionResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryContactsByPostUsingPOSTAsync
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactQueryParam $query_conditions Query conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryContactsByPostUsingPOSTAsync($authorization, $organization_id, $query_conditions)
    {
        return $this->queryContactsByPostUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $query_conditions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryContactsByPostUsingPOSTAsyncWithHttpInfo
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactQueryParam $query_conditions Query conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryContactsByPostUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $query_conditions)
    {
        $returnType = '\Swagger\Client\Model\ContactWrapperCollectionResult';
        $request = $this->queryContactsByPostUsingPOSTRequest($authorization, $organization_id, $query_conditions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryContactsByPostUsingPOST'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactQueryParam $query_conditions Query conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryContactsByPostUsingPOSTRequest($authorization, $organization_id, $query_conditions)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling queryContactsByPostUsingPOST'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling queryContactsByPostUsingPOST'
            );
        }
        // verify the required parameter 'query_conditions' is set
        if ($query_conditions === null || (is_array($query_conditions) && count($query_conditions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_conditions when calling queryContactsByPostUsingPOST'
            );
        }

        $resourcePath = '/contacts/{organizationId}/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($query_conditions)) {
            $_tempBody = $query_conditions;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryContactsUsingGET
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int[] $group_ids A list of group IDs from which to select contacts (optional)
     * @param  int[] $contact_ids A list of contact IDs to use when selecting contacts (optional)
     * @param  string[] $external_ids A list of external IDs to use when selecting contacts (optional)
     * @param  int[] $contact_filter_ids A list of contactFilter IDs to use for selecting contacts (optional)
     * @param  string $include_shapes A list of shapes to include in the search (optional)
     * @param  string $exclude_shapes A list of shapes to exclude from the search (optional)
     * @param  string $search_type Whether to apply search terms as OR or AND. (optional, default to AND)
     * @param  string[] $search_shape_types Type of shapes (optional)
     * @param  string $sort_by Whether to sort data by lastModifiedDate, externalId or lastName. (optional)
     * @param  string $direction Whether to sort data as ASC or DESC. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ContactWrapperCollectionResult
     */
    public function queryContactsUsingGET($authorization, $organization_id, $page_number = '1', $page_size = '100', $group_ids = null, $contact_ids = null, $external_ids = null, $contact_filter_ids = null, $include_shapes = null, $exclude_shapes = null, $search_type = 'AND', $search_shape_types = null, $sort_by = null, $direction = null)
    {
        list($response) = $this->queryContactsUsingGETWithHttpInfo($authorization, $organization_id, $page_number, $page_size, $group_ids, $contact_ids, $external_ids, $contact_filter_ids, $include_shapes, $exclude_shapes, $search_type, $search_shape_types, $sort_by, $direction);
        return $response;
    }

    /**
     * Operation queryContactsUsingGETWithHttpInfo
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int[] $group_ids A list of group IDs from which to select contacts (optional)
     * @param  int[] $contact_ids A list of contact IDs to use when selecting contacts (optional)
     * @param  string[] $external_ids A list of external IDs to use when selecting contacts (optional)
     * @param  int[] $contact_filter_ids A list of contactFilter IDs to use for selecting contacts (optional)
     * @param  string $include_shapes A list of shapes to include in the search (optional)
     * @param  string $exclude_shapes A list of shapes to exclude from the search (optional)
     * @param  string $search_type Whether to apply search terms as OR or AND. (optional, default to AND)
     * @param  string[] $search_shape_types Type of shapes (optional)
     * @param  string $sort_by Whether to sort data by lastModifiedDate, externalId or lastName. (optional)
     * @param  string $direction Whether to sort data as ASC or DESC. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ContactWrapperCollectionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryContactsUsingGETWithHttpInfo($authorization, $organization_id, $page_number = '1', $page_size = '100', $group_ids = null, $contact_ids = null, $external_ids = null, $contact_filter_ids = null, $include_shapes = null, $exclude_shapes = null, $search_type = 'AND', $search_shape_types = null, $sort_by = null, $direction = null)
    {
        $returnType = '\Swagger\Client\Model\ContactWrapperCollectionResult';
        $request = $this->queryContactsUsingGETRequest($authorization, $organization_id, $page_number, $page_size, $group_ids, $contact_ids, $external_ids, $contact_filter_ids, $include_shapes, $exclude_shapes, $search_type, $search_shape_types, $sort_by, $direction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ContactWrapperCollectionResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryContactsUsingGETAsync
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int[] $group_ids A list of group IDs from which to select contacts (optional)
     * @param  int[] $contact_ids A list of contact IDs to use when selecting contacts (optional)
     * @param  string[] $external_ids A list of external IDs to use when selecting contacts (optional)
     * @param  int[] $contact_filter_ids A list of contactFilter IDs to use for selecting contacts (optional)
     * @param  string $include_shapes A list of shapes to include in the search (optional)
     * @param  string $exclude_shapes A list of shapes to exclude from the search (optional)
     * @param  string $search_type Whether to apply search terms as OR or AND. (optional, default to AND)
     * @param  string[] $search_shape_types Type of shapes (optional)
     * @param  string $sort_by Whether to sort data by lastModifiedDate, externalId or lastName. (optional)
     * @param  string $direction Whether to sort data as ASC or DESC. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryContactsUsingGETAsync($authorization, $organization_id, $page_number = '1', $page_size = '100', $group_ids = null, $contact_ids = null, $external_ids = null, $contact_filter_ids = null, $include_shapes = null, $exclude_shapes = null, $search_type = 'AND', $search_shape_types = null, $sort_by = null, $direction = null)
    {
        return $this->queryContactsUsingGETAsyncWithHttpInfo($authorization, $organization_id, $page_number, $page_size, $group_ids, $contact_ids, $external_ids, $contact_filter_ids, $include_shapes, $exclude_shapes, $search_type, $search_shape_types, $sort_by, $direction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryContactsUsingGETAsyncWithHttpInfo
     *
     * Retrieve all contacts for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int[] $group_ids A list of group IDs from which to select contacts (optional)
     * @param  int[] $contact_ids A list of contact IDs to use when selecting contacts (optional)
     * @param  string[] $external_ids A list of external IDs to use when selecting contacts (optional)
     * @param  int[] $contact_filter_ids A list of contactFilter IDs to use for selecting contacts (optional)
     * @param  string $include_shapes A list of shapes to include in the search (optional)
     * @param  string $exclude_shapes A list of shapes to exclude from the search (optional)
     * @param  string $search_type Whether to apply search terms as OR or AND. (optional, default to AND)
     * @param  string[] $search_shape_types Type of shapes (optional)
     * @param  string $sort_by Whether to sort data by lastModifiedDate, externalId or lastName. (optional)
     * @param  string $direction Whether to sort data as ASC or DESC. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryContactsUsingGETAsyncWithHttpInfo($authorization, $organization_id, $page_number = '1', $page_size = '100', $group_ids = null, $contact_ids = null, $external_ids = null, $contact_filter_ids = null, $include_shapes = null, $exclude_shapes = null, $search_type = 'AND', $search_shape_types = null, $sort_by = null, $direction = null)
    {
        $returnType = '\Swagger\Client\Model\ContactWrapperCollectionResult';
        $request = $this->queryContactsUsingGETRequest($authorization, $organization_id, $page_number, $page_size, $group_ids, $contact_ids, $external_ids, $contact_filter_ids, $include_shapes, $exclude_shapes, $search_type, $search_shape_types, $sort_by, $direction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryContactsUsingGET'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  int $page_number The page number of contacts to return. (optional, default to 1)
     * @param  int $page_size The page size for contacts to return. (optional, default to 100)
     * @param  int[] $group_ids A list of group IDs from which to select contacts (optional)
     * @param  int[] $contact_ids A list of contact IDs to use when selecting contacts (optional)
     * @param  string[] $external_ids A list of external IDs to use when selecting contacts (optional)
     * @param  int[] $contact_filter_ids A list of contactFilter IDs to use for selecting contacts (optional)
     * @param  string $include_shapes A list of shapes to include in the search (optional)
     * @param  string $exclude_shapes A list of shapes to exclude from the search (optional)
     * @param  string $search_type Whether to apply search terms as OR or AND. (optional, default to AND)
     * @param  string[] $search_shape_types Type of shapes (optional)
     * @param  string $sort_by Whether to sort data by lastModifiedDate, externalId or lastName. (optional)
     * @param  string $direction Whether to sort data as ASC or DESC. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryContactsUsingGETRequest($authorization, $organization_id, $page_number = '1', $page_size = '100', $group_ids = null, $contact_ids = null, $external_ids = null, $contact_filter_ids = null, $include_shapes = null, $exclude_shapes = null, $search_type = 'AND', $search_shape_types = null, $sort_by = null, $direction = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling queryContactsUsingGET'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling queryContactsUsingGET'
            );
        }

        $resourcePath = '/contacts/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if (is_array($group_ids)) {
            $queryParams['groupIds'] = $group_ids;
        } else
        if ($group_ids !== null) {
            $queryParams['groupIds'] = ObjectSerializer::toQueryValue($group_ids);
        }
        // query params
        if (is_array($contact_ids)) {
            $queryParams['contactIds'] = $contact_ids;
        } else
        if ($contact_ids !== null) {
            $queryParams['contactIds'] = ObjectSerializer::toQueryValue($contact_ids);
        }
        // query params
        if (is_array($external_ids)) {
            $queryParams['externalIds'] = $external_ids;
        } else
        if ($external_ids !== null) {
            $queryParams['externalIds'] = ObjectSerializer::toQueryValue($external_ids);
        }
        // query params
        if (is_array($contact_filter_ids)) {
            $queryParams['contactFilterIds'] = $contact_filter_ids;
        } else
        if ($contact_filter_ids !== null) {
            $queryParams['contactFilterIds'] = ObjectSerializer::toQueryValue($contact_filter_ids);
        }
        // query params
        if ($include_shapes !== null) {
            $queryParams['includeShapes'] = ObjectSerializer::toQueryValue($include_shapes);
        }
        // query params
        if ($exclude_shapes !== null) {
            $queryParams['excludeShapes'] = ObjectSerializer::toQueryValue($exclude_shapes);
        }
        // query params
        if ($search_type !== null) {
            $queryParams['searchType'] = ObjectSerializer::toQueryValue($search_type);
        }
        // query params
        if (is_array($search_shape_types)) {
            $queryParams['searchShapeTypes'] = $search_shape_types;
        } else
        if ($search_shape_types !== null) {
            $queryParams['searchShapeTypes'] = ObjectSerializer::toQueryValue($search_shape_types);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContactUsingPUT
     *
     * Update a contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to update (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the updated contact (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function updateContactUsingPUT($authorization, $organization_id, $id, $contact, $id_type = 'id')
    {
        list($response) = $this->updateContactUsingPUTWithHttpInfo($authorization, $organization_id, $id, $contact, $id_type);
        return $response;
    }

    /**
     * Operation updateContactUsingPUTWithHttpInfo
     *
     * Update a contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to update (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the updated contact (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContactUsingPUTWithHttpInfo($authorization, $organization_id, $id, $contact, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateContactUsingPUTRequest($authorization, $organization_id, $id, $contact, $id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContactUsingPUTAsync
     *
     * Update a contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to update (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the updated contact (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactUsingPUTAsync($authorization, $organization_id, $id, $contact, $id_type = 'id')
    {
        return $this->updateContactUsingPUTAsyncWithHttpInfo($authorization, $organization_id, $id, $contact, $id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContactUsingPUTAsyncWithHttpInfo
     *
     * Update a contact within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to update (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the updated contact (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactUsingPUTAsyncWithHttpInfo($authorization, $organization_id, $id, $contact, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateContactUsingPUTRequest($authorization, $organization_id, $id, $contact, $id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContactUsingPUT'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  string $id The ID of the contact to update (required)
     * @param  \Swagger\Client\Model\ContactWrapper $contact JSON object describing the updated contact (required)
     * @param  string $id_type Whether to search by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContactUsingPUTRequest($authorization, $organization_id, $id, $contact, $id_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateContactUsingPUT'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateContactUsingPUT'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateContactUsingPUT'
            );
        }
        // verify the required parameter 'contact' is set
        if ($contact === null || (is_array($contact) && count($contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact when calling updateContactUsingPUT'
            );
        }

        $resourcePath = '/contacts/{organizationId}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contact)) {
            $_tempBody = $contact;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContactsUsingPUT
     *
     * Update contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the updated contacts (required)
     * @param  string $id_type Whether to update by contact.id or contact.externalId. (optional, default to id)
     * @param  string $update_type Whether to update  by partial or full. (optional, default to partial)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function updateContactsUsingPUT($authorization, $organization_id, $contacts, $id_type = 'id', $update_type = 'partial')
    {
        list($response) = $this->updateContactsUsingPUTWithHttpInfo($authorization, $organization_id, $contacts, $id_type, $update_type);
        return $response;
    }

    /**
     * Operation updateContactsUsingPUTWithHttpInfo
     *
     * Update contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the updated contacts (required)
     * @param  string $id_type Whether to update by contact.id or contact.externalId. (optional, default to id)
     * @param  string $update_type Whether to update  by partial or full. (optional, default to partial)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContactsUsingPUTWithHttpInfo($authorization, $organization_id, $contacts, $id_type = 'id', $update_type = 'partial')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->updateContactsUsingPUTRequest($authorization, $organization_id, $contacts, $id_type, $update_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContactsUsingPUTAsync
     *
     * Update contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the updated contacts (required)
     * @param  string $id_type Whether to update by contact.id or contact.externalId. (optional, default to id)
     * @param  string $update_type Whether to update  by partial or full. (optional, default to partial)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactsUsingPUTAsync($authorization, $organization_id, $contacts, $id_type = 'id', $update_type = 'partial')
    {
        return $this->updateContactsUsingPUTAsyncWithHttpInfo($authorization, $organization_id, $contacts, $id_type, $update_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContactsUsingPUTAsyncWithHttpInfo
     *
     * Update contacts within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the updated contacts (required)
     * @param  string $id_type Whether to update by contact.id or contact.externalId. (optional, default to id)
     * @param  string $update_type Whether to update  by partial or full. (optional, default to partial)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContactsUsingPUTAsyncWithHttpInfo($authorization, $organization_id, $contacts, $id_type = 'id', $update_type = 'partial')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->updateContactsUsingPUTRequest($authorization, $organization_id, $contacts, $id_type, $update_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContactsUsingPUT'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the contacts (required)
     * @param  \Swagger\Client\Model\ContactWrapper[] $contacts JSON object describing the updated contacts (required)
     * @param  string $id_type Whether to update by contact.id or contact.externalId. (optional, default to id)
     * @param  string $update_type Whether to update  by partial or full. (optional, default to partial)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContactsUsingPUTRequest($authorization, $organization_id, $contacts, $id_type = 'id', $update_type = 'partial')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateContactsUsingPUT'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateContactsUsingPUT'
            );
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null || (is_array($contacts) && count($contacts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contacts when calling updateContactsUsingPUT'
            );
        }

        $resourcePath = '/contacts/{organizationId}/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // query params
        if ($update_type !== null) {
            $queryParams['updateType'] = ObjectSerializer::toQueryValue($update_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contacts)) {
            $_tempBody = $contacts;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
