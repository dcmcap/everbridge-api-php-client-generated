<?php
/**
 * ExpectedLocationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ExpectedLocationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpectedLocationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addExpectedLocationsUsingPOST
     *
     * Batch create Expected Locations.
     *
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $organization_id Organization ID. (required)
     * @param  \Swagger\Client\Model\ExpectedLocationWrapper[] $expected_locations JSON object of the new Expected Locations (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     * @param  bool $return_ids If include created expected location Ids in the response. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function addExpectedLocationsUsingPOST($authorization, $organization_id, $expected_locations, $contact_id_type = 'id', $return_ids = 'false')
    {
        list($response) = $this->addExpectedLocationsUsingPOSTWithHttpInfo($authorization, $organization_id, $expected_locations, $contact_id_type, $return_ids);
        return $response;
    }

    /**
     * Operation addExpectedLocationsUsingPOSTWithHttpInfo
     *
     * Batch create Expected Locations.
     *
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $organization_id Organization ID. (required)
     * @param  \Swagger\Client\Model\ExpectedLocationWrapper[] $expected_locations JSON object of the new Expected Locations (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     * @param  bool $return_ids If include created expected location Ids in the response. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function addExpectedLocationsUsingPOSTWithHttpInfo($authorization, $organization_id, $expected_locations, $contact_id_type = 'id', $return_ids = 'false')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->addExpectedLocationsUsingPOSTRequest($authorization, $organization_id, $expected_locations, $contact_id_type, $return_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addExpectedLocationsUsingPOSTAsync
     *
     * Batch create Expected Locations.
     *
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $organization_id Organization ID. (required)
     * @param  \Swagger\Client\Model\ExpectedLocationWrapper[] $expected_locations JSON object of the new Expected Locations (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     * @param  bool $return_ids If include created expected location Ids in the response. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addExpectedLocationsUsingPOSTAsync($authorization, $organization_id, $expected_locations, $contact_id_type = 'id', $return_ids = 'false')
    {
        return $this->addExpectedLocationsUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $expected_locations, $contact_id_type, $return_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addExpectedLocationsUsingPOSTAsyncWithHttpInfo
     *
     * Batch create Expected Locations.
     *
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $organization_id Organization ID. (required)
     * @param  \Swagger\Client\Model\ExpectedLocationWrapper[] $expected_locations JSON object of the new Expected Locations (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     * @param  bool $return_ids If include created expected location Ids in the response. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addExpectedLocationsUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $expected_locations, $contact_id_type = 'id', $return_ids = 'false')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->addExpectedLocationsUsingPOSTRequest($authorization, $organization_id, $expected_locations, $contact_id_type, $return_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addExpectedLocationsUsingPOST'
     *
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $organization_id Organization ID. (required)
     * @param  \Swagger\Client\Model\ExpectedLocationWrapper[] $expected_locations JSON object of the new Expected Locations (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     * @param  bool $return_ids If include created expected location Ids in the response. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addExpectedLocationsUsingPOSTRequest($authorization, $organization_id, $expected_locations, $contact_id_type = 'id', $return_ids = 'false')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addExpectedLocationsUsingPOST'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling addExpectedLocationsUsingPOST'
            );
        }
        // verify the required parameter 'expected_locations' is set
        if ($expected_locations === null || (is_array($expected_locations) && count($expected_locations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expected_locations when calling addExpectedLocationsUsingPOST'
            );
        }

        $resourcePath = '/expectedLocations/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id_type !== null) {
            $queryParams['contactIdType'] = ObjectSerializer::toQueryValue($contact_id_type);
        }
        // query params
        if ($return_ids !== null) {
            $queryParams['returnIds'] = ObjectSerializer::toQueryValue($return_ids);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($expected_locations)) {
            $_tempBody = $expected_locations;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBatchUsingDELETE
     *
     * Batch Delete Expected Locatioins.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulInstanceResult
     */
    public function deleteBatchUsingDELETE($organization_id, $authorization, $ids)
    {
        list($response) = $this->deleteBatchUsingDELETEWithHttpInfo($organization_id, $authorization, $ids);
        return $response;
    }

    /**
     * Operation deleteBatchUsingDELETEWithHttpInfo
     *
     * Batch Delete Expected Locatioins.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulInstanceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBatchUsingDELETEWithHttpInfo($organization_id, $authorization, $ids)
    {
        $returnType = '\Swagger\Client\Model\RestfulInstanceResult';
        $request = $this->deleteBatchUsingDELETERequest($organization_id, $authorization, $ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulInstanceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBatchUsingDELETEAsync
     *
     * Batch Delete Expected Locatioins.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBatchUsingDELETEAsync($organization_id, $authorization, $ids)
    {
        return $this->deleteBatchUsingDELETEAsyncWithHttpInfo($organization_id, $authorization, $ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBatchUsingDELETEAsyncWithHttpInfo
     *
     * Batch Delete Expected Locatioins.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBatchUsingDELETEAsyncWithHttpInfo($organization_id, $authorization, $ids)
    {
        $returnType = '\Swagger\Client\Model\RestfulInstanceResult';
        $request = $this->deleteBatchUsingDELETERequest($organization_id, $authorization, $ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBatchUsingDELETE'
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteBatchUsingDELETERequest($organization_id, $authorization, $ids)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteBatchUsingDELETE'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteBatchUsingDELETE'
            );
        }
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling deleteBatchUsingDELETE'
            );
        }

        $resourcePath = '/expectedLocations/{organizationId}/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ids)) {
            $_tempBody = $ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUsingDELETE
     *
     * Delete Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulInstanceResult
     */
    public function deleteUsingDELETE($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        list($response) = $this->deleteUsingDELETEWithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type);
        return $response;
    }

    /**
     * Operation deleteUsingDELETEWithHttpInfo
     *
     * Delete Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulInstanceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsingDELETEWithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulInstanceResult';
        $request = $this->deleteUsingDELETERequest($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulInstanceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUsingDELETEAsync
     *
     * Delete Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUsingDELETEAsync($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        return $this->deleteUsingDELETEAsyncWithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUsingDELETEAsyncWithHttpInfo
     *
     * Delete Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUsingDELETEAsyncWithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulInstanceResult';
        $request = $this->deleteUsingDELETERequest($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUsingDELETE'
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUsingDELETERequest($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteUsingDELETE'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling deleteUsingDELETE'
            );
        }
        // verify the required parameter 'expected_location_id' is set
        if ($expected_location_id === null || (is_array($expected_location_id) && count($expected_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expected_location_id when calling deleteUsingDELETE'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteUsingDELETE'
            );
        }

        $resourcePath = '/expectedLocations/{organizationId}/{contactId}/{expectedLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id_type !== null) {
            $queryParams['contactIdType'] = ObjectSerializer::toQueryValue($contact_id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }
        // path params
        if ($expected_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expectedLocationId' . '}',
                ObjectSerializer::toPathValue($expected_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExpectedLocationUsingGET
     *
     * Retrieve all Expected Locations of a contact.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExpectedLocationCollectionResult
     */
    public function getExpectedLocationUsingGET($organization_id, $contact_id, $authorization, $contact_id_type = 'id')
    {
        list($response) = $this->getExpectedLocationUsingGETWithHttpInfo($organization_id, $contact_id, $authorization, $contact_id_type);
        return $response;
    }

    /**
     * Operation getExpectedLocationUsingGETWithHttpInfo
     *
     * Retrieve all Expected Locations of a contact.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExpectedLocationCollectionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpectedLocationUsingGETWithHttpInfo($organization_id, $contact_id, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\ExpectedLocationCollectionResult';
        $request = $this->getExpectedLocationUsingGETRequest($organization_id, $contact_id, $authorization, $contact_id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExpectedLocationCollectionResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExpectedLocationUsingGETAsync
     *
     * Retrieve all Expected Locations of a contact.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpectedLocationUsingGETAsync($organization_id, $contact_id, $authorization, $contact_id_type = 'id')
    {
        return $this->getExpectedLocationUsingGETAsyncWithHttpInfo($organization_id, $contact_id, $authorization, $contact_id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpectedLocationUsingGETAsyncWithHttpInfo
     *
     * Retrieve all Expected Locations of a contact.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpectedLocationUsingGETAsyncWithHttpInfo($organization_id, $contact_id, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\ExpectedLocationCollectionResult';
        $request = $this->getExpectedLocationUsingGETRequest($organization_id, $contact_id, $authorization, $contact_id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExpectedLocationUsingGET'
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExpectedLocationUsingGETRequest($organization_id, $contact_id, $authorization, $contact_id_type = 'id')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getExpectedLocationUsingGET'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling getExpectedLocationUsingGET'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getExpectedLocationUsingGET'
            );
        }

        $resourcePath = '/expectedLocations/{organizationId}/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id_type !== null) {
            $queryParams['contactIdType'] = ObjectSerializer::toQueryValue($contact_id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExpectedLocationUsingGET1
     *
     * Retrieve Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExpectedLocationInstanceResult
     */
    public function getExpectedLocationUsingGET1($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        list($response) = $this->getExpectedLocationUsingGET1WithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type);
        return $response;
    }

    /**
     * Operation getExpectedLocationUsingGET1WithHttpInfo
     *
     * Retrieve Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExpectedLocationInstanceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpectedLocationUsingGET1WithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\ExpectedLocationInstanceResult';
        $request = $this->getExpectedLocationUsingGET1Request($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExpectedLocationInstanceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExpectedLocationUsingGET1Async
     *
     * Retrieve Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpectedLocationUsingGET1Async($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        return $this->getExpectedLocationUsingGET1AsyncWithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpectedLocationUsingGET1AsyncWithHttpInfo
     *
     * Retrieve Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpectedLocationUsingGET1AsyncWithHttpInfo($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\ExpectedLocationInstanceResult';
        $request = $this->getExpectedLocationUsingGET1Request($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExpectedLocationUsingGET1'
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExpectedLocationUsingGET1Request($organization_id, $contact_id, $expected_location_id, $authorization, $contact_id_type = 'id')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getExpectedLocationUsingGET1'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling getExpectedLocationUsingGET1'
            );
        }
        // verify the required parameter 'expected_location_id' is set
        if ($expected_location_id === null || (is_array($expected_location_id) && count($expected_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expected_location_id when calling getExpectedLocationUsingGET1'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getExpectedLocationUsingGET1'
            );
        }

        $resourcePath = '/expectedLocations/{organizationId}/{contactId}/{expectedLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id_type !== null) {
            $queryParams['contactIdType'] = ObjectSerializer::toQueryValue($contact_id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }
        // path params
        if ($expected_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expectedLocationId' . '}',
                ObjectSerializer::toPathValue($expected_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveUsingPOST
     *
     * Create new Expected Location.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function saveUsingPOST($organization_id, $contact_id, $address, $authorization, $contact_id_type = 'id')
    {
        list($response) = $this->saveUsingPOSTWithHttpInfo($organization_id, $contact_id, $address, $authorization, $contact_id_type);
        return $response;
    }

    /**
     * Operation saveUsingPOSTWithHttpInfo
     *
     * Create new Expected Location.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveUsingPOSTWithHttpInfo($organization_id, $contact_id, $address, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->saveUsingPOSTRequest($organization_id, $contact_id, $address, $authorization, $contact_id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveUsingPOSTAsync
     *
     * Create new Expected Location.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveUsingPOSTAsync($organization_id, $contact_id, $address, $authorization, $contact_id_type = 'id')
    {
        return $this->saveUsingPOSTAsyncWithHttpInfo($organization_id, $contact_id, $address, $authorization, $contact_id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveUsingPOSTAsyncWithHttpInfo
     *
     * Create new Expected Location.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveUsingPOSTAsyncWithHttpInfo($organization_id, $contact_id, $address, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->saveUsingPOSTRequest($organization_id, $contact_id, $address, $authorization, $contact_id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveUsingPOST'
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveUsingPOSTRequest($organization_id, $contact_id, $address, $authorization, $contact_id_type = 'id')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling saveUsingPOST'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling saveUsingPOST'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling saveUsingPOST'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling saveUsingPOST'
            );
        }

        $resourcePath = '/expectedLocations/{organizationId}/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id_type !== null) {
            $queryParams['contactIdType'] = ObjectSerializer::toQueryValue($contact_id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($address)) {
            $_tempBody = $address;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUsingPUT
     *
     * Update Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function updateUsingPUT($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type = 'id')
    {
        list($response) = $this->updateUsingPUTWithHttpInfo($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type);
        return $response;
    }

    /**
     * Operation updateUsingPUTWithHttpInfo
     *
     * Update Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUsingPUTWithHttpInfo($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateUsingPUTRequest($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUsingPUTAsync
     *
     * Update Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUsingPUTAsync($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type = 'id')
    {
        return $this->updateUsingPUTAsyncWithHttpInfo($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUsingPUTAsyncWithHttpInfo
     *
     * Update Expected Location by ID.
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUsingPUTAsyncWithHttpInfo($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateUsingPUTRequest($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUsingPUT'
     *
     * @param  int $organization_id Organization ID. (required)
     * @param  string $contact_id Contact ID. (required)
     * @param  int $expected_location_id Expected Location ID. (required)
     * @param  \Swagger\Client\Model\ContactAddressWrapper $address JSON object of Expected Location address. (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string $contact_id_type Contact ID type, contact ID or contact external ID. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateUsingPUTRequest($organization_id, $contact_id, $expected_location_id, $address, $authorization, $contact_id_type = 'id')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateUsingPUT'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling updateUsingPUT'
            );
        }
        // verify the required parameter 'expected_location_id' is set
        if ($expected_location_id === null || (is_array($expected_location_id) && count($expected_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expected_location_id when calling updateUsingPUT'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling updateUsingPUT'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateUsingPUT'
            );
        }

        $resourcePath = '/expectedLocations/{organizationId}/{contactId}/{expectedLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contact_id_type !== null) {
            $queryParams['contactIdType'] = ObjectSerializer::toQueryValue($contact_id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }
        // path params
        if ($expected_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expectedLocationId' . '}',
                ObjectSerializer::toPathValue($expected_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($address)) {
            $_tempBody = $address;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
