<?php
/**
 * GroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addContentsUsingPOST
     *
     * add many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function addContentsUsingPOST($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        list($response) = $this->addContentsUsingPOSTWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);
        return $response;
    }

    /**
     * Operation addContentsUsingPOSTWithHttpInfo
     *
     * add many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function addContentsUsingPOSTWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->addContentsUsingPOSTRequest($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addContentsUsingPOSTAsync
     *
     * add many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContentsUsingPOSTAsync($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        return $this->addContentsUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addContentsUsingPOSTAsyncWithHttpInfo
     *
     * add many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContentsUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->addContentsUsingPOSTRequest($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addContentsUsingPOST'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addContentsUsingPOSTRequest($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addContentsUsingPOST'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling addContentsUsingPOST'
            );
        }
        // verify the required parameter 'contact_ids' is set
        if ($contact_ids === null || (is_array($contact_ids) && count($contact_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_ids when calling addContentsUsingPOST'
            );
        }

        $resourcePath = '/groups/{organizationId}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($by_type !== null) {
            $queryParams['byType'] = ObjectSerializer::toQueryValue($by_type);
        }
        // query params
        if ($group_id !== null) {
            $queryParams['groupId'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($group_name !== null) {
            $queryParams['groupName'] = ObjectSerializer::toQueryValue($group_name);
        }
        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contact_ids)) {
            $_tempBody = $contact_ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addGroupUsingPOST
     *
     * Create a new group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function addGroupUsingPOST($authorization, $organization_id, $group)
    {
        list($response) = $this->addGroupUsingPOSTWithHttpInfo($authorization, $organization_id, $group);
        return $response;
    }

    /**
     * Operation addGroupUsingPOSTWithHttpInfo
     *
     * Create a new group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function addGroupUsingPOSTWithHttpInfo($authorization, $organization_id, $group)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->addGroupUsingPOSTRequest($authorization, $organization_id, $group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addGroupUsingPOSTAsync
     *
     * Create a new group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupUsingPOSTAsync($authorization, $organization_id, $group)
    {
        return $this->addGroupUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addGroupUsingPOSTAsyncWithHttpInfo
     *
     * Create a new group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $group)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->addGroupUsingPOSTRequest($authorization, $organization_id, $group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addGroupUsingPOST'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addGroupUsingPOSTRequest($authorization, $organization_id, $group)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addGroupUsingPOST'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling addGroupUsingPOST'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling addGroupUsingPOST'
            );
        }

        $resourcePath = '/groups/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($group)) {
            $_tempBody = $group;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContentsUsingDELETE
     *
     * remove many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to delete by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to remove contacts (optional, default to 0)
     * @param  string $group_name The name of the group to remove contacts (optional)
     * @param  string $id_type Whether to delete by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function deleteContentsUsingDELETE($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        list($response) = $this->deleteContentsUsingDELETEWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);
        return $response;
    }

    /**
     * Operation deleteContentsUsingDELETEWithHttpInfo
     *
     * remove many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to delete by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to remove contacts (optional, default to 0)
     * @param  string $group_name The name of the group to remove contacts (optional)
     * @param  string $id_type Whether to delete by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentsUsingDELETEWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->deleteContentsUsingDELETERequest($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentsUsingDELETEAsync
     *
     * remove many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to delete by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to remove contacts (optional, default to 0)
     * @param  string $group_name The name of the group to remove contacts (optional)
     * @param  string $id_type Whether to delete by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentsUsingDELETEAsync($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        return $this->deleteContentsUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentsUsingDELETEAsyncWithHttpInfo
     *
     * remove many contacts within a group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to delete by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to remove contacts (optional, default to 0)
     * @param  string $group_name The name of the group to remove contacts (optional)
     * @param  string $id_type Whether to delete by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentsUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->deleteContentsUsingDELETERequest($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentsUsingDELETE'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to delete by id or name of group (optional, default to id)
     * @param  int $group_id The ID of the group to remove contacts (optional, default to 0)
     * @param  string $group_name The name of the group to remove contacts (optional)
     * @param  string $id_type Whether to delete by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContentsUsingDELETERequest($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteContentsUsingDELETE'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteContentsUsingDELETE'
            );
        }
        // verify the required parameter 'contact_ids' is set
        if ($contact_ids === null || (is_array($contact_ids) && count($contact_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_ids when calling deleteContentsUsingDELETE'
            );
        }

        $resourcePath = '/groups/{organizationId}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($by_type !== null) {
            $queryParams['byType'] = ObjectSerializer::toQueryValue($by_type);
        }
        // query params
        if ($group_id !== null) {
            $queryParams['groupId'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($group_name !== null) {
            $queryParams['groupName'] = ObjectSerializer::toQueryValue($group_name);
        }
        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contact_ids)) {
            $_tempBody = $contact_ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGroupUsingDELETE
     *
     * Delete the specified group from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function deleteGroupUsingDELETE($authorization, $organization_id, $group_id)
    {
        list($response) = $this->deleteGroupUsingDELETEWithHttpInfo($authorization, $organization_id, $group_id);
        return $response;
    }

    /**
     * Operation deleteGroupUsingDELETEWithHttpInfo
     *
     * Delete the specified group from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGroupUsingDELETEWithHttpInfo($authorization, $organization_id, $group_id)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->deleteGroupUsingDELETERequest($authorization, $organization_id, $group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteGroupUsingDELETEAsync
     *
     * Delete the specified group from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupUsingDELETEAsync($authorization, $organization_id, $group_id)
    {
        return $this->deleteGroupUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteGroupUsingDELETEAsyncWithHttpInfo
     *
     * Delete the specified group from an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupUsingDELETEAsyncWithHttpInfo($authorization, $organization_id, $group_id)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->deleteGroupUsingDELETERequest($authorization, $organization_id, $group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGroupUsingDELETE'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteGroupUsingDELETERequest($authorization, $organization_id, $group_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteGroupUsingDELETE'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteGroupUsingDELETE'
            );
        }
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling deleteGroupUsingDELETE'
            );
        }

        $resourcePath = '/groups/{organizationId}/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupUsingGET
     *
     * Retrieve a specific group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization in which to find the group (required)
     * @param  string $query_value The ID or name of the group (required)
     * @param  string $query_type Whether to search by group.id or group.name. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GroupWrapperInstanceResult
     */
    public function getGroupUsingGET($authorization, $organization_id, $query_value, $query_type = 'id')
    {
        list($response) = $this->getGroupUsingGETWithHttpInfo($authorization, $organization_id, $query_value, $query_type);
        return $response;
    }

    /**
     * Operation getGroupUsingGETWithHttpInfo
     *
     * Retrieve a specific group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization in which to find the group (required)
     * @param  string $query_value The ID or name of the group (required)
     * @param  string $query_type Whether to search by group.id or group.name. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GroupWrapperInstanceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupUsingGETWithHttpInfo($authorization, $organization_id, $query_value, $query_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\GroupWrapperInstanceResult';
        $request = $this->getGroupUsingGETRequest($authorization, $organization_id, $query_value, $query_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GroupWrapperInstanceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupUsingGETAsync
     *
     * Retrieve a specific group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization in which to find the group (required)
     * @param  string $query_value The ID or name of the group (required)
     * @param  string $query_type Whether to search by group.id or group.name. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupUsingGETAsync($authorization, $organization_id, $query_value, $query_type = 'id')
    {
        return $this->getGroupUsingGETAsyncWithHttpInfo($authorization, $organization_id, $query_value, $query_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupUsingGETAsyncWithHttpInfo
     *
     * Retrieve a specific group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization in which to find the group (required)
     * @param  string $query_value The ID or name of the group (required)
     * @param  string $query_type Whether to search by group.id or group.name. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupUsingGETAsyncWithHttpInfo($authorization, $organization_id, $query_value, $query_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\GroupWrapperInstanceResult';
        $request = $this->getGroupUsingGETRequest($authorization, $organization_id, $query_value, $query_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupUsingGET'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization in which to find the group (required)
     * @param  string $query_value The ID or name of the group (required)
     * @param  string $query_type Whether to search by group.id or group.name. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGroupUsingGETRequest($authorization, $organization_id, $query_value, $query_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getGroupUsingGET'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getGroupUsingGET'
            );
        }
        // verify the required parameter 'query_value' is set
        if ($query_value === null || (is_array($query_value) && count($query_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_value when calling getGroupUsingGET'
            );
        }

        $resourcePath = '/groups/{organizationId}/{queryValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($query_type !== null) {
            $queryParams['queryType'] = ObjectSerializer::toQueryValue($query_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($query_value !== null) {
            $resourcePath = str_replace(
                '{' . 'queryValue' . '}',
                ObjectSerializer::toPathValue($query_value),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryGroupsUsingGET
     *
     * Retrieve all groups for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GroupWrapperCollectionResult
     */
    public function queryGroupsUsingGET($authorization, $organization_id)
    {
        list($response) = $this->queryGroupsUsingGETWithHttpInfo($authorization, $organization_id);
        return $response;
    }

    /**
     * Operation queryGroupsUsingGETWithHttpInfo
     *
     * Retrieve all groups for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GroupWrapperCollectionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryGroupsUsingGETWithHttpInfo($authorization, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\GroupWrapperCollectionResult';
        $request = $this->queryGroupsUsingGETRequest($authorization, $organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GroupWrapperCollectionResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryGroupsUsingGETAsync
     *
     * Retrieve all groups for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryGroupsUsingGETAsync($authorization, $organization_id)
    {
        return $this->queryGroupsUsingGETAsyncWithHttpInfo($authorization, $organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryGroupsUsingGETAsyncWithHttpInfo
     *
     * Retrieve all groups for an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryGroupsUsingGETAsyncWithHttpInfo($authorization, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\GroupWrapperCollectionResult';
        $request = $this->queryGroupsUsingGETRequest($authorization, $organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryGroupsUsingGET'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryGroupsUsingGETRequest($authorization, $organization_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling queryGroupsUsingGET'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling queryGroupsUsingGET'
            );
        }

        $resourcePath = '/groups/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceContactsIntoSeqGroupUsingPOST
     *
     * Replace contacts for the sequenced group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulBatchOperationResult
     */
    public function replaceContactsIntoSeqGroupUsingPOST($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        list($response) = $this->replaceContactsIntoSeqGroupUsingPOSTWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);
        return $response;
    }

    /**
     * Operation replaceContactsIntoSeqGroupUsingPOSTWithHttpInfo
     *
     * Replace contacts for the sequenced group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulBatchOperationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceContactsIntoSeqGroupUsingPOSTWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->replaceContactsIntoSeqGroupUsingPOSTRequest($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulBatchOperationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceContactsIntoSeqGroupUsingPOSTAsync
     *
     * Replace contacts for the sequenced group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceContactsIntoSeqGroupUsingPOSTAsync($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        return $this->replaceContactsIntoSeqGroupUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceContactsIntoSeqGroupUsingPOSTAsyncWithHttpInfo
     *
     * Replace contacts for the sequenced group
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceContactsIntoSeqGroupUsingPOSTAsyncWithHttpInfo($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        $returnType = '\Swagger\Client\Model\RestfulBatchOperationResult';
        $request = $this->replaceContactsIntoSeqGroupUsingPOSTRequest($authorization, $organization_id, $contact_ids, $by_type, $group_id, $group_name, $id_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceContactsIntoSeqGroupUsingPOST'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  string[] $contact_ids JSON object describing the contacts Ids (required)
     * @param  string $by_type Whether to select by id or name (optional, default to id)
     * @param  int $group_id The ID of the group to add contacts (optional, default to 0)
     * @param  string $group_name The name of the group to add contacts (optional)
     * @param  string $id_type Whether to add by contact.id or contact.externalId. (optional, default to id)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceContactsIntoSeqGroupUsingPOSTRequest($authorization, $organization_id, $contact_ids, $by_type = 'id', $group_id = '0', $group_name = null, $id_type = 'id')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling replaceContactsIntoSeqGroupUsingPOST'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling replaceContactsIntoSeqGroupUsingPOST'
            );
        }
        // verify the required parameter 'contact_ids' is set
        if ($contact_ids === null || (is_array($contact_ids) && count($contact_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_ids when calling replaceContactsIntoSeqGroupUsingPOST'
            );
        }

        $resourcePath = '/groups/{organizationId}/contacts/sequence';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($by_type !== null) {
            $queryParams['byType'] = ObjectSerializer::toQueryValue($by_type);
        }
        // query params
        if ($group_id !== null) {
            $queryParams['groupId'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($group_name !== null) {
            $queryParams['groupName'] = ObjectSerializer::toQueryValue($group_name);
        }
        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contact_ids)) {
            $_tempBody = $contact_ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGroupUsingPUT
     *
     * Update a group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to update (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function updateGroupUsingPUT($authorization, $organization_id, $group_id, $group)
    {
        list($response) = $this->updateGroupUsingPUTWithHttpInfo($authorization, $organization_id, $group_id, $group);
        return $response;
    }

    /**
     * Operation updateGroupUsingPUTWithHttpInfo
     *
     * Update a group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to update (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGroupUsingPUTWithHttpInfo($authorization, $organization_id, $group_id, $group)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateGroupUsingPUTRequest($authorization, $organization_id, $group_id, $group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGroupUsingPUTAsync
     *
     * Update a group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to update (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupUsingPUTAsync($authorization, $organization_id, $group_id, $group)
    {
        return $this->updateGroupUsingPUTAsyncWithHttpInfo($authorization, $organization_id, $group_id, $group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGroupUsingPUTAsyncWithHttpInfo
     *
     * Update a group within an organization
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to update (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupUsingPUTAsyncWithHttpInfo($authorization, $organization_id, $group_id, $group)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateGroupUsingPUTRequest($authorization, $organization_id, $group_id, $group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGroupUsingPUT'
     *
     * @param  string $authorization Basic Authorization header (required)
     * @param  int $organization_id The ID of the organization containing the groups (required)
     * @param  int $group_id The ID of the group to update (required)
     * @param  \Swagger\Client\Model\GroupWrapper $group JSON object describing the new group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGroupUsingPUTRequest($authorization, $organization_id, $group_id, $group)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateGroupUsingPUT'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateGroupUsingPUT'
            );
        }
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling updateGroupUsingPUT'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling updateGroupUsingPUT'
            );
        }

        $resourcePath = '/groups/{organizationId}/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($group)) {
            $_tempBody = $group;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
