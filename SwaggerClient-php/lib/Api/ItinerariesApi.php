<?php
/**
 * ItinerariesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ItinerariesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItinerariesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addItineraryUsingPOST
     *
     * Add An Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function addItineraryUsingPOST($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        list($response) = $this->addItineraryUsingPOSTWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);
        return $response;
    }

    /**
     * Operation addItineraryUsingPOSTWithHttpInfo
     *
     * Add An Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function addItineraryUsingPOSTWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->addItineraryUsingPOSTRequest($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addItineraryUsingPOSTAsync
     *
     * Add An Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItineraryUsingPOSTAsync($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        return $this->addItineraryUsingPOSTAsyncWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addItineraryUsingPOSTAsyncWithHttpInfo
     *
     * Add An Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItineraryUsingPOSTAsyncWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->addItineraryUsingPOSTRequest($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addItineraryUsingPOST'
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addItineraryUsingPOSTRequest($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling addItineraryUsingPOST'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addItineraryUsingPOST'
            );
        }
        // verify the required parameter 'trip_itinerary' is set
        if ($trip_itinerary === null || (is_array($trip_itinerary) && count($trip_itinerary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trip_itinerary when calling addItineraryUsingPOST'
            );
        }

        $resourcePath = '/itineraries/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($auto_create_contact !== null) {
            $queryParams['autoCreateContact'] = ObjectSerializer::toQueryValue($auto_create_contact);
        }
        // query params
        if ($contact_record_type_id !== null) {
            $queryParams['contactRecordTypeId'] = ObjectSerializer::toQueryValue($contact_record_type_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($trip_itinerary)) {
            $_tempBody = $trip_itinerary;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchAddItineraryUsingPOST
     *
     * Add Batch of Itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper[] $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function batchAddItineraryUsingPOST($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        list($response) = $this->batchAddItineraryUsingPOSTWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);
        return $response;
    }

    /**
     * Operation batchAddItineraryUsingPOSTWithHttpInfo
     *
     * Add Batch of Itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper[] $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchAddItineraryUsingPOSTWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->batchAddItineraryUsingPOSTRequest($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchAddItineraryUsingPOSTAsync
     *
     * Add Batch of Itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper[] $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddItineraryUsingPOSTAsync($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        return $this->batchAddItineraryUsingPOSTAsyncWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchAddItineraryUsingPOSTAsyncWithHttpInfo
     *
     * Add Batch of Itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper[] $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddItineraryUsingPOSTAsyncWithHttpInfo($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->batchAddItineraryUsingPOSTRequest($organization_id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchAddItineraryUsingPOST'
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper[] $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchAddItineraryUsingPOSTRequest($organization_id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling batchAddItineraryUsingPOST'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling batchAddItineraryUsingPOST'
            );
        }
        // verify the required parameter 'trip_itinerary' is set
        if ($trip_itinerary === null || (is_array($trip_itinerary) && count($trip_itinerary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trip_itinerary when calling batchAddItineraryUsingPOST'
            );
        }

        $resourcePath = '/itineraries/{organizationId}/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($auto_create_contact !== null) {
            $queryParams['autoCreateContact'] = ObjectSerializer::toQueryValue($auto_create_contact);
        }
        // query params
        if ($contact_record_type_id !== null) {
            $queryParams['contactRecordTypeId'] = ObjectSerializer::toQueryValue($contact_record_type_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($trip_itinerary)) {
            $_tempBody = $trip_itinerary;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchDeleteItineraryUsingDELETE
     *
     * Batch delete itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function batchDeleteItineraryUsingDELETE($organization_id, $authorization, $ids)
    {
        list($response) = $this->batchDeleteItineraryUsingDELETEWithHttpInfo($organization_id, $authorization, $ids);
        return $response;
    }

    /**
     * Operation batchDeleteItineraryUsingDELETEWithHttpInfo
     *
     * Batch delete itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchDeleteItineraryUsingDELETEWithHttpInfo($organization_id, $authorization, $ids)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->batchDeleteItineraryUsingDELETERequest($organization_id, $authorization, $ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchDeleteItineraryUsingDELETEAsync
     *
     * Batch delete itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchDeleteItineraryUsingDELETEAsync($organization_id, $authorization, $ids)
    {
        return $this->batchDeleteItineraryUsingDELETEAsyncWithHttpInfo($organization_id, $authorization, $ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchDeleteItineraryUsingDELETEAsyncWithHttpInfo
     *
     * Batch delete itineraries.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchDeleteItineraryUsingDELETEAsyncWithHttpInfo($organization_id, $authorization, $ids)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->batchDeleteItineraryUsingDELETERequest($organization_id, $authorization, $ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchDeleteItineraryUsingDELETE'
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  string[] $ids JSON object of ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchDeleteItineraryUsingDELETERequest($organization_id, $authorization, $ids)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling batchDeleteItineraryUsingDELETE'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling batchDeleteItineraryUsingDELETE'
            );
        }
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling batchDeleteItineraryUsingDELETE'
            );
        }

        $resourcePath = '/itineraries/{organizationId}/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ids)) {
            $_tempBody = $ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteItineraryUsingDELETE
     *
     * Delete an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function deleteItineraryUsingDELETE($organization_id, $id, $authorization)
    {
        list($response) = $this->deleteItineraryUsingDELETEWithHttpInfo($organization_id, $id, $authorization);
        return $response;
    }

    /**
     * Operation deleteItineraryUsingDELETEWithHttpInfo
     *
     * Delete an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteItineraryUsingDELETEWithHttpInfo($organization_id, $id, $authorization)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->deleteItineraryUsingDELETERequest($organization_id, $id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteItineraryUsingDELETEAsync
     *
     * Delete an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItineraryUsingDELETEAsync($organization_id, $id, $authorization)
    {
        return $this->deleteItineraryUsingDELETEAsyncWithHttpInfo($organization_id, $id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteItineraryUsingDELETEAsyncWithHttpInfo
     *
     * Delete an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItineraryUsingDELETEAsyncWithHttpInfo($organization_id, $id, $authorization)
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->deleteItineraryUsingDELETERequest($organization_id, $id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteItineraryUsingDELETE'
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteItineraryUsingDELETERequest($organization_id, $id, $authorization)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteItineraryUsingDELETE'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteItineraryUsingDELETE'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteItineraryUsingDELETE'
            );
        }

        $resourcePath = '/itineraries/{organizationId}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExpectedLocationsByItineraryIDUsingGET
     *
     * GET Expected Locations By Itinerary ID.
     *
     * @param  int $id id (required)
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExpectedLocationWrapperCollectionResult
     */
    public function getExpectedLocationsByItineraryIDUsingGET($id, $organization_id, $authorization, $page_number = '1')
    {
        list($response) = $this->getExpectedLocationsByItineraryIDUsingGETWithHttpInfo($id, $organization_id, $authorization, $page_number);
        return $response;
    }

    /**
     * Operation getExpectedLocationsByItineraryIDUsingGETWithHttpInfo
     *
     * GET Expected Locations By Itinerary ID.
     *
     * @param  int $id id (required)
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExpectedLocationWrapperCollectionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpectedLocationsByItineraryIDUsingGETWithHttpInfo($id, $organization_id, $authorization, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\ExpectedLocationWrapperCollectionResult';
        $request = $this->getExpectedLocationsByItineraryIDUsingGETRequest($id, $organization_id, $authorization, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExpectedLocationWrapperCollectionResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExpectedLocationsByItineraryIDUsingGETAsync
     *
     * GET Expected Locations By Itinerary ID.
     *
     * @param  int $id id (required)
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpectedLocationsByItineraryIDUsingGETAsync($id, $organization_id, $authorization, $page_number = '1')
    {
        return $this->getExpectedLocationsByItineraryIDUsingGETAsyncWithHttpInfo($id, $organization_id, $authorization, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpectedLocationsByItineraryIDUsingGETAsyncWithHttpInfo
     *
     * GET Expected Locations By Itinerary ID.
     *
     * @param  int $id id (required)
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpectedLocationsByItineraryIDUsingGETAsyncWithHttpInfo($id, $organization_id, $authorization, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\ExpectedLocationWrapperCollectionResult';
        $request = $this->getExpectedLocationsByItineraryIDUsingGETRequest($id, $organization_id, $authorization, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExpectedLocationsByItineraryIDUsingGET'
     *
     * @param  int $id id (required)
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExpectedLocationsByItineraryIDUsingGETRequest($id, $organization_id, $authorization, $page_number = '1')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getExpectedLocationsByItineraryIDUsingGET'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getExpectedLocationsByItineraryIDUsingGET'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getExpectedLocationsByItineraryIDUsingGET'
            );
        }

        $resourcePath = '/itineraries/expectedLocations/{organizationId}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryByParametersUsingPOST
     *
     * Query Itineraries By Parameters.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\ItinerarySearchCriteria $search_criteria JSON object of SearchCriteria (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function queryByParametersUsingPOST($organization_id, $authorization, $search_criteria, $page_number = '1')
    {
        list($response) = $this->queryByParametersUsingPOSTWithHttpInfo($organization_id, $authorization, $search_criteria, $page_number);
        return $response;
    }

    /**
     * Operation queryByParametersUsingPOSTWithHttpInfo
     *
     * Query Itineraries By Parameters.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\ItinerarySearchCriteria $search_criteria JSON object of SearchCriteria (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryByParametersUsingPOSTWithHttpInfo($organization_id, $authorization, $search_criteria, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->queryByParametersUsingPOSTRequest($organization_id, $authorization, $search_criteria, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryByParametersUsingPOSTAsync
     *
     * Query Itineraries By Parameters.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\ItinerarySearchCriteria $search_criteria JSON object of SearchCriteria (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryByParametersUsingPOSTAsync($organization_id, $authorization, $search_criteria, $page_number = '1')
    {
        return $this->queryByParametersUsingPOSTAsyncWithHttpInfo($organization_id, $authorization, $search_criteria, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryByParametersUsingPOSTAsyncWithHttpInfo
     *
     * Query Itineraries By Parameters.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\ItinerarySearchCriteria $search_criteria JSON object of SearchCriteria (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryByParametersUsingPOSTAsyncWithHttpInfo($organization_id, $authorization, $search_criteria, $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->queryByParametersUsingPOSTRequest($organization_id, $authorization, $search_criteria, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryByParametersUsingPOST'
     *
     * @param  int $organization_id Organization ID (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\ItinerarySearchCriteria $search_criteria JSON object of SearchCriteria (required)
     * @param  int $page_number The page number of Itineraries (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryByParametersUsingPOSTRequest($organization_id, $authorization, $search_criteria, $page_number = '1')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling queryByParametersUsingPOST'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling queryByParametersUsingPOST'
            );
        }
        // verify the required parameter 'search_criteria' is set
        if ($search_criteria === null || (is_array($search_criteria) && count($search_criteria) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_criteria when calling queryByParametersUsingPOST'
            );
        }

        $resourcePath = '/itineraries/query/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($search_criteria)) {
            $_tempBody = $search_criteria;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateItineraryUsingPUT
     *
     * Update an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestfulModificationResult
     */
    public function updateItineraryUsingPUT($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        list($response) = $this->updateItineraryUsingPUTWithHttpInfo($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);
        return $response;
    }

    /**
     * Operation updateItineraryUsingPUTWithHttpInfo
     *
     * Update an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestfulModificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItineraryUsingPUTWithHttpInfo($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateItineraryUsingPUTRequest($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestfulModificationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateItineraryUsingPUTAsync
     *
     * Update an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItineraryUsingPUTAsync($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        return $this->updateItineraryUsingPUTAsyncWithHttpInfo($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateItineraryUsingPUTAsyncWithHttpInfo
     *
     * Update an Itinerary.
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItineraryUsingPUTAsyncWithHttpInfo($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        $returnType = '\Swagger\Client\Model\RestfulModificationResult';
        $request = $this->updateItineraryUsingPUTRequest($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact, $contact_record_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateItineraryUsingPUT'
     *
     * @param  int $organization_id Organization ID (required)
     * @param  int $id id (required)
     * @param  string $authorization Basic Authorization Header (required)
     * @param  \Swagger\Client\Model\TripItineraryWrapper $trip_itinerary JSON object of TripItinerary (required)
     * @param  bool $auto_create_contact AutoCreateContact (optional, default to true)
     * @param  int $contact_record_type_id ContactRecordTypeId (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateItineraryUsingPUTRequest($organization_id, $id, $authorization, $trip_itinerary, $auto_create_contact = 'true', $contact_record_type_id = '0')
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateItineraryUsingPUT'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateItineraryUsingPUT'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateItineraryUsingPUT'
            );
        }
        // verify the required parameter 'trip_itinerary' is set
        if ($trip_itinerary === null || (is_array($trip_itinerary) && count($trip_itinerary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trip_itinerary when calling updateItineraryUsingPUT'
            );
        }

        $resourcePath = '/itineraries/{organizationId}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($auto_create_contact !== null) {
            $queryParams['autoCreateContact'] = ObjectSerializer::toQueryValue($auto_create_contact);
        }
        // query params
        if ($contact_record_type_id !== null) {
            $queryParams['contactRecordTypeId'] = ObjectSerializer::toQueryValue($contact_record_type_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($trip_itinerary)) {
            $_tempBody = $trip_itinerary;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
