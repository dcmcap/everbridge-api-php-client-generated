<?php
/**
 * BroadcastContactsWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BroadcastContactsWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BroadcastContactsWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BroadcastContactsWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'answer_needed' => 'string',
        'business_filter_rules_in_map' => '\Swagger\Client\Model\RCNAFilterRulesWrapper',
        'contact_ids' => 'int[]',
        'contact_search_type' => 'string',
        'default_seq_group_quota' => 'int',
        'enable_group_calendar' => 'bool',
        'enable_send_to_subscribers' => 'bool',
        'excluded_contact_ids' => 'int[]',
        'external_ids' => 'string[]',
        'filter_ids' => 'int[]',
        'filter_names' => 'string[]',
        'filter_rules' => '\Swagger\Client\Model\ContactFilterRuleWrapper[]',
        'group_ids' => 'int[]',
        'group_names' => 'string[]',
        'na_resident_contacts' => '\Swagger\Client\Model\NaResidentContactsWrapper',
        'resident_filter_rules_in_map' => '\Swagger\Client\Model\RCNAFilterRulesWrapper',
        'residents' => '\Swagger\Client\Model\UmsContactsWrapper',
        'search_shapes' => '\Swagger\Client\Model\SearchShapeWrapper[]',
        'sequence_group_enabled' => 'bool',
        'sequence_group_interval' => 'int',
        'sequence_groups' => '\Swagger\Client\Model\SequenceGroupWrapper[]',
        'sequence_shifts' => '\Swagger\Client\Model\SequenceShiftWrapper[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'answer_needed' => null,
        'business_filter_rules_in_map' => null,
        'contact_ids' => 'int64',
        'contact_search_type' => null,
        'default_seq_group_quota' => 'int32',
        'enable_group_calendar' => null,
        'enable_send_to_subscribers' => null,
        'excluded_contact_ids' => 'int64',
        'external_ids' => null,
        'filter_ids' => 'int64',
        'filter_names' => null,
        'filter_rules' => null,
        'group_ids' => 'int64',
        'group_names' => null,
        'na_resident_contacts' => null,
        'resident_filter_rules_in_map' => null,
        'residents' => null,
        'search_shapes' => null,
        'sequence_group_enabled' => null,
        'sequence_group_interval' => 'int32',
        'sequence_groups' => null,
        'sequence_shifts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answer_needed' => 'answerNeeded',
        'business_filter_rules_in_map' => 'businessFilterRulesInMap',
        'contact_ids' => 'contactIds',
        'contact_search_type' => 'contactSearchType',
        'default_seq_group_quota' => 'defaultSeqGroupQuota',
        'enable_group_calendar' => 'enableGroupCalendar',
        'enable_send_to_subscribers' => 'enableSendToSubscribers',
        'excluded_contact_ids' => 'excludedContactIds',
        'external_ids' => 'externalIds',
        'filter_ids' => 'filterIds',
        'filter_names' => 'filterNames',
        'filter_rules' => 'filterRules',
        'group_ids' => 'groupIds',
        'group_names' => 'groupNames',
        'na_resident_contacts' => 'naResidentContacts',
        'resident_filter_rules_in_map' => 'residentFilterRulesInMap',
        'residents' => 'residents',
        'search_shapes' => 'searchShapes',
        'sequence_group_enabled' => 'sequenceGroupEnabled',
        'sequence_group_interval' => 'sequenceGroupInterval',
        'sequence_groups' => 'sequenceGroups',
        'sequence_shifts' => 'sequenceShifts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answer_needed' => 'setAnswerNeeded',
        'business_filter_rules_in_map' => 'setBusinessFilterRulesInMap',
        'contact_ids' => 'setContactIds',
        'contact_search_type' => 'setContactSearchType',
        'default_seq_group_quota' => 'setDefaultSeqGroupQuota',
        'enable_group_calendar' => 'setEnableGroupCalendar',
        'enable_send_to_subscribers' => 'setEnableSendToSubscribers',
        'excluded_contact_ids' => 'setExcludedContactIds',
        'external_ids' => 'setExternalIds',
        'filter_ids' => 'setFilterIds',
        'filter_names' => 'setFilterNames',
        'filter_rules' => 'setFilterRules',
        'group_ids' => 'setGroupIds',
        'group_names' => 'setGroupNames',
        'na_resident_contacts' => 'setNaResidentContacts',
        'resident_filter_rules_in_map' => 'setResidentFilterRulesInMap',
        'residents' => 'setResidents',
        'search_shapes' => 'setSearchShapes',
        'sequence_group_enabled' => 'setSequenceGroupEnabled',
        'sequence_group_interval' => 'setSequenceGroupInterval',
        'sequence_groups' => 'setSequenceGroups',
        'sequence_shifts' => 'setSequenceShifts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answer_needed' => 'getAnswerNeeded',
        'business_filter_rules_in_map' => 'getBusinessFilterRulesInMap',
        'contact_ids' => 'getContactIds',
        'contact_search_type' => 'getContactSearchType',
        'default_seq_group_quota' => 'getDefaultSeqGroupQuota',
        'enable_group_calendar' => 'getEnableGroupCalendar',
        'enable_send_to_subscribers' => 'getEnableSendToSubscribers',
        'excluded_contact_ids' => 'getExcludedContactIds',
        'external_ids' => 'getExternalIds',
        'filter_ids' => 'getFilterIds',
        'filter_names' => 'getFilterNames',
        'filter_rules' => 'getFilterRules',
        'group_ids' => 'getGroupIds',
        'group_names' => 'getGroupNames',
        'na_resident_contacts' => 'getNaResidentContacts',
        'resident_filter_rules_in_map' => 'getResidentFilterRulesInMap',
        'residents' => 'getResidents',
        'search_shapes' => 'getSearchShapes',
        'sequence_group_enabled' => 'getSequenceGroupEnabled',
        'sequence_group_interval' => 'getSequenceGroupInterval',
        'sequence_groups' => 'getSequenceGroups',
        'sequence_shifts' => 'getSequenceShifts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTACT_SEARCH_TYPE_ALL_OR = 'AllOr';
    const CONTACT_SEARCH_TYPE_ALL_AND = 'AllAnd';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactSearchTypeAllowableValues()
    {
        return [
            self::CONTACT_SEARCH_TYPE_ALL_OR,
            self::CONTACT_SEARCH_TYPE_ALL_AND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['answer_needed'] = isset($data['answer_needed']) ? $data['answer_needed'] : null;
        $this->container['business_filter_rules_in_map'] = isset($data['business_filter_rules_in_map']) ? $data['business_filter_rules_in_map'] : null;
        $this->container['contact_ids'] = isset($data['contact_ids']) ? $data['contact_ids'] : null;
        $this->container['contact_search_type'] = isset($data['contact_search_type']) ? $data['contact_search_type'] : null;
        $this->container['default_seq_group_quota'] = isset($data['default_seq_group_quota']) ? $data['default_seq_group_quota'] : null;
        $this->container['enable_group_calendar'] = isset($data['enable_group_calendar']) ? $data['enable_group_calendar'] : null;
        $this->container['enable_send_to_subscribers'] = isset($data['enable_send_to_subscribers']) ? $data['enable_send_to_subscribers'] : null;
        $this->container['excluded_contact_ids'] = isset($data['excluded_contact_ids']) ? $data['excluded_contact_ids'] : null;
        $this->container['external_ids'] = isset($data['external_ids']) ? $data['external_ids'] : null;
        $this->container['filter_ids'] = isset($data['filter_ids']) ? $data['filter_ids'] : null;
        $this->container['filter_names'] = isset($data['filter_names']) ? $data['filter_names'] : null;
        $this->container['filter_rules'] = isset($data['filter_rules']) ? $data['filter_rules'] : null;
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['group_names'] = isset($data['group_names']) ? $data['group_names'] : null;
        $this->container['na_resident_contacts'] = isset($data['na_resident_contacts']) ? $data['na_resident_contacts'] : null;
        $this->container['resident_filter_rules_in_map'] = isset($data['resident_filter_rules_in_map']) ? $data['resident_filter_rules_in_map'] : null;
        $this->container['residents'] = isset($data['residents']) ? $data['residents'] : null;
        $this->container['search_shapes'] = isset($data['search_shapes']) ? $data['search_shapes'] : null;
        $this->container['sequence_group_enabled'] = isset($data['sequence_group_enabled']) ? $data['sequence_group_enabled'] : null;
        $this->container['sequence_group_interval'] = isset($data['sequence_group_interval']) ? $data['sequence_group_interval'] : null;
        $this->container['sequence_groups'] = isset($data['sequence_groups']) ? $data['sequence_groups'] : null;
        $this->container['sequence_shifts'] = isset($data['sequence_shifts']) ? $data['sequence_shifts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContactSearchTypeAllowableValues();
        if (!is_null($this->container['contact_search_type']) && !in_array($this->container['contact_search_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contact_search_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answer_needed
     *
     * @return string
     */
    public function getAnswerNeeded()
    {
        return $this->container['answer_needed'];
    }

    /**
     * Sets answer_needed
     *
     * @param string $answer_needed answer_needed
     *
     * @return $this
     */
    public function setAnswerNeeded($answer_needed)
    {
        $this->container['answer_needed'] = $answer_needed;

        return $this;
    }

    /**
     * Gets business_filter_rules_in_map
     *
     * @return \Swagger\Client\Model\RCNAFilterRulesWrapper
     */
    public function getBusinessFilterRulesInMap()
    {
        return $this->container['business_filter_rules_in_map'];
    }

    /**
     * Sets business_filter_rules_in_map
     *
     * @param \Swagger\Client\Model\RCNAFilterRulesWrapper $business_filter_rules_in_map business_filter_rules_in_map
     *
     * @return $this
     */
    public function setBusinessFilterRulesInMap($business_filter_rules_in_map)
    {
        $this->container['business_filter_rules_in_map'] = $business_filter_rules_in_map;

        return $this;
    }

    /**
     * Gets contact_ids
     *
     * @return int[]
     */
    public function getContactIds()
    {
        return $this->container['contact_ids'];
    }

    /**
     * Sets contact_ids
     *
     * @param int[] $contact_ids contact_ids
     *
     * @return $this
     */
    public function setContactIds($contact_ids)
    {
        $this->container['contact_ids'] = $contact_ids;

        return $this;
    }

    /**
     * Gets contact_search_type
     *
     * @return string
     */
    public function getContactSearchType()
    {
        return $this->container['contact_search_type'];
    }

    /**
     * Sets contact_search_type
     *
     * @param string $contact_search_type contact_search_type
     *
     * @return $this
     */
    public function setContactSearchType($contact_search_type)
    {
        $allowedValues = $this->getContactSearchTypeAllowableValues();
        if (!is_null($contact_search_type) && !in_array($contact_search_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contact_search_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_search_type'] = $contact_search_type;

        return $this;
    }

    /**
     * Gets default_seq_group_quota
     *
     * @return int
     */
    public function getDefaultSeqGroupQuota()
    {
        return $this->container['default_seq_group_quota'];
    }

    /**
     * Sets default_seq_group_quota
     *
     * @param int $default_seq_group_quota default_seq_group_quota
     *
     * @return $this
     */
    public function setDefaultSeqGroupQuota($default_seq_group_quota)
    {
        $this->container['default_seq_group_quota'] = $default_seq_group_quota;

        return $this;
    }

    /**
     * Gets enable_group_calendar
     *
     * @return bool
     */
    public function getEnableGroupCalendar()
    {
        return $this->container['enable_group_calendar'];
    }

    /**
     * Sets enable_group_calendar
     *
     * @param bool $enable_group_calendar enable_group_calendar
     *
     * @return $this
     */
    public function setEnableGroupCalendar($enable_group_calendar)
    {
        $this->container['enable_group_calendar'] = $enable_group_calendar;

        return $this;
    }

    /**
     * Gets enable_send_to_subscribers
     *
     * @return bool
     */
    public function getEnableSendToSubscribers()
    {
        return $this->container['enable_send_to_subscribers'];
    }

    /**
     * Sets enable_send_to_subscribers
     *
     * @param bool $enable_send_to_subscribers enable_send_to_subscribers
     *
     * @return $this
     */
    public function setEnableSendToSubscribers($enable_send_to_subscribers)
    {
        $this->container['enable_send_to_subscribers'] = $enable_send_to_subscribers;

        return $this;
    }

    /**
     * Gets excluded_contact_ids
     *
     * @return int[]
     */
    public function getExcludedContactIds()
    {
        return $this->container['excluded_contact_ids'];
    }

    /**
     * Sets excluded_contact_ids
     *
     * @param int[] $excluded_contact_ids excluded_contact_ids
     *
     * @return $this
     */
    public function setExcludedContactIds($excluded_contact_ids)
    {
        $this->container['excluded_contact_ids'] = $excluded_contact_ids;

        return $this;
    }

    /**
     * Gets external_ids
     *
     * @return string[]
     */
    public function getExternalIds()
    {
        return $this->container['external_ids'];
    }

    /**
     * Sets external_ids
     *
     * @param string[] $external_ids external_ids
     *
     * @return $this
     */
    public function setExternalIds($external_ids)
    {
        $this->container['external_ids'] = $external_ids;

        return $this;
    }

    /**
     * Gets filter_ids
     *
     * @return int[]
     */
    public function getFilterIds()
    {
        return $this->container['filter_ids'];
    }

    /**
     * Sets filter_ids
     *
     * @param int[] $filter_ids filter_ids
     *
     * @return $this
     */
    public function setFilterIds($filter_ids)
    {
        $this->container['filter_ids'] = $filter_ids;

        return $this;
    }

    /**
     * Gets filter_names
     *
     * @return string[]
     */
    public function getFilterNames()
    {
        return $this->container['filter_names'];
    }

    /**
     * Sets filter_names
     *
     * @param string[] $filter_names filter_names
     *
     * @return $this
     */
    public function setFilterNames($filter_names)
    {
        $this->container['filter_names'] = $filter_names;

        return $this;
    }

    /**
     * Gets filter_rules
     *
     * @return \Swagger\Client\Model\ContactFilterRuleWrapper[]
     */
    public function getFilterRules()
    {
        return $this->container['filter_rules'];
    }

    /**
     * Sets filter_rules
     *
     * @param \Swagger\Client\Model\ContactFilterRuleWrapper[] $filter_rules filter_rules
     *
     * @return $this
     */
    public function setFilterRules($filter_rules)
    {
        $this->container['filter_rules'] = $filter_rules;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return int[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param int[] $group_ids group_ids
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets group_names
     *
     * @return string[]
     */
    public function getGroupNames()
    {
        return $this->container['group_names'];
    }

    /**
     * Sets group_names
     *
     * @param string[] $group_names group_names
     *
     * @return $this
     */
    public function setGroupNames($group_names)
    {
        $this->container['group_names'] = $group_names;

        return $this;
    }

    /**
     * Gets na_resident_contacts
     *
     * @return \Swagger\Client\Model\NaResidentContactsWrapper
     */
    public function getNaResidentContacts()
    {
        return $this->container['na_resident_contacts'];
    }

    /**
     * Sets na_resident_contacts
     *
     * @param \Swagger\Client\Model\NaResidentContactsWrapper $na_resident_contacts na_resident_contacts
     *
     * @return $this
     */
    public function setNaResidentContacts($na_resident_contacts)
    {
        $this->container['na_resident_contacts'] = $na_resident_contacts;

        return $this;
    }

    /**
     * Gets resident_filter_rules_in_map
     *
     * @return \Swagger\Client\Model\RCNAFilterRulesWrapper
     */
    public function getResidentFilterRulesInMap()
    {
        return $this->container['resident_filter_rules_in_map'];
    }

    /**
     * Sets resident_filter_rules_in_map
     *
     * @param \Swagger\Client\Model\RCNAFilterRulesWrapper $resident_filter_rules_in_map resident_filter_rules_in_map
     *
     * @return $this
     */
    public function setResidentFilterRulesInMap($resident_filter_rules_in_map)
    {
        $this->container['resident_filter_rules_in_map'] = $resident_filter_rules_in_map;

        return $this;
    }

    /**
     * Gets residents
     *
     * @return \Swagger\Client\Model\UmsContactsWrapper
     */
    public function getResidents()
    {
        return $this->container['residents'];
    }

    /**
     * Sets residents
     *
     * @param \Swagger\Client\Model\UmsContactsWrapper $residents residents
     *
     * @return $this
     */
    public function setResidents($residents)
    {
        $this->container['residents'] = $residents;

        return $this;
    }

    /**
     * Gets search_shapes
     *
     * @return \Swagger\Client\Model\SearchShapeWrapper[]
     */
    public function getSearchShapes()
    {
        return $this->container['search_shapes'];
    }

    /**
     * Sets search_shapes
     *
     * @param \Swagger\Client\Model\SearchShapeWrapper[] $search_shapes search_shapes
     *
     * @return $this
     */
    public function setSearchShapes($search_shapes)
    {
        $this->container['search_shapes'] = $search_shapes;

        return $this;
    }

    /**
     * Gets sequence_group_enabled
     *
     * @return bool
     */
    public function getSequenceGroupEnabled()
    {
        return $this->container['sequence_group_enabled'];
    }

    /**
     * Sets sequence_group_enabled
     *
     * @param bool $sequence_group_enabled sequence_group_enabled
     *
     * @return $this
     */
    public function setSequenceGroupEnabled($sequence_group_enabled)
    {
        $this->container['sequence_group_enabled'] = $sequence_group_enabled;

        return $this;
    }

    /**
     * Gets sequence_group_interval
     *
     * @return int
     */
    public function getSequenceGroupInterval()
    {
        return $this->container['sequence_group_interval'];
    }

    /**
     * Sets sequence_group_interval
     *
     * @param int $sequence_group_interval sequence_group_interval
     *
     * @return $this
     */
    public function setSequenceGroupInterval($sequence_group_interval)
    {
        $this->container['sequence_group_interval'] = $sequence_group_interval;

        return $this;
    }

    /**
     * Gets sequence_groups
     *
     * @return \Swagger\Client\Model\SequenceGroupWrapper[]
     */
    public function getSequenceGroups()
    {
        return $this->container['sequence_groups'];
    }

    /**
     * Sets sequence_groups
     *
     * @param \Swagger\Client\Model\SequenceGroupWrapper[] $sequence_groups sequence_groups
     *
     * @return $this
     */
    public function setSequenceGroups($sequence_groups)
    {
        $this->container['sequence_groups'] = $sequence_groups;

        return $this;
    }

    /**
     * Gets sequence_shifts
     *
     * @return \Swagger\Client\Model\SequenceShiftWrapper[]
     */
    public function getSequenceShifts()
    {
        return $this->container['sequence_shifts'];
    }

    /**
     * Sets sequence_shifts
     *
     * @param \Swagger\Client\Model\SequenceShiftWrapper[] $sequence_shifts sequence_shifts
     *
     * @return $this
     */
    public function setSequenceShifts($sequence_shifts)
    {
        $this->container['sequence_shifts'] = $sequence_shifts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


