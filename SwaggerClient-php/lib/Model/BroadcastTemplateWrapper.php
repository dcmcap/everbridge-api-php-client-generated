<?php
/**
 * BroadcastTemplateWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BroadcastTemplateWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BroadcastTemplateWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BroadcastTemplateWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'broadcast_contacts' => '\Swagger\Client\Model\BroadcastContactsWrapper',
        'broadcast_settings' => '\Swagger\Client\Model\BroadcastSettingsWrapper',
        'category' => '\Swagger\Client\Model\CategoryWrapper',
        'category_id' => 'int',
        'confirm_count_needed' => 'int',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'created_proxy_name' => 'string',
        'enable_life_safety' => 'bool',
        'escalation_levels' => '\Swagger\Client\Model\EscalationLevelWrapper[]',
        'event' => '\Swagger\Client\Model\NotificationEventWrapper',
        'id' => 'int',
        'last_modified_date' => '\DateTime',
        'last_modified_id' => 'int',
        'last_modified_name' => 'string',
        'last_modified_proxy_name' => 'string',
        'message' => '\Swagger\Client\Model\BroadcastMessageWrapper',
        'notification_event_id' => 'int',
        'notification_name' => 'string',
        'organization_id' => 'int',
        'polling_option_needed' => 'string',
        'priority' => 'string',
        'public_messages' => '\Swagger\Client\Model\PublicMessagesWrapper',
        'resource_bundle_id' => 'int',
        'status' => 'string',
        'type' => 'string',
        'use_escalation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'broadcast_contacts' => null,
        'broadcast_settings' => null,
        'category' => null,
        'category_id' => 'int64',
        'confirm_count_needed' => 'int64',
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'created_proxy_name' => null,
        'enable_life_safety' => null,
        'escalation_levels' => null,
        'event' => null,
        'id' => 'int64',
        'last_modified_date' => 'date-time',
        'last_modified_id' => 'int64',
        'last_modified_name' => null,
        'last_modified_proxy_name' => null,
        'message' => null,
        'notification_event_id' => 'int64',
        'notification_name' => null,
        'organization_id' => 'int64',
        'polling_option_needed' => null,
        'priority' => null,
        'public_messages' => null,
        'resource_bundle_id' => 'int64',
        'status' => null,
        'type' => null,
        'use_escalation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'broadcast_contacts' => 'broadcastContacts',
        'broadcast_settings' => 'broadcastSettings',
        'category' => 'category',
        'category_id' => 'categoryId',
        'confirm_count_needed' => 'confirmCountNeeded',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'created_proxy_name' => 'createdProxyName',
        'enable_life_safety' => 'enableLifeSafety',
        'escalation_levels' => 'escalationLevels',
        'event' => 'event',
        'id' => 'id',
        'last_modified_date' => 'lastModifiedDate',
        'last_modified_id' => 'lastModifiedId',
        'last_modified_name' => 'lastModifiedName',
        'last_modified_proxy_name' => 'lastModifiedProxyName',
        'message' => 'message',
        'notification_event_id' => 'notificationEventId',
        'notification_name' => 'notificationName',
        'organization_id' => 'organizationId',
        'polling_option_needed' => 'pollingOptionNeeded',
        'priority' => 'priority',
        'public_messages' => 'publicMessages',
        'resource_bundle_id' => 'resourceBundleId',
        'status' => 'status',
        'type' => 'type',
        'use_escalation' => 'useEscalation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'broadcast_contacts' => 'setBroadcastContacts',
        'broadcast_settings' => 'setBroadcastSettings',
        'category' => 'setCategory',
        'category_id' => 'setCategoryId',
        'confirm_count_needed' => 'setConfirmCountNeeded',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'created_proxy_name' => 'setCreatedProxyName',
        'enable_life_safety' => 'setEnableLifeSafety',
        'escalation_levels' => 'setEscalationLevels',
        'event' => 'setEvent',
        'id' => 'setId',
        'last_modified_date' => 'setLastModifiedDate',
        'last_modified_id' => 'setLastModifiedId',
        'last_modified_name' => 'setLastModifiedName',
        'last_modified_proxy_name' => 'setLastModifiedProxyName',
        'message' => 'setMessage',
        'notification_event_id' => 'setNotificationEventId',
        'notification_name' => 'setNotificationName',
        'organization_id' => 'setOrganizationId',
        'polling_option_needed' => 'setPollingOptionNeeded',
        'priority' => 'setPriority',
        'public_messages' => 'setPublicMessages',
        'resource_bundle_id' => 'setResourceBundleId',
        'status' => 'setStatus',
        'type' => 'setType',
        'use_escalation' => 'setUseEscalation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'broadcast_contacts' => 'getBroadcastContacts',
        'broadcast_settings' => 'getBroadcastSettings',
        'category' => 'getCategory',
        'category_id' => 'getCategoryId',
        'confirm_count_needed' => 'getConfirmCountNeeded',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'created_proxy_name' => 'getCreatedProxyName',
        'enable_life_safety' => 'getEnableLifeSafety',
        'escalation_levels' => 'getEscalationLevels',
        'event' => 'getEvent',
        'id' => 'getId',
        'last_modified_date' => 'getLastModifiedDate',
        'last_modified_id' => 'getLastModifiedId',
        'last_modified_name' => 'getLastModifiedName',
        'last_modified_proxy_name' => 'getLastModifiedProxyName',
        'message' => 'getMessage',
        'notification_event_id' => 'getNotificationEventId',
        'notification_name' => 'getNotificationName',
        'organization_id' => 'getOrganizationId',
        'polling_option_needed' => 'getPollingOptionNeeded',
        'priority' => 'getPriority',
        'public_messages' => 'getPublicMessages',
        'resource_bundle_id' => 'getResourceBundleId',
        'status' => 'getStatus',
        'type' => 'getType',
        'use_escalation' => 'getUseEscalation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIORITY_NON_PRIORITY = 'NonPriority';
    const PRIORITY_PRIORITY = 'Priority';
    const STATUS_A = 'A';
    const STATUS_D = 'D';
    const TYPE_STANDARD = 'Standard';
    const TYPE_POLLING = 'Polling';
    const TYPE_CONFERENCE = 'Conference';
    const TYPE_QUOTA = 'Quota';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_NON_PRIORITY,
            self::PRIORITY_PRIORITY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_STANDARD,
            self::TYPE_POLLING,
            self::TYPE_CONFERENCE,
            self::TYPE_QUOTA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['broadcast_contacts'] = isset($data['broadcast_contacts']) ? $data['broadcast_contacts'] : null;
        $this->container['broadcast_settings'] = isset($data['broadcast_settings']) ? $data['broadcast_settings'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['confirm_count_needed'] = isset($data['confirm_count_needed']) ? $data['confirm_count_needed'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['created_proxy_name'] = isset($data['created_proxy_name']) ? $data['created_proxy_name'] : null;
        $this->container['enable_life_safety'] = isset($data['enable_life_safety']) ? $data['enable_life_safety'] : null;
        $this->container['escalation_levels'] = isset($data['escalation_levels']) ? $data['escalation_levels'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_modified_id'] = isset($data['last_modified_id']) ? $data['last_modified_id'] : null;
        $this->container['last_modified_name'] = isset($data['last_modified_name']) ? $data['last_modified_name'] : null;
        $this->container['last_modified_proxy_name'] = isset($data['last_modified_proxy_name']) ? $data['last_modified_proxy_name'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['notification_event_id'] = isset($data['notification_event_id']) ? $data['notification_event_id'] : null;
        $this->container['notification_name'] = isset($data['notification_name']) ? $data['notification_name'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['polling_option_needed'] = isset($data['polling_option_needed']) ? $data['polling_option_needed'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['public_messages'] = isset($data['public_messages']) ? $data['public_messages'] : null;
        $this->container['resource_bundle_id'] = isset($data['resource_bundle_id']) ? $data['resource_bundle_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['use_escalation'] = isset($data['use_escalation']) ? $data['use_escalation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets broadcast_contacts
     *
     * @return \Swagger\Client\Model\BroadcastContactsWrapper
     */
    public function getBroadcastContacts()
    {
        return $this->container['broadcast_contacts'];
    }

    /**
     * Sets broadcast_contacts
     *
     * @param \Swagger\Client\Model\BroadcastContactsWrapper $broadcast_contacts broadcast_contacts
     *
     * @return $this
     */
    public function setBroadcastContacts($broadcast_contacts)
    {
        $this->container['broadcast_contacts'] = $broadcast_contacts;

        return $this;
    }

    /**
     * Gets broadcast_settings
     *
     * @return \Swagger\Client\Model\BroadcastSettingsWrapper
     */
    public function getBroadcastSettings()
    {
        return $this->container['broadcast_settings'];
    }

    /**
     * Sets broadcast_settings
     *
     * @param \Swagger\Client\Model\BroadcastSettingsWrapper $broadcast_settings broadcast_settings
     *
     * @return $this
     */
    public function setBroadcastSettings($broadcast_settings)
    {
        $this->container['broadcast_settings'] = $broadcast_settings;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\CategoryWrapper
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\CategoryWrapper $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets confirm_count_needed
     *
     * @return int
     */
    public function getConfirmCountNeeded()
    {
        return $this->container['confirm_count_needed'];
    }

    /**
     * Sets confirm_count_needed
     *
     * @param int $confirm_count_needed confirm_count_needed
     *
     * @return $this
     */
    public function setConfirmCountNeeded($confirm_count_needed)
    {
        $this->container['confirm_count_needed'] = $confirm_count_needed;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets created_proxy_name
     *
     * @return string
     */
    public function getCreatedProxyName()
    {
        return $this->container['created_proxy_name'];
    }

    /**
     * Sets created_proxy_name
     *
     * @param string $created_proxy_name created_proxy_name
     *
     * @return $this
     */
    public function setCreatedProxyName($created_proxy_name)
    {
        $this->container['created_proxy_name'] = $created_proxy_name;

        return $this;
    }

    /**
     * Gets enable_life_safety
     *
     * @return bool
     */
    public function getEnableLifeSafety()
    {
        return $this->container['enable_life_safety'];
    }

    /**
     * Sets enable_life_safety
     *
     * @param bool $enable_life_safety enable_life_safety
     *
     * @return $this
     */
    public function setEnableLifeSafety($enable_life_safety)
    {
        $this->container['enable_life_safety'] = $enable_life_safety;

        return $this;
    }

    /**
     * Gets escalation_levels
     *
     * @return \Swagger\Client\Model\EscalationLevelWrapper[]
     */
    public function getEscalationLevels()
    {
        return $this->container['escalation_levels'];
    }

    /**
     * Sets escalation_levels
     *
     * @param \Swagger\Client\Model\EscalationLevelWrapper[] $escalation_levels escalation_levels
     *
     * @return $this
     */
    public function setEscalationLevels($escalation_levels)
    {
        $this->container['escalation_levels'] = $escalation_levels;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Swagger\Client\Model\NotificationEventWrapper
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \Swagger\Client\Model\NotificationEventWrapper $event event
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_modified_id
     *
     * @return int
     */
    public function getLastModifiedId()
    {
        return $this->container['last_modified_id'];
    }

    /**
     * Sets last_modified_id
     *
     * @param int $last_modified_id last_modified_id
     *
     * @return $this
     */
    public function setLastModifiedId($last_modified_id)
    {
        $this->container['last_modified_id'] = $last_modified_id;

        return $this;
    }

    /**
     * Gets last_modified_name
     *
     * @return string
     */
    public function getLastModifiedName()
    {
        return $this->container['last_modified_name'];
    }

    /**
     * Sets last_modified_name
     *
     * @param string $last_modified_name last_modified_name
     *
     * @return $this
     */
    public function setLastModifiedName($last_modified_name)
    {
        $this->container['last_modified_name'] = $last_modified_name;

        return $this;
    }

    /**
     * Gets last_modified_proxy_name
     *
     * @return string
     */
    public function getLastModifiedProxyName()
    {
        return $this->container['last_modified_proxy_name'];
    }

    /**
     * Sets last_modified_proxy_name
     *
     * @param string $last_modified_proxy_name last_modified_proxy_name
     *
     * @return $this
     */
    public function setLastModifiedProxyName($last_modified_proxy_name)
    {
        $this->container['last_modified_proxy_name'] = $last_modified_proxy_name;

        return $this;
    }

    /**
     * Gets message
     *
     * @return \Swagger\Client\Model\BroadcastMessageWrapper
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param \Swagger\Client\Model\BroadcastMessageWrapper $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets notification_event_id
     *
     * @return int
     */
    public function getNotificationEventId()
    {
        return $this->container['notification_event_id'];
    }

    /**
     * Sets notification_event_id
     *
     * @param int $notification_event_id notification_event_id
     *
     * @return $this
     */
    public function setNotificationEventId($notification_event_id)
    {
        $this->container['notification_event_id'] = $notification_event_id;

        return $this;
    }

    /**
     * Gets notification_name
     *
     * @return string
     */
    public function getNotificationName()
    {
        return $this->container['notification_name'];
    }

    /**
     * Sets notification_name
     *
     * @param string $notification_name notification_name
     *
     * @return $this
     */
    public function setNotificationName($notification_name)
    {
        $this->container['notification_name'] = $notification_name;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets polling_option_needed
     *
     * @return string
     */
    public function getPollingOptionNeeded()
    {
        return $this->container['polling_option_needed'];
    }

    /**
     * Sets polling_option_needed
     *
     * @param string $polling_option_needed polling_option_needed
     *
     * @return $this
     */
    public function setPollingOptionNeeded($polling_option_needed)
    {
        $this->container['polling_option_needed'] = $polling_option_needed;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets public_messages
     *
     * @return \Swagger\Client\Model\PublicMessagesWrapper
     */
    public function getPublicMessages()
    {
        return $this->container['public_messages'];
    }

    /**
     * Sets public_messages
     *
     * @param \Swagger\Client\Model\PublicMessagesWrapper $public_messages public_messages
     *
     * @return $this
     */
    public function setPublicMessages($public_messages)
    {
        $this->container['public_messages'] = $public_messages;

        return $this;
    }

    /**
     * Gets resource_bundle_id
     *
     * @return int
     */
    public function getResourceBundleId()
    {
        return $this->container['resource_bundle_id'];
    }

    /**
     * Sets resource_bundle_id
     *
     * @param int $resource_bundle_id resource_bundle_id
     *
     * @return $this
     */
    public function setResourceBundleId($resource_bundle_id)
    {
        $this->container['resource_bundle_id'] = $resource_bundle_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets use_escalation
     *
     * @return bool
     */
    public function getUseEscalation()
    {
        return $this->container['use_escalation'];
    }

    /**
     * Sets use_escalation
     *
     * @param bool $use_escalation use_escalation
     *
     * @return $this
     */
    public function setUseEscalation($use_escalation)
    {
        $this->container['use_escalation'] = $use_escalation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


