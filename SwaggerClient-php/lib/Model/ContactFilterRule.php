<?php
/**
 * ContactFilterRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactFilterRule Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactFilterRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactFilterRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attribute_id' => 'int',
        'attribute_values' => 'object[]',
        'column_name' => 'string',
        'column_value' => 'object',
        'contact_field_id' => 'int',
        'contact_filter_id' => 'int',
        'contact_filter_option' => 'string',
        'data_type' => 'string',
        'display_name' => 'string',
        'embedded_column_name' => 'string',
        'field_value' => 'object',
        'id' => 'int',
        'search_field_display_type' => 'string',
        'seq' => 'int',
        'table_name' => 'string',
        'type' => 'string',
        'value_category' => 'int',
        'variable_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attribute_id' => 'int64',
        'attribute_values' => null,
        'column_name' => null,
        'column_value' => null,
        'contact_field_id' => 'int64',
        'contact_filter_id' => 'int64',
        'contact_filter_option' => null,
        'data_type' => null,
        'display_name' => null,
        'embedded_column_name' => null,
        'field_value' => null,
        'id' => 'int64',
        'search_field_display_type' => null,
        'seq' => 'int32',
        'table_name' => null,
        'type' => null,
        'value_category' => 'int64',
        'variable_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_id' => 'attributeId',
        'attribute_values' => 'attributeValues',
        'column_name' => 'columnName',
        'column_value' => 'columnValue',
        'contact_field_id' => 'contactFieldId',
        'contact_filter_id' => 'contactFilterId',
        'contact_filter_option' => 'contactFilterOption',
        'data_type' => 'dataType',
        'display_name' => 'displayName',
        'embedded_column_name' => 'embeddedColumnName',
        'field_value' => 'fieldValue',
        'id' => 'id',
        'search_field_display_type' => 'searchFieldDisplayType',
        'seq' => 'seq',
        'table_name' => 'tableName',
        'type' => 'type',
        'value_category' => 'valueCategory',
        'variable_id' => 'variableId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_id' => 'setAttributeId',
        'attribute_values' => 'setAttributeValues',
        'column_name' => 'setColumnName',
        'column_value' => 'setColumnValue',
        'contact_field_id' => 'setContactFieldId',
        'contact_filter_id' => 'setContactFilterId',
        'contact_filter_option' => 'setContactFilterOption',
        'data_type' => 'setDataType',
        'display_name' => 'setDisplayName',
        'embedded_column_name' => 'setEmbeddedColumnName',
        'field_value' => 'setFieldValue',
        'id' => 'setId',
        'search_field_display_type' => 'setSearchFieldDisplayType',
        'seq' => 'setSeq',
        'table_name' => 'setTableName',
        'type' => 'setType',
        'value_category' => 'setValueCategory',
        'variable_id' => 'setVariableId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_id' => 'getAttributeId',
        'attribute_values' => 'getAttributeValues',
        'column_name' => 'getColumnName',
        'column_value' => 'getColumnValue',
        'contact_field_id' => 'getContactFieldId',
        'contact_filter_id' => 'getContactFilterId',
        'contact_filter_option' => 'getContactFilterOption',
        'data_type' => 'getDataType',
        'display_name' => 'getDisplayName',
        'embedded_column_name' => 'getEmbeddedColumnName',
        'field_value' => 'getFieldValue',
        'id' => 'getId',
        'search_field_display_type' => 'getSearchFieldDisplayType',
        'seq' => 'getSeq',
        'table_name' => 'getTableName',
        'type' => 'getType',
        'value_category' => 'getValueCategory',
        'variable_id' => 'getVariableId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTACT_FILTER_OPTION_ISNULL = 'ISNULL';
    const CONTACT_FILTER_OPTION_ISNULLARRAY = 'ISNULLARRAY';
    const CONTACT_FILTER_OPTION_NOTNULL = 'NOTNULL';
    const CONTACT_FILTER_OPTION_IN = 'IN';
    const CONTACT_FILTER_OPTION_NIN = 'NIN';
    const CONTACT_FILTER_OPTION_GT = 'GT';
    const CONTACT_FILTER_OPTION_LT = 'LT';
    const CONTACT_FILTER_OPTION_GTE = 'GTE';
    const CONTACT_FILTER_OPTION_LTE = 'LTE';
    const CONTACT_FILTER_OPTION_NE = 'NE';
    const CONTACT_FILTER_OPTION_NENLC = 'NENLC';
    const CONTACT_FILTER_OPTION_E = 'E';
    const CONTACT_FILTER_OPTION_ENLC = 'ENLC';
    const CONTACT_FILTER_OPTION_LIKE = 'LIKE';
    const CONTACT_FILTER_OPTION_LIKENLC = 'LIKENLC';
    const CONTACT_FILTER_OPTION_NLIKE = 'NLIKE';
    const CONTACT_FILTER_OPTION_NLIKENLC = 'NLIKENLC';
    const CONTACT_FILTER_OPTION_STARTWITH = 'STARTWITH';
    const CONTACT_FILTER_OPTION_STARTWITHNLC = 'STARTWITHNLC';
    const CONTACT_FILTER_OPTION_ENDWITH = 'ENDWITH';
    const CONTACT_FILTER_OPTION_ENDWITHNLC = 'ENDWITHNLC';
    const CONTACT_FILTER_OPTION_INPOLYGON = 'INPOLYGON';
    const CONTACT_FILTER_OPTION_NINPOLYGON = 'NINPOLYGON';
    const CONTACT_FILTER_OPTION_OVERLAP = 'OVERLAP';
    const CONTACT_FILTER_OPTION_NONEOVERLAP = 'NONEOVERLAP';
    const CONTACT_FILTER_OPTION_ELEMENTEQUAL = 'ELEMENTEQUAL';
    const CONTACT_FILTER_OPTION_ELEMENTNOTEQUAL = 'ELEMENTNOTEQUAL';
    const CONTACT_FILTER_OPTION_BETWEEN = 'BETWEEN';
    const DATA_TYPE_STRING = 'STRING';
    const DATA_TYPE_NUMBER = 'NUMBER';
    const DATA_TYPE_DATE = 'DATE';
    const DATA_TYPE_BOOLEAN = 'BOOLEAN';
    const DATA_TYPE_POLYGON = 'POLYGON';
    const SEARCH_FIELD_DISPLAY_TYPE_SINGLE = 'SINGLE';
    const SEARCH_FIELD_DISPLAY_TYPE_MULTIPLE = 'MULTIPLE';
    const SEARCH_FIELD_DISPLAY_TYPE_TEXT = 'TEXT';
    const TYPE_SYSTEM = 'SYSTEM';
    const TYPE_CUSTOM = 'CUSTOM';
    const TYPE_SYSTEM_OBJECT = 'SYSTEM_OBJECT';
    const TYPE_SYSTEM_ARRAY = 'SYSTEM_ARRAY';
    const TYPE_CUSTOM_ARRAY = 'CUSTOM_ARRAY';
    const TYPE_SYSTEM_SCHEDULING = 'SYSTEM_SCHEDULING';
    const TYPE_SYSTEM_EXPECTED_OBJECT = 'SYSTEM_EXPECTED_OBJECT';
    const TYPE_SYSTEM_POLYGON_ARRAY = 'SYSTEM_POLYGON_ARRAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactFilterOptionAllowableValues()
    {
        return [
            self::CONTACT_FILTER_OPTION_ISNULL,
            self::CONTACT_FILTER_OPTION_ISNULLARRAY,
            self::CONTACT_FILTER_OPTION_NOTNULL,
            self::CONTACT_FILTER_OPTION_IN,
            self::CONTACT_FILTER_OPTION_NIN,
            self::CONTACT_FILTER_OPTION_GT,
            self::CONTACT_FILTER_OPTION_LT,
            self::CONTACT_FILTER_OPTION_GTE,
            self::CONTACT_FILTER_OPTION_LTE,
            self::CONTACT_FILTER_OPTION_NE,
            self::CONTACT_FILTER_OPTION_NENLC,
            self::CONTACT_FILTER_OPTION_E,
            self::CONTACT_FILTER_OPTION_ENLC,
            self::CONTACT_FILTER_OPTION_LIKE,
            self::CONTACT_FILTER_OPTION_LIKENLC,
            self::CONTACT_FILTER_OPTION_NLIKE,
            self::CONTACT_FILTER_OPTION_NLIKENLC,
            self::CONTACT_FILTER_OPTION_STARTWITH,
            self::CONTACT_FILTER_OPTION_STARTWITHNLC,
            self::CONTACT_FILTER_OPTION_ENDWITH,
            self::CONTACT_FILTER_OPTION_ENDWITHNLC,
            self::CONTACT_FILTER_OPTION_INPOLYGON,
            self::CONTACT_FILTER_OPTION_NINPOLYGON,
            self::CONTACT_FILTER_OPTION_OVERLAP,
            self::CONTACT_FILTER_OPTION_NONEOVERLAP,
            self::CONTACT_FILTER_OPTION_ELEMENTEQUAL,
            self::CONTACT_FILTER_OPTION_ELEMENTNOTEQUAL,
            self::CONTACT_FILTER_OPTION_BETWEEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataTypeAllowableValues()
    {
        return [
            self::DATA_TYPE_STRING,
            self::DATA_TYPE_NUMBER,
            self::DATA_TYPE_DATE,
            self::DATA_TYPE_BOOLEAN,
            self::DATA_TYPE_POLYGON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSearchFieldDisplayTypeAllowableValues()
    {
        return [
            self::SEARCH_FIELD_DISPLAY_TYPE_SINGLE,
            self::SEARCH_FIELD_DISPLAY_TYPE_MULTIPLE,
            self::SEARCH_FIELD_DISPLAY_TYPE_TEXT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SYSTEM,
            self::TYPE_CUSTOM,
            self::TYPE_SYSTEM_OBJECT,
            self::TYPE_SYSTEM_ARRAY,
            self::TYPE_CUSTOM_ARRAY,
            self::TYPE_SYSTEM_SCHEDULING,
            self::TYPE_SYSTEM_EXPECTED_OBJECT,
            self::TYPE_SYSTEM_POLYGON_ARRAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute_id'] = isset($data['attribute_id']) ? $data['attribute_id'] : null;
        $this->container['attribute_values'] = isset($data['attribute_values']) ? $data['attribute_values'] : null;
        $this->container['column_name'] = isset($data['column_name']) ? $data['column_name'] : null;
        $this->container['column_value'] = isset($data['column_value']) ? $data['column_value'] : null;
        $this->container['contact_field_id'] = isset($data['contact_field_id']) ? $data['contact_field_id'] : null;
        $this->container['contact_filter_id'] = isset($data['contact_filter_id']) ? $data['contact_filter_id'] : null;
        $this->container['contact_filter_option'] = isset($data['contact_filter_option']) ? $data['contact_filter_option'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['embedded_column_name'] = isset($data['embedded_column_name']) ? $data['embedded_column_name'] : null;
        $this->container['field_value'] = isset($data['field_value']) ? $data['field_value'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['search_field_display_type'] = isset($data['search_field_display_type']) ? $data['search_field_display_type'] : null;
        $this->container['seq'] = isset($data['seq']) ? $data['seq'] : null;
        $this->container['table_name'] = isset($data['table_name']) ? $data['table_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['value_category'] = isset($data['value_category']) ? $data['value_category'] : null;
        $this->container['variable_id'] = isset($data['variable_id']) ? $data['variable_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContactFilterOptionAllowableValues();
        if (!is_null($this->container['contact_filter_option']) && !in_array($this->container['contact_filter_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contact_filter_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataTypeAllowableValues();
        if (!is_null($this->container['data_type']) && !in_array($this->container['data_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'data_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSearchFieldDisplayTypeAllowableValues();
        if (!is_null($this->container['search_field_display_type']) && !in_array($this->container['search_field_display_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'search_field_display_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute_id
     *
     * @return int
     */
    public function getAttributeId()
    {
        return $this->container['attribute_id'];
    }

    /**
     * Sets attribute_id
     *
     * @param int $attribute_id attribute_id
     *
     * @return $this
     */
    public function setAttributeId($attribute_id)
    {
        $this->container['attribute_id'] = $attribute_id;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return object[]
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param object[] $attribute_values attribute_values
     *
     * @return $this
     */
    public function setAttributeValues($attribute_values)
    {
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets column_name
     *
     * @return string
     */
    public function getColumnName()
    {
        return $this->container['column_name'];
    }

    /**
     * Sets column_name
     *
     * @param string $column_name column_name
     *
     * @return $this
     */
    public function setColumnName($column_name)
    {
        $this->container['column_name'] = $column_name;

        return $this;
    }

    /**
     * Gets column_value
     *
     * @return object
     */
    public function getColumnValue()
    {
        return $this->container['column_value'];
    }

    /**
     * Sets column_value
     *
     * @param object $column_value column_value
     *
     * @return $this
     */
    public function setColumnValue($column_value)
    {
        $this->container['column_value'] = $column_value;

        return $this;
    }

    /**
     * Gets contact_field_id
     *
     * @return int
     */
    public function getContactFieldId()
    {
        return $this->container['contact_field_id'];
    }

    /**
     * Sets contact_field_id
     *
     * @param int $contact_field_id contact_field_id
     *
     * @return $this
     */
    public function setContactFieldId($contact_field_id)
    {
        $this->container['contact_field_id'] = $contact_field_id;

        return $this;
    }

    /**
     * Gets contact_filter_id
     *
     * @return int
     */
    public function getContactFilterId()
    {
        return $this->container['contact_filter_id'];
    }

    /**
     * Sets contact_filter_id
     *
     * @param int $contact_filter_id contact_filter_id
     *
     * @return $this
     */
    public function setContactFilterId($contact_filter_id)
    {
        $this->container['contact_filter_id'] = $contact_filter_id;

        return $this;
    }

    /**
     * Gets contact_filter_option
     *
     * @return string
     */
    public function getContactFilterOption()
    {
        return $this->container['contact_filter_option'];
    }

    /**
     * Sets contact_filter_option
     *
     * @param string $contact_filter_option contact_filter_option
     *
     * @return $this
     */
    public function setContactFilterOption($contact_filter_option)
    {
        $allowedValues = $this->getContactFilterOptionAllowableValues();
        if (!is_null($contact_filter_option) && !in_array($contact_filter_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contact_filter_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_filter_option'] = $contact_filter_option;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $allowedValues = $this->getDataTypeAllowableValues();
        if (!is_null($data_type) && !in_array($data_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets embedded_column_name
     *
     * @return string
     */
    public function getEmbeddedColumnName()
    {
        return $this->container['embedded_column_name'];
    }

    /**
     * Sets embedded_column_name
     *
     * @param string $embedded_column_name embedded_column_name
     *
     * @return $this
     */
    public function setEmbeddedColumnName($embedded_column_name)
    {
        $this->container['embedded_column_name'] = $embedded_column_name;

        return $this;
    }

    /**
     * Gets field_value
     *
     * @return object
     */
    public function getFieldValue()
    {
        return $this->container['field_value'];
    }

    /**
     * Sets field_value
     *
     * @param object $field_value field_value
     *
     * @return $this
     */
    public function setFieldValue($field_value)
    {
        $this->container['field_value'] = $field_value;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets search_field_display_type
     *
     * @return string
     */
    public function getSearchFieldDisplayType()
    {
        return $this->container['search_field_display_type'];
    }

    /**
     * Sets search_field_display_type
     *
     * @param string $search_field_display_type search_field_display_type
     *
     * @return $this
     */
    public function setSearchFieldDisplayType($search_field_display_type)
    {
        $allowedValues = $this->getSearchFieldDisplayTypeAllowableValues();
        if (!is_null($search_field_display_type) && !in_array($search_field_display_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'search_field_display_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['search_field_display_type'] = $search_field_display_type;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return int
     */
    public function getSeq()
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param int $seq seq
     *
     * @return $this
     */
    public function setSeq($seq)
    {
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets table_name
     *
     * @return string
     */
    public function getTableName()
    {
        return $this->container['table_name'];
    }

    /**
     * Sets table_name
     *
     * @param string $table_name table_name
     *
     * @return $this
     */
    public function setTableName($table_name)
    {
        $this->container['table_name'] = $table_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value_category
     *
     * @return int
     */
    public function getValueCategory()
    {
        return $this->container['value_category'];
    }

    /**
     * Sets value_category
     *
     * @param int $value_category value_category
     *
     * @return $this
     */
    public function setValueCategory($value_category)
    {
        $this->container['value_category'] = $value_category;

        return $this;
    }

    /**
     * Gets variable_id
     *
     * @return int
     */
    public function getVariableId()
    {
        return $this->container['variable_id'];
    }

    /**
     * Sets variable_id
     *
     * @param int $variable_id variable_id
     *
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        $this->container['variable_id'] = $variable_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


