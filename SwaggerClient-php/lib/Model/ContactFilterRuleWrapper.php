<?php
/**
 * ContactFilterRuleWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactFilterRuleWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactFilterRuleWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactFilterRuleWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attribute_id' => 'int',
        'attribute_values' => 'object[]',
        'column_name' => 'string',
        'column_value' => 'object',
        'contact_field_id' => 'int',
        'contact_filter_option' => 'string',
        'data_type' => 'string',
        'default_value' => 'object',
        'display_field_name' => 'string',
        'embedded_column_name' => 'string',
        'field_name' => 'string',
        'field_type' => 'string',
        'field_value' => 'object',
        'operator' => 'string',
        'show_type' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attribute_id' => 'int64',
        'attribute_values' => null,
        'column_name' => null,
        'column_value' => null,
        'contact_field_id' => 'int64',
        'contact_filter_option' => null,
        'data_type' => null,
        'default_value' => null,
        'display_field_name' => null,
        'embedded_column_name' => null,
        'field_name' => null,
        'field_type' => null,
        'field_value' => null,
        'operator' => null,
        'show_type' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_id' => 'attributeId',
        'attribute_values' => 'attributeValues',
        'column_name' => 'columnName',
        'column_value' => 'columnValue',
        'contact_field_id' => 'contactFieldId',
        'contact_filter_option' => 'contactFilterOption',
        'data_type' => 'dataType',
        'default_value' => 'defaultValue',
        'display_field_name' => 'displayFieldName',
        'embedded_column_name' => 'embeddedColumnName',
        'field_name' => 'fieldName',
        'field_type' => 'fieldType',
        'field_value' => 'fieldValue',
        'operator' => 'operator',
        'show_type' => 'showType',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_id' => 'setAttributeId',
        'attribute_values' => 'setAttributeValues',
        'column_name' => 'setColumnName',
        'column_value' => 'setColumnValue',
        'contact_field_id' => 'setContactFieldId',
        'contact_filter_option' => 'setContactFilterOption',
        'data_type' => 'setDataType',
        'default_value' => 'setDefaultValue',
        'display_field_name' => 'setDisplayFieldName',
        'embedded_column_name' => 'setEmbeddedColumnName',
        'field_name' => 'setFieldName',
        'field_type' => 'setFieldType',
        'field_value' => 'setFieldValue',
        'operator' => 'setOperator',
        'show_type' => 'setShowType',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_id' => 'getAttributeId',
        'attribute_values' => 'getAttributeValues',
        'column_name' => 'getColumnName',
        'column_value' => 'getColumnValue',
        'contact_field_id' => 'getContactFieldId',
        'contact_filter_option' => 'getContactFilterOption',
        'data_type' => 'getDataType',
        'default_value' => 'getDefaultValue',
        'display_field_name' => 'getDisplayFieldName',
        'embedded_column_name' => 'getEmbeddedColumnName',
        'field_name' => 'getFieldName',
        'field_type' => 'getFieldType',
        'field_value' => 'getFieldValue',
        'operator' => 'getOperator',
        'show_type' => 'getShowType',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTACT_FILTER_OPTION_ISNULL = 'ISNULL';
    const CONTACT_FILTER_OPTION_ISNULLARRAY = 'ISNULLARRAY';
    const CONTACT_FILTER_OPTION_NOTNULL = 'NOTNULL';
    const CONTACT_FILTER_OPTION_IN = 'IN';
    const CONTACT_FILTER_OPTION_NIN = 'NIN';
    const CONTACT_FILTER_OPTION_GT = 'GT';
    const CONTACT_FILTER_OPTION_LT = 'LT';
    const CONTACT_FILTER_OPTION_GTE = 'GTE';
    const CONTACT_FILTER_OPTION_LTE = 'LTE';
    const CONTACT_FILTER_OPTION_NE = 'NE';
    const CONTACT_FILTER_OPTION_NENLC = 'NENLC';
    const CONTACT_FILTER_OPTION_E = 'E';
    const CONTACT_FILTER_OPTION_ENLC = 'ENLC';
    const CONTACT_FILTER_OPTION_LIKE = 'LIKE';
    const CONTACT_FILTER_OPTION_LIKENLC = 'LIKENLC';
    const CONTACT_FILTER_OPTION_NLIKE = 'NLIKE';
    const CONTACT_FILTER_OPTION_NLIKENLC = 'NLIKENLC';
    const CONTACT_FILTER_OPTION_STARTWITH = 'STARTWITH';
    const CONTACT_FILTER_OPTION_STARTWITHNLC = 'STARTWITHNLC';
    const CONTACT_FILTER_OPTION_ENDWITH = 'ENDWITH';
    const CONTACT_FILTER_OPTION_ENDWITHNLC = 'ENDWITHNLC';
    const CONTACT_FILTER_OPTION_INPOLYGON = 'INPOLYGON';
    const CONTACT_FILTER_OPTION_NINPOLYGON = 'NINPOLYGON';
    const CONTACT_FILTER_OPTION_OVERLAP = 'OVERLAP';
    const CONTACT_FILTER_OPTION_NONEOVERLAP = 'NONEOVERLAP';
    const CONTACT_FILTER_OPTION_ELEMENTEQUAL = 'ELEMENTEQUAL';
    const CONTACT_FILTER_OPTION_ELEMENTNOTEQUAL = 'ELEMENTNOTEQUAL';
    const CONTACT_FILTER_OPTION_BETWEEN = 'BETWEEN';
    const DATA_TYPE_STRING = 'STRING';
    const DATA_TYPE_NUMBER = 'NUMBER';
    const DATA_TYPE_DATE = 'DATE';
    const DATA_TYPE_BOOLEAN = 'BOOLEAN';
    const DATA_TYPE_POLYGON = 'POLYGON';
    const FIELD_TYPE_DATE = 'DATE';
    const FIELD_TYPE_STRING = 'STRING';
    const FIELD_TYPE_INT = 'INT';
    const FIELD_TYPE_LONG = 'LONG';
    const FIELD_TYPE_BOOLEAN = 'BOOLEAN';
    const FIELD_TYPE__LIST = 'LIST';
    const FIELD_TYPE_NUMBER = 'NUMBER';
    const FIELD_TYPE__ARRAY = 'ARRAY';
    const SHOW_TYPE_SINGLE = 'SINGLE';
    const SHOW_TYPE_MULTIPLE = 'MULTIPLE';
    const SHOW_TYPE_TEXT = 'TEXT';
    const TYPE_SYSTEM = 'SYSTEM';
    const TYPE_CUSTOM = 'CUSTOM';
    const TYPE_SYSTEM_OBJECT = 'SYSTEM_OBJECT';
    const TYPE_SYSTEM_ARRAY = 'SYSTEM_ARRAY';
    const TYPE_CUSTOM_ARRAY = 'CUSTOM_ARRAY';
    const TYPE_SYSTEM_SCHEDULING = 'SYSTEM_SCHEDULING';
    const TYPE_SYSTEM_EXPECTED_OBJECT = 'SYSTEM_EXPECTED_OBJECT';
    const TYPE_SYSTEM_POLYGON_ARRAY = 'SYSTEM_POLYGON_ARRAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactFilterOptionAllowableValues()
    {
        return [
            self::CONTACT_FILTER_OPTION_ISNULL,
            self::CONTACT_FILTER_OPTION_ISNULLARRAY,
            self::CONTACT_FILTER_OPTION_NOTNULL,
            self::CONTACT_FILTER_OPTION_IN,
            self::CONTACT_FILTER_OPTION_NIN,
            self::CONTACT_FILTER_OPTION_GT,
            self::CONTACT_FILTER_OPTION_LT,
            self::CONTACT_FILTER_OPTION_GTE,
            self::CONTACT_FILTER_OPTION_LTE,
            self::CONTACT_FILTER_OPTION_NE,
            self::CONTACT_FILTER_OPTION_NENLC,
            self::CONTACT_FILTER_OPTION_E,
            self::CONTACT_FILTER_OPTION_ENLC,
            self::CONTACT_FILTER_OPTION_LIKE,
            self::CONTACT_FILTER_OPTION_LIKENLC,
            self::CONTACT_FILTER_OPTION_NLIKE,
            self::CONTACT_FILTER_OPTION_NLIKENLC,
            self::CONTACT_FILTER_OPTION_STARTWITH,
            self::CONTACT_FILTER_OPTION_STARTWITHNLC,
            self::CONTACT_FILTER_OPTION_ENDWITH,
            self::CONTACT_FILTER_OPTION_ENDWITHNLC,
            self::CONTACT_FILTER_OPTION_INPOLYGON,
            self::CONTACT_FILTER_OPTION_NINPOLYGON,
            self::CONTACT_FILTER_OPTION_OVERLAP,
            self::CONTACT_FILTER_OPTION_NONEOVERLAP,
            self::CONTACT_FILTER_OPTION_ELEMENTEQUAL,
            self::CONTACT_FILTER_OPTION_ELEMENTNOTEQUAL,
            self::CONTACT_FILTER_OPTION_BETWEEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataTypeAllowableValues()
    {
        return [
            self::DATA_TYPE_STRING,
            self::DATA_TYPE_NUMBER,
            self::DATA_TYPE_DATE,
            self::DATA_TYPE_BOOLEAN,
            self::DATA_TYPE_POLYGON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_DATE,
            self::FIELD_TYPE_STRING,
            self::FIELD_TYPE_INT,
            self::FIELD_TYPE_LONG,
            self::FIELD_TYPE_BOOLEAN,
            self::FIELD_TYPE__LIST,
            self::FIELD_TYPE_NUMBER,
            self::FIELD_TYPE__ARRAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShowTypeAllowableValues()
    {
        return [
            self::SHOW_TYPE_SINGLE,
            self::SHOW_TYPE_MULTIPLE,
            self::SHOW_TYPE_TEXT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SYSTEM,
            self::TYPE_CUSTOM,
            self::TYPE_SYSTEM_OBJECT,
            self::TYPE_SYSTEM_ARRAY,
            self::TYPE_CUSTOM_ARRAY,
            self::TYPE_SYSTEM_SCHEDULING,
            self::TYPE_SYSTEM_EXPECTED_OBJECT,
            self::TYPE_SYSTEM_POLYGON_ARRAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute_id'] = isset($data['attribute_id']) ? $data['attribute_id'] : null;
        $this->container['attribute_values'] = isset($data['attribute_values']) ? $data['attribute_values'] : null;
        $this->container['column_name'] = isset($data['column_name']) ? $data['column_name'] : null;
        $this->container['column_value'] = isset($data['column_value']) ? $data['column_value'] : null;
        $this->container['contact_field_id'] = isset($data['contact_field_id']) ? $data['contact_field_id'] : null;
        $this->container['contact_filter_option'] = isset($data['contact_filter_option']) ? $data['contact_filter_option'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['display_field_name'] = isset($data['display_field_name']) ? $data['display_field_name'] : null;
        $this->container['embedded_column_name'] = isset($data['embedded_column_name']) ? $data['embedded_column_name'] : null;
        $this->container['field_name'] = isset($data['field_name']) ? $data['field_name'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['field_value'] = isset($data['field_value']) ? $data['field_value'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['show_type'] = isset($data['show_type']) ? $data['show_type'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContactFilterOptionAllowableValues();
        if (!is_null($this->container['contact_filter_option']) && !in_array($this->container['contact_filter_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contact_filter_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataTypeAllowableValues();
        if (!is_null($this->container['data_type']) && !in_array($this->container['data_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'data_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($this->container['field_type']) && !in_array($this->container['field_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'field_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShowTypeAllowableValues();
        if (!is_null($this->container['show_type']) && !in_array($this->container['show_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'show_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute_id
     *
     * @return int
     */
    public function getAttributeId()
    {
        return $this->container['attribute_id'];
    }

    /**
     * Sets attribute_id
     *
     * @param int $attribute_id attribute_id
     *
     * @return $this
     */
    public function setAttributeId($attribute_id)
    {
        $this->container['attribute_id'] = $attribute_id;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return object[]
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param object[] $attribute_values attribute_values
     *
     * @return $this
     */
    public function setAttributeValues($attribute_values)
    {
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets column_name
     *
     * @return string
     */
    public function getColumnName()
    {
        return $this->container['column_name'];
    }

    /**
     * Sets column_name
     *
     * @param string $column_name column_name
     *
     * @return $this
     */
    public function setColumnName($column_name)
    {
        $this->container['column_name'] = $column_name;

        return $this;
    }

    /**
     * Gets column_value
     *
     * @return object
     */
    public function getColumnValue()
    {
        return $this->container['column_value'];
    }

    /**
     * Sets column_value
     *
     * @param object $column_value column_value
     *
     * @return $this
     */
    public function setColumnValue($column_value)
    {
        $this->container['column_value'] = $column_value;

        return $this;
    }

    /**
     * Gets contact_field_id
     *
     * @return int
     */
    public function getContactFieldId()
    {
        return $this->container['contact_field_id'];
    }

    /**
     * Sets contact_field_id
     *
     * @param int $contact_field_id contact_field_id
     *
     * @return $this
     */
    public function setContactFieldId($contact_field_id)
    {
        $this->container['contact_field_id'] = $contact_field_id;

        return $this;
    }

    /**
     * Gets contact_filter_option
     *
     * @return string
     */
    public function getContactFilterOption()
    {
        return $this->container['contact_filter_option'];
    }

    /**
     * Sets contact_filter_option
     *
     * @param string $contact_filter_option contact_filter_option
     *
     * @return $this
     */
    public function setContactFilterOption($contact_filter_option)
    {
        $allowedValues = $this->getContactFilterOptionAllowableValues();
        if (!is_null($contact_filter_option) && !in_array($contact_filter_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contact_filter_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_filter_option'] = $contact_filter_option;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $allowedValues = $this->getDataTypeAllowableValues();
        if (!is_null($data_type) && !in_array($data_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return object
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param object $default_value default_value
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets display_field_name
     *
     * @return string
     */
    public function getDisplayFieldName()
    {
        return $this->container['display_field_name'];
    }

    /**
     * Sets display_field_name
     *
     * @param string $display_field_name display_field_name
     *
     * @return $this
     */
    public function setDisplayFieldName($display_field_name)
    {
        $this->container['display_field_name'] = $display_field_name;

        return $this;
    }

    /**
     * Gets embedded_column_name
     *
     * @return string
     */
    public function getEmbeddedColumnName()
    {
        return $this->container['embedded_column_name'];
    }

    /**
     * Sets embedded_column_name
     *
     * @param string $embedded_column_name embedded_column_name
     *
     * @return $this
     */
    public function setEmbeddedColumnName($embedded_column_name)
    {
        $this->container['embedded_column_name'] = $embedded_column_name;

        return $this;
    }

    /**
     * Gets field_name
     *
     * @return string
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string $field_name field_name
     *
     * @return $this
     */
    public function setFieldName($field_name)
    {
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string $field_type field_type
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($field_type) && !in_array($field_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'field_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets field_value
     *
     * @return object
     */
    public function getFieldValue()
    {
        return $this->container['field_value'];
    }

    /**
     * Sets field_value
     *
     * @param object $field_value field_value
     *
     * @return $this
     */
    public function setFieldValue($field_value)
    {
        $this->container['field_value'] = $field_value;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets show_type
     *
     * @return string
     */
    public function getShowType()
    {
        return $this->container['show_type'];
    }

    /**
     * Sets show_type
     *
     * @param string $show_type show_type
     *
     * @return $this
     */
    public function setShowType($show_type)
    {
        $allowedValues = $this->getShowTypeAllowableValues();
        if (!is_null($show_type) && !in_array($show_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'show_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['show_type'] = $show_type;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


