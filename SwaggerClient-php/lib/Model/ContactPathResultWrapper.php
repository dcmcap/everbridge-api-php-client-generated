<?php
/**
 * ContactPathResultWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactPathResultWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactPathResultWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactPathResultWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attempt_id' => 'string',
        'attempt_order' => 'int',
        'attempt_time' => '\DateTime',
        'call_result' => 'string',
        'confirmed' => 'bool',
        'country_code' => 'string',
        'cycle_seq' => 'int',
        'first_name' => 'string',
        'journal_id' => 'int',
        'last_name' => 'string',
        'path' => 'string',
        'path_text' => 'string',
        'phone_ext' => 'string',
        'status' => 'string',
        'system_requirement' => 'string',
        'wait_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attempt_id' => null,
        'attempt_order' => 'int32',
        'attempt_time' => 'date-time',
        'call_result' => null,
        'confirmed' => null,
        'country_code' => null,
        'cycle_seq' => 'int32',
        'first_name' => null,
        'journal_id' => 'int64',
        'last_name' => null,
        'path' => null,
        'path_text' => null,
        'phone_ext' => null,
        'status' => null,
        'system_requirement' => null,
        'wait_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attempt_id' => 'attemptId',
        'attempt_order' => 'attemptOrder',
        'attempt_time' => 'attemptTime',
        'call_result' => 'callResult',
        'confirmed' => 'confirmed',
        'country_code' => 'countryCode',
        'cycle_seq' => 'cycleSeq',
        'first_name' => 'firstName',
        'journal_id' => 'journalId',
        'last_name' => 'lastName',
        'path' => 'path',
        'path_text' => 'pathText',
        'phone_ext' => 'phoneExt',
        'status' => 'status',
        'system_requirement' => 'systemRequirement',
        'wait_time' => 'waitTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attempt_id' => 'setAttemptId',
        'attempt_order' => 'setAttemptOrder',
        'attempt_time' => 'setAttemptTime',
        'call_result' => 'setCallResult',
        'confirmed' => 'setConfirmed',
        'country_code' => 'setCountryCode',
        'cycle_seq' => 'setCycleSeq',
        'first_name' => 'setFirstName',
        'journal_id' => 'setJournalId',
        'last_name' => 'setLastName',
        'path' => 'setPath',
        'path_text' => 'setPathText',
        'phone_ext' => 'setPhoneExt',
        'status' => 'setStatus',
        'system_requirement' => 'setSystemRequirement',
        'wait_time' => 'setWaitTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attempt_id' => 'getAttemptId',
        'attempt_order' => 'getAttemptOrder',
        'attempt_time' => 'getAttemptTime',
        'call_result' => 'getCallResult',
        'confirmed' => 'getConfirmed',
        'country_code' => 'getCountryCode',
        'cycle_seq' => 'getCycleSeq',
        'first_name' => 'getFirstName',
        'journal_id' => 'getJournalId',
        'last_name' => 'getLastName',
        'path' => 'getPath',
        'path_text' => 'getPathText',
        'phone_ext' => 'getPhoneExt',
        'status' => 'getStatus',
        'system_requirement' => 'getSystemRequirement',
        'wait_time' => 'getWaitTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_A = 'A';
    const STATUS_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attempt_id'] = isset($data['attempt_id']) ? $data['attempt_id'] : null;
        $this->container['attempt_order'] = isset($data['attempt_order']) ? $data['attempt_order'] : null;
        $this->container['attempt_time'] = isset($data['attempt_time']) ? $data['attempt_time'] : null;
        $this->container['call_result'] = isset($data['call_result']) ? $data['call_result'] : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['cycle_seq'] = isset($data['cycle_seq']) ? $data['cycle_seq'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['journal_id'] = isset($data['journal_id']) ? $data['journal_id'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['path_text'] = isset($data['path_text']) ? $data['path_text'] : null;
        $this->container['phone_ext'] = isset($data['phone_ext']) ? $data['phone_ext'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['system_requirement'] = isset($data['system_requirement']) ? $data['system_requirement'] : null;
        $this->container['wait_time'] = isset($data['wait_time']) ? $data['wait_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attempt_id
     *
     * @return string
     */
    public function getAttemptId()
    {
        return $this->container['attempt_id'];
    }

    /**
     * Sets attempt_id
     *
     * @param string $attempt_id attempt_id
     *
     * @return $this
     */
    public function setAttemptId($attempt_id)
    {
        $this->container['attempt_id'] = $attempt_id;

        return $this;
    }

    /**
     * Gets attempt_order
     *
     * @return int
     */
    public function getAttemptOrder()
    {
        return $this->container['attempt_order'];
    }

    /**
     * Sets attempt_order
     *
     * @param int $attempt_order attempt_order
     *
     * @return $this
     */
    public function setAttemptOrder($attempt_order)
    {
        $this->container['attempt_order'] = $attempt_order;

        return $this;
    }

    /**
     * Gets attempt_time
     *
     * @return \DateTime
     */
    public function getAttemptTime()
    {
        return $this->container['attempt_time'];
    }

    /**
     * Sets attempt_time
     *
     * @param \DateTime $attempt_time attempt_time
     *
     * @return $this
     */
    public function setAttemptTime($attempt_time)
    {
        $this->container['attempt_time'] = $attempt_time;

        return $this;
    }

    /**
     * Gets call_result
     *
     * @return string
     */
    public function getCallResult()
    {
        return $this->container['call_result'];
    }

    /**
     * Sets call_result
     *
     * @param string $call_result call_result
     *
     * @return $this
     */
    public function setCallResult($call_result)
    {
        $this->container['call_result'] = $call_result;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool $confirmed confirmed
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets cycle_seq
     *
     * @return int
     */
    public function getCycleSeq()
    {
        return $this->container['cycle_seq'];
    }

    /**
     * Sets cycle_seq
     *
     * @param int $cycle_seq cycle_seq
     *
     * @return $this
     */
    public function setCycleSeq($cycle_seq)
    {
        $this->container['cycle_seq'] = $cycle_seq;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets journal_id
     *
     * @return int
     */
    public function getJournalId()
    {
        return $this->container['journal_id'];
    }

    /**
     * Sets journal_id
     *
     * @param int $journal_id journal_id
     *
     * @return $this
     */
    public function setJournalId($journal_id)
    {
        $this->container['journal_id'] = $journal_id;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets path_text
     *
     * @return string
     */
    public function getPathText()
    {
        return $this->container['path_text'];
    }

    /**
     * Sets path_text
     *
     * @param string $path_text path_text
     *
     * @return $this
     */
    public function setPathText($path_text)
    {
        $this->container['path_text'] = $path_text;

        return $this;
    }

    /**
     * Gets phone_ext
     *
     * @return string
     */
    public function getPhoneExt()
    {
        return $this->container['phone_ext'];
    }

    /**
     * Sets phone_ext
     *
     * @param string $phone_ext phone_ext
     *
     * @return $this
     */
    public function setPhoneExt($phone_ext)
    {
        $this->container['phone_ext'] = $phone_ext;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets system_requirement
     *
     * @return string
     */
    public function getSystemRequirement()
    {
        return $this->container['system_requirement'];
    }

    /**
     * Sets system_requirement
     *
     * @param string $system_requirement system_requirement
     *
     * @return $this
     */
    public function setSystemRequirement($system_requirement)
    {
        $this->container['system_requirement'] = $system_requirement;

        return $this;
    }

    /**
     * Gets wait_time
     *
     * @return int
     */
    public function getWaitTime()
    {
        return $this->container['wait_time'];
    }

    /**
     * Sets wait_time
     *
     * @param int $wait_time wait_time
     *
     * @return $this
     */
    public function setWaitTime($wait_time)
    {
        $this->container['wait_time'] = $wait_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


