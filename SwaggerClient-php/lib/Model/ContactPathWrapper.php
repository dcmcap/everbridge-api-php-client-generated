<?php
/**
 * ContactPathWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactPathWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactPathWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactPathWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country_code' => 'string',
        'path_enable' => 'bool',
        'path_id' => 'int',
        'phone_ext' => 'string',
        'quiet_time_frames' => '\Swagger\Client\Model\TimeFrameWrapper[]',
        'skip_validation' => 'bool',
        'status' => 'string',
        'system_requirement' => 'string',
        'value' => 'string',
        'wait_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country_code' => null,
        'path_enable' => null,
        'path_id' => 'int64',
        'phone_ext' => null,
        'quiet_time_frames' => null,
        'skip_validation' => null,
        'status' => null,
        'system_requirement' => null,
        'value' => null,
        'wait_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_code' => 'countryCode',
        'path_enable' => 'pathEnable',
        'path_id' => 'pathId',
        'phone_ext' => 'phoneExt',
        'quiet_time_frames' => 'quietTimeFrames',
        'skip_validation' => 'skipValidation',
        'status' => 'status',
        'system_requirement' => 'systemRequirement',
        'value' => 'value',
        'wait_time' => 'waitTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_code' => 'setCountryCode',
        'path_enable' => 'setPathEnable',
        'path_id' => 'setPathId',
        'phone_ext' => 'setPhoneExt',
        'quiet_time_frames' => 'setQuietTimeFrames',
        'skip_validation' => 'setSkipValidation',
        'status' => 'setStatus',
        'system_requirement' => 'setSystemRequirement',
        'value' => 'setValue',
        'wait_time' => 'setWaitTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_code' => 'getCountryCode',
        'path_enable' => 'getPathEnable',
        'path_id' => 'getPathId',
        'phone_ext' => 'getPhoneExt',
        'quiet_time_frames' => 'getQuietTimeFrames',
        'skip_validation' => 'getSkipValidation',
        'status' => 'getStatus',
        'system_requirement' => 'getSystemRequirement',
        'value' => 'getValue',
        'wait_time' => 'getWaitTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_A = 'A';
    const STATUS_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['path_enable'] = isset($data['path_enable']) ? $data['path_enable'] : null;
        $this->container['path_id'] = isset($data['path_id']) ? $data['path_id'] : null;
        $this->container['phone_ext'] = isset($data['phone_ext']) ? $data['phone_ext'] : null;
        $this->container['quiet_time_frames'] = isset($data['quiet_time_frames']) ? $data['quiet_time_frames'] : null;
        $this->container['skip_validation'] = isset($data['skip_validation']) ? $data['skip_validation'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['system_requirement'] = isset($data['system_requirement']) ? $data['system_requirement'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['wait_time'] = isset($data['wait_time']) ? $data['wait_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets path_enable
     *
     * @return bool
     */
    public function getPathEnable()
    {
        return $this->container['path_enable'];
    }

    /**
     * Sets path_enable
     *
     * @param bool $path_enable path_enable
     *
     * @return $this
     */
    public function setPathEnable($path_enable)
    {
        $this->container['path_enable'] = $path_enable;

        return $this;
    }

    /**
     * Gets path_id
     *
     * @return int
     */
    public function getPathId()
    {
        return $this->container['path_id'];
    }

    /**
     * Sets path_id
     *
     * @param int $path_id path_id
     *
     * @return $this
     */
    public function setPathId($path_id)
    {
        $this->container['path_id'] = $path_id;

        return $this;
    }

    /**
     * Gets phone_ext
     *
     * @return string
     */
    public function getPhoneExt()
    {
        return $this->container['phone_ext'];
    }

    /**
     * Sets phone_ext
     *
     * @param string $phone_ext phone_ext
     *
     * @return $this
     */
    public function setPhoneExt($phone_ext)
    {
        $this->container['phone_ext'] = $phone_ext;

        return $this;
    }

    /**
     * Gets quiet_time_frames
     *
     * @return \Swagger\Client\Model\TimeFrameWrapper[]
     */
    public function getQuietTimeFrames()
    {
        return $this->container['quiet_time_frames'];
    }

    /**
     * Sets quiet_time_frames
     *
     * @param \Swagger\Client\Model\TimeFrameWrapper[] $quiet_time_frames quiet_time_frames
     *
     * @return $this
     */
    public function setQuietTimeFrames($quiet_time_frames)
    {
        $this->container['quiet_time_frames'] = $quiet_time_frames;

        return $this;
    }

    /**
     * Gets skip_validation
     *
     * @return bool
     */
    public function getSkipValidation()
    {
        return $this->container['skip_validation'];
    }

    /**
     * Sets skip_validation
     *
     * @param bool $skip_validation skip_validation
     *
     * @return $this
     */
    public function setSkipValidation($skip_validation)
    {
        $this->container['skip_validation'] = $skip_validation;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets system_requirement
     *
     * @return string
     */
    public function getSystemRequirement()
    {
        return $this->container['system_requirement'];
    }

    /**
     * Sets system_requirement
     *
     * @param string $system_requirement system_requirement
     *
     * @return $this
     */
    public function setSystemRequirement($system_requirement)
    {
        $this->container['system_requirement'] = $system_requirement;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets wait_time
     *
     * @return int
     */
    public function getWaitTime()
    {
        return $this->container['wait_time'];
    }

    /**
     * Sets wait_time
     *
     * @param int $wait_time wait_time
     *
     * @return $this
     */
    public function setWaitTime($wait_time)
    {
        $this->container['wait_time'] = $wait_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


