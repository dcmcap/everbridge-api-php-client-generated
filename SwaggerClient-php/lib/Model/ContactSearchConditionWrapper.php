<?php
/**
 * ContactSearchConditionWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactSearchConditionWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactSearchConditionWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactSearchConditionWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contact_filter_rules' => '\Swagger\Client\Model\ContactFilterRuleWrapper[]',
        'contact_search_expression' => 'string',
        'expected_date' => 'object[]',
        'expected_date_contact_ids' => 'int[]',
        'filter_ids' => 'int[]',
        'filters' => '\Swagger\Client\Model\ContactFilterRuleWrapper[][]',
        'group_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contact_filter_rules' => null,
        'contact_search_expression' => null,
        'expected_date' => null,
        'expected_date_contact_ids' => 'int64',
        'filter_ids' => 'int64',
        'filters' => null,
        'group_ids' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_filter_rules' => 'contactFilterRules',
        'contact_search_expression' => 'contactSearchExpression',
        'expected_date' => 'expectedDate',
        'expected_date_contact_ids' => 'expectedDateContactIds',
        'filter_ids' => 'filterIds',
        'filters' => 'filters',
        'group_ids' => 'groupIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_filter_rules' => 'setContactFilterRules',
        'contact_search_expression' => 'setContactSearchExpression',
        'expected_date' => 'setExpectedDate',
        'expected_date_contact_ids' => 'setExpectedDateContactIds',
        'filter_ids' => 'setFilterIds',
        'filters' => 'setFilters',
        'group_ids' => 'setGroupIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_filter_rules' => 'getContactFilterRules',
        'contact_search_expression' => 'getContactSearchExpression',
        'expected_date' => 'getExpectedDate',
        'expected_date_contact_ids' => 'getExpectedDateContactIds',
        'filter_ids' => 'getFilterIds',
        'filters' => 'getFilters',
        'group_ids' => 'getGroupIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTACT_SEARCH_EXPRESSION_ALL_OR = 'AllOr';
    const CONTACT_SEARCH_EXPRESSION_ALL_AND = 'AllAnd';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactSearchExpressionAllowableValues()
    {
        return [
            self::CONTACT_SEARCH_EXPRESSION_ALL_OR,
            self::CONTACT_SEARCH_EXPRESSION_ALL_AND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_filter_rules'] = isset($data['contact_filter_rules']) ? $data['contact_filter_rules'] : null;
        $this->container['contact_search_expression'] = isset($data['contact_search_expression']) ? $data['contact_search_expression'] : null;
        $this->container['expected_date'] = isset($data['expected_date']) ? $data['expected_date'] : null;
        $this->container['expected_date_contact_ids'] = isset($data['expected_date_contact_ids']) ? $data['expected_date_contact_ids'] : null;
        $this->container['filter_ids'] = isset($data['filter_ids']) ? $data['filter_ids'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContactSearchExpressionAllowableValues();
        if (!is_null($this->container['contact_search_expression']) && !in_array($this->container['contact_search_expression'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contact_search_expression', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_filter_rules
     *
     * @return \Swagger\Client\Model\ContactFilterRuleWrapper[]
     */
    public function getContactFilterRules()
    {
        return $this->container['contact_filter_rules'];
    }

    /**
     * Sets contact_filter_rules
     *
     * @param \Swagger\Client\Model\ContactFilterRuleWrapper[] $contact_filter_rules contact_filter_rules
     *
     * @return $this
     */
    public function setContactFilterRules($contact_filter_rules)
    {
        $this->container['contact_filter_rules'] = $contact_filter_rules;

        return $this;
    }

    /**
     * Gets contact_search_expression
     *
     * @return string
     */
    public function getContactSearchExpression()
    {
        return $this->container['contact_search_expression'];
    }

    /**
     * Sets contact_search_expression
     *
     * @param string $contact_search_expression contact_search_expression
     *
     * @return $this
     */
    public function setContactSearchExpression($contact_search_expression)
    {
        $allowedValues = $this->getContactSearchExpressionAllowableValues();
        if (!is_null($contact_search_expression) && !in_array($contact_search_expression, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contact_search_expression', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_search_expression'] = $contact_search_expression;

        return $this;
    }

    /**
     * Gets expected_date
     *
     * @return object[]
     */
    public function getExpectedDate()
    {
        return $this->container['expected_date'];
    }

    /**
     * Sets expected_date
     *
     * @param object[] $expected_date expected_date
     *
     * @return $this
     */
    public function setExpectedDate($expected_date)
    {
        $this->container['expected_date'] = $expected_date;

        return $this;
    }

    /**
     * Gets expected_date_contact_ids
     *
     * @return int[]
     */
    public function getExpectedDateContactIds()
    {
        return $this->container['expected_date_contact_ids'];
    }

    /**
     * Sets expected_date_contact_ids
     *
     * @param int[] $expected_date_contact_ids expected_date_contact_ids
     *
     * @return $this
     */
    public function setExpectedDateContactIds($expected_date_contact_ids)
    {
        $this->container['expected_date_contact_ids'] = $expected_date_contact_ids;

        return $this;
    }

    /**
     * Gets filter_ids
     *
     * @return int[]
     */
    public function getFilterIds()
    {
        return $this->container['filter_ids'];
    }

    /**
     * Sets filter_ids
     *
     * @param int[] $filter_ids filter_ids
     *
     * @return $this
     */
    public function setFilterIds($filter_ids)
    {
        $this->container['filter_ids'] = $filter_ids;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Swagger\Client\Model\ContactFilterRuleWrapper[][]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Swagger\Client\Model\ContactFilterRuleWrapper[][] $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return int[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param int[] $group_ids group_ids
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


