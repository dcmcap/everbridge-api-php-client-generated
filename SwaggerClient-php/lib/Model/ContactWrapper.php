<?php
/**
 * ContactWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'address' => '\Swagger\Client\Model\ContactAddressWrapper[]',
        'business_name' => 'string',
        'contact_attributes' => '\Swagger\Client\Model\ContactAttributeWrapper[]',
        'country' => 'string',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'created_proxy_name' => 'string',
        'external_id' => 'string',
        'first_name' => 'string',
        'groups' => 'int[]',
        'id' => 'int',
        'individual_account_id' => 'int',
        'invited_date' => '\DateTime',
        'language' => 'string',
        'last_modified_date' => '\DateTime',
        'last_modified_id' => 'int',
        'last_modified_name' => 'string',
        'last_modified_proxy_name' => 'string',
        'last_modified_time' => 'int',
        'last_name' => 'string',
        'middle_initial' => 'string',
        'organization_id' => 'int',
        'paths' => '\Swagger\Client\Model\ContactPathWrapper[]',
        'record_type_id' => 'int',
        'registed_date' => '\DateTime',
        'registed_email' => 'string',
        'registered_date' => '\DateTime',
        'registered_email' => 'string',
        'resource_bundle_id' => 'int',
        'security_pin' => 'string',
        'seq' => 'int',
        'sso_user_id' => 'string',
        'status' => 'string',
        'suffix' => 'string',
        'timezone_id' => 'string',
        'topics' => 'int[]',
        'upload_processing' => 'bool',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'address' => null,
        'business_name' => null,
        'contact_attributes' => null,
        'country' => null,
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'created_proxy_name' => null,
        'external_id' => null,
        'first_name' => null,
        'groups' => 'int64',
        'id' => 'int64',
        'individual_account_id' => 'int64',
        'invited_date' => 'date-time',
        'language' => null,
        'last_modified_date' => 'date-time',
        'last_modified_id' => 'int64',
        'last_modified_name' => null,
        'last_modified_proxy_name' => null,
        'last_modified_time' => 'int64',
        'last_name' => null,
        'middle_initial' => null,
        'organization_id' => 'int64',
        'paths' => null,
        'record_type_id' => 'int64',
        'registed_date' => 'date-time',
        'registed_email' => null,
        'registered_date' => 'date-time',
        'registered_email' => null,
        'resource_bundle_id' => 'int64',
        'security_pin' => null,
        'seq' => 'int64',
        'sso_user_id' => null,
        'status' => null,
        'suffix' => null,
        'timezone_id' => null,
        'topics' => 'int64',
        'upload_processing' => null,
        'user_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'address' => 'address',
        'business_name' => 'businessName',
        'contact_attributes' => 'contactAttributes',
        'country' => 'country',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'created_proxy_name' => 'createdProxyName',
        'external_id' => 'externalId',
        'first_name' => 'firstName',
        'groups' => 'groups',
        'id' => 'id',
        'individual_account_id' => 'individualAccountId',
        'invited_date' => 'invitedDate',
        'language' => 'language',
        'last_modified_date' => 'lastModifiedDate',
        'last_modified_id' => 'lastModifiedId',
        'last_modified_name' => 'lastModifiedName',
        'last_modified_proxy_name' => 'lastModifiedProxyName',
        'last_modified_time' => 'lastModifiedTime',
        'last_name' => 'lastName',
        'middle_initial' => 'middleInitial',
        'organization_id' => 'organizationId',
        'paths' => 'paths',
        'record_type_id' => 'recordTypeId',
        'registed_date' => 'registedDate',
        'registed_email' => 'registedEmail',
        'registered_date' => 'registeredDate',
        'registered_email' => 'registeredEmail',
        'resource_bundle_id' => 'resourceBundleId',
        'security_pin' => 'securityPIN',
        'seq' => 'seq',
        'sso_user_id' => 'ssoUserId',
        'status' => 'status',
        'suffix' => 'suffix',
        'timezone_id' => 'timezoneId',
        'topics' => 'topics',
        'upload_processing' => 'uploadProcessing',
        'user_id' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'address' => 'setAddress',
        'business_name' => 'setBusinessName',
        'contact_attributes' => 'setContactAttributes',
        'country' => 'setCountry',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'created_proxy_name' => 'setCreatedProxyName',
        'external_id' => 'setExternalId',
        'first_name' => 'setFirstName',
        'groups' => 'setGroups',
        'id' => 'setId',
        'individual_account_id' => 'setIndividualAccountId',
        'invited_date' => 'setInvitedDate',
        'language' => 'setLanguage',
        'last_modified_date' => 'setLastModifiedDate',
        'last_modified_id' => 'setLastModifiedId',
        'last_modified_name' => 'setLastModifiedName',
        'last_modified_proxy_name' => 'setLastModifiedProxyName',
        'last_modified_time' => 'setLastModifiedTime',
        'last_name' => 'setLastName',
        'middle_initial' => 'setMiddleInitial',
        'organization_id' => 'setOrganizationId',
        'paths' => 'setPaths',
        'record_type_id' => 'setRecordTypeId',
        'registed_date' => 'setRegistedDate',
        'registed_email' => 'setRegistedEmail',
        'registered_date' => 'setRegisteredDate',
        'registered_email' => 'setRegisteredEmail',
        'resource_bundle_id' => 'setResourceBundleId',
        'security_pin' => 'setSecurityPin',
        'seq' => 'setSeq',
        'sso_user_id' => 'setSsoUserId',
        'status' => 'setStatus',
        'suffix' => 'setSuffix',
        'timezone_id' => 'setTimezoneId',
        'topics' => 'setTopics',
        'upload_processing' => 'setUploadProcessing',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'address' => 'getAddress',
        'business_name' => 'getBusinessName',
        'contact_attributes' => 'getContactAttributes',
        'country' => 'getCountry',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'created_proxy_name' => 'getCreatedProxyName',
        'external_id' => 'getExternalId',
        'first_name' => 'getFirstName',
        'groups' => 'getGroups',
        'id' => 'getId',
        'individual_account_id' => 'getIndividualAccountId',
        'invited_date' => 'getInvitedDate',
        'language' => 'getLanguage',
        'last_modified_date' => 'getLastModifiedDate',
        'last_modified_id' => 'getLastModifiedId',
        'last_modified_name' => 'getLastModifiedName',
        'last_modified_proxy_name' => 'getLastModifiedProxyName',
        'last_modified_time' => 'getLastModifiedTime',
        'last_name' => 'getLastName',
        'middle_initial' => 'getMiddleInitial',
        'organization_id' => 'getOrganizationId',
        'paths' => 'getPaths',
        'record_type_id' => 'getRecordTypeId',
        'registed_date' => 'getRegistedDate',
        'registed_email' => 'getRegistedEmail',
        'registered_date' => 'getRegisteredDate',
        'registered_email' => 'getRegisteredEmail',
        'resource_bundle_id' => 'getResourceBundleId',
        'security_pin' => 'getSecurityPin',
        'seq' => 'getSeq',
        'sso_user_id' => 'getSsoUserId',
        'status' => 'getStatus',
        'suffix' => 'getSuffix',
        'timezone_id' => 'getTimezoneId',
        'topics' => 'getTopics',
        'upload_processing' => 'getUploadProcessing',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_A = 'A';
    const STATUS_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['contact_attributes'] = isset($data['contact_attributes']) ? $data['contact_attributes'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['created_proxy_name'] = isset($data['created_proxy_name']) ? $data['created_proxy_name'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['individual_account_id'] = isset($data['individual_account_id']) ? $data['individual_account_id'] : null;
        $this->container['invited_date'] = isset($data['invited_date']) ? $data['invited_date'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_modified_id'] = isset($data['last_modified_id']) ? $data['last_modified_id'] : null;
        $this->container['last_modified_name'] = isset($data['last_modified_name']) ? $data['last_modified_name'] : null;
        $this->container['last_modified_proxy_name'] = isset($data['last_modified_proxy_name']) ? $data['last_modified_proxy_name'] : null;
        $this->container['last_modified_time'] = isset($data['last_modified_time']) ? $data['last_modified_time'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_initial'] = isset($data['middle_initial']) ? $data['middle_initial'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['paths'] = isset($data['paths']) ? $data['paths'] : null;
        $this->container['record_type_id'] = isset($data['record_type_id']) ? $data['record_type_id'] : null;
        $this->container['registed_date'] = isset($data['registed_date']) ? $data['registed_date'] : null;
        $this->container['registed_email'] = isset($data['registed_email']) ? $data['registed_email'] : null;
        $this->container['registered_date'] = isset($data['registered_date']) ? $data['registered_date'] : null;
        $this->container['registered_email'] = isset($data['registered_email']) ? $data['registered_email'] : null;
        $this->container['resource_bundle_id'] = isset($data['resource_bundle_id']) ? $data['resource_bundle_id'] : null;
        $this->container['security_pin'] = isset($data['security_pin']) ? $data['security_pin'] : null;
        $this->container['seq'] = isset($data['seq']) ? $data['seq'] : null;
        $this->container['sso_user_id'] = isset($data['sso_user_id']) ? $data['sso_user_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['suffix'] = isset($data['suffix']) ? $data['suffix'] : null;
        $this->container['timezone_id'] = isset($data['timezone_id']) ? $data['timezone_id'] : null;
        $this->container['topics'] = isset($data['topics']) ? $data['topics'] : null;
        $this->container['upload_processing'] = isset($data['upload_processing']) ? $data['upload_processing'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ContactAddressWrapper[]
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ContactAddressWrapper[] $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name business_name
     *
     * @return $this
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets contact_attributes
     *
     * @return \Swagger\Client\Model\ContactAttributeWrapper[]
     */
    public function getContactAttributes()
    {
        return $this->container['contact_attributes'];
    }

    /**
     * Sets contact_attributes
     *
     * @param \Swagger\Client\Model\ContactAttributeWrapper[] $contact_attributes contact_attributes
     *
     * @return $this
     */
    public function setContactAttributes($contact_attributes)
    {
        $this->container['contact_attributes'] = $contact_attributes;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets created_proxy_name
     *
     * @return string
     */
    public function getCreatedProxyName()
    {
        return $this->container['created_proxy_name'];
    }

    /**
     * Sets created_proxy_name
     *
     * @param string $created_proxy_name created_proxy_name
     *
     * @return $this
     */
    public function setCreatedProxyName($created_proxy_name)
    {
        $this->container['created_proxy_name'] = $created_proxy_name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return int[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param int[] $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets individual_account_id
     *
     * @return int
     */
    public function getIndividualAccountId()
    {
        return $this->container['individual_account_id'];
    }

    /**
     * Sets individual_account_id
     *
     * @param int $individual_account_id individual_account_id
     *
     * @return $this
     */
    public function setIndividualAccountId($individual_account_id)
    {
        $this->container['individual_account_id'] = $individual_account_id;

        return $this;
    }

    /**
     * Gets invited_date
     *
     * @return \DateTime
     */
    public function getInvitedDate()
    {
        return $this->container['invited_date'];
    }

    /**
     * Sets invited_date
     *
     * @param \DateTime $invited_date invited_date
     *
     * @return $this
     */
    public function setInvitedDate($invited_date)
    {
        $this->container['invited_date'] = $invited_date;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_modified_id
     *
     * @return int
     */
    public function getLastModifiedId()
    {
        return $this->container['last_modified_id'];
    }

    /**
     * Sets last_modified_id
     *
     * @param int $last_modified_id last_modified_id
     *
     * @return $this
     */
    public function setLastModifiedId($last_modified_id)
    {
        $this->container['last_modified_id'] = $last_modified_id;

        return $this;
    }

    /**
     * Gets last_modified_name
     *
     * @return string
     */
    public function getLastModifiedName()
    {
        return $this->container['last_modified_name'];
    }

    /**
     * Sets last_modified_name
     *
     * @param string $last_modified_name last_modified_name
     *
     * @return $this
     */
    public function setLastModifiedName($last_modified_name)
    {
        $this->container['last_modified_name'] = $last_modified_name;

        return $this;
    }

    /**
     * Gets last_modified_proxy_name
     *
     * @return string
     */
    public function getLastModifiedProxyName()
    {
        return $this->container['last_modified_proxy_name'];
    }

    /**
     * Sets last_modified_proxy_name
     *
     * @param string $last_modified_proxy_name last_modified_proxy_name
     *
     * @return $this
     */
    public function setLastModifiedProxyName($last_modified_proxy_name)
    {
        $this->container['last_modified_proxy_name'] = $last_modified_proxy_name;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return int
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param int $last_modified_time last_modified_time
     *
     * @return $this
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_initial
     *
     * @return string
     */
    public function getMiddleInitial()
    {
        return $this->container['middle_initial'];
    }

    /**
     * Sets middle_initial
     *
     * @param string $middle_initial middle_initial
     *
     * @return $this
     */
    public function setMiddleInitial($middle_initial)
    {
        $this->container['middle_initial'] = $middle_initial;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets paths
     *
     * @return \Swagger\Client\Model\ContactPathWrapper[]
     */
    public function getPaths()
    {
        return $this->container['paths'];
    }

    /**
     * Sets paths
     *
     * @param \Swagger\Client\Model\ContactPathWrapper[] $paths paths
     *
     * @return $this
     */
    public function setPaths($paths)
    {
        $this->container['paths'] = $paths;

        return $this;
    }

    /**
     * Gets record_type_id
     *
     * @return int
     */
    public function getRecordTypeId()
    {
        return $this->container['record_type_id'];
    }

    /**
     * Sets record_type_id
     *
     * @param int $record_type_id record_type_id
     *
     * @return $this
     */
    public function setRecordTypeId($record_type_id)
    {
        $this->container['record_type_id'] = $record_type_id;

        return $this;
    }

    /**
     * Gets registed_date
     *
     * @return \DateTime
     */
    public function getRegistedDate()
    {
        return $this->container['registed_date'];
    }

    /**
     * Sets registed_date
     *
     * @param \DateTime $registed_date registed_date
     *
     * @return $this
     */
    public function setRegistedDate($registed_date)
    {
        $this->container['registed_date'] = $registed_date;

        return $this;
    }

    /**
     * Gets registed_email
     *
     * @return string
     */
    public function getRegistedEmail()
    {
        return $this->container['registed_email'];
    }

    /**
     * Sets registed_email
     *
     * @param string $registed_email registed_email
     *
     * @return $this
     */
    public function setRegistedEmail($registed_email)
    {
        $this->container['registed_email'] = $registed_email;

        return $this;
    }

    /**
     * Gets registered_date
     *
     * @return \DateTime
     */
    public function getRegisteredDate()
    {
        return $this->container['registered_date'];
    }

    /**
     * Sets registered_date
     *
     * @param \DateTime $registered_date registered_date
     *
     * @return $this
     */
    public function setRegisteredDate($registered_date)
    {
        $this->container['registered_date'] = $registered_date;

        return $this;
    }

    /**
     * Gets registered_email
     *
     * @return string
     */
    public function getRegisteredEmail()
    {
        return $this->container['registered_email'];
    }

    /**
     * Sets registered_email
     *
     * @param string $registered_email registered_email
     *
     * @return $this
     */
    public function setRegisteredEmail($registered_email)
    {
        $this->container['registered_email'] = $registered_email;

        return $this;
    }

    /**
     * Gets resource_bundle_id
     *
     * @return int
     */
    public function getResourceBundleId()
    {
        return $this->container['resource_bundle_id'];
    }

    /**
     * Sets resource_bundle_id
     *
     * @param int $resource_bundle_id resource_bundle_id
     *
     * @return $this
     */
    public function setResourceBundleId($resource_bundle_id)
    {
        $this->container['resource_bundle_id'] = $resource_bundle_id;

        return $this;
    }

    /**
     * Gets security_pin
     *
     * @return string
     */
    public function getSecurityPin()
    {
        return $this->container['security_pin'];
    }

    /**
     * Sets security_pin
     *
     * @param string $security_pin security_pin
     *
     * @return $this
     */
    public function setSecurityPin($security_pin)
    {
        $this->container['security_pin'] = $security_pin;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return int
     */
    public function getSeq()
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param int $seq seq
     *
     * @return $this
     */
    public function setSeq($seq)
    {
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets sso_user_id
     *
     * @return string
     */
    public function getSsoUserId()
    {
        return $this->container['sso_user_id'];
    }

    /**
     * Sets sso_user_id
     *
     * @param string $sso_user_id sso_user_id
     *
     * @return $this
     */
    public function setSsoUserId($sso_user_id)
    {
        $this->container['sso_user_id'] = $sso_user_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string $suffix suffix
     *
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets timezone_id
     *
     * @return string
     */
    public function getTimezoneId()
    {
        return $this->container['timezone_id'];
    }

    /**
     * Sets timezone_id
     *
     * @param string $timezone_id timezone_id
     *
     * @return $this
     */
    public function setTimezoneId($timezone_id)
    {
        $this->container['timezone_id'] = $timezone_id;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return int[]
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param int[] $topics topics
     *
     * @return $this
     */
    public function setTopics($topics)
    {
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets upload_processing
     *
     * @return bool
     */
    public function getUploadProcessing()
    {
        return $this->container['upload_processing'];
    }

    /**
     * Sets upload_processing
     *
     * @param bool $upload_processing upload_processing
     *
     * @return $this
     */
    public function setUploadProcessing($upload_processing)
    {
        $this->container['upload_processing'] = $upload_processing;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


