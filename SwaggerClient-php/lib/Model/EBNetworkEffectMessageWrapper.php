<?php
/**
 * EBNetworkEffectMessageWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EBNetworkEffectMessageWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EBNetworkEffectMessageWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EBNetworkEffectMessageWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'affected_areas' => '\Swagger\Client\Model\GeoShapeWrapper[]',
        'body' => 'string',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'created_proxy_name' => 'string',
        'file_attachments' => '\Swagger\Client\Model\FileAttachmentWrapper[]',
        'id' => 'int',
        'last_modified_date' => '\DateTime',
        'last_modified_id' => 'int',
        'last_modified_name' => 'string',
        'last_modified_proxy_name' => 'string',
        'message_type' => 'string',
        'network_effect_setting' => '\Swagger\Client\Model\EBNetworkEffectSettingWrapper',
        'organization_id' => 'int',
        'publish_categories' => '\Swagger\Client\Model\EBNetworkEffectCategoryWrapper[]',
        'receive_org_id' => 'int',
        'resource_bundle_id' => 'int',
        'send_result' => 'string',
        'sender_name' => 'string',
        'sender_time_zone_id' => 'string',
        'sent' => 'bool',
        'source_id' => 'int',
        'status' => 'string',
        'title' => 'string',
        'training_mode' => 'bool',
        'voice' => '\Swagger\Client\Model\FileAttachmentWrapper'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'affected_areas' => null,
        'body' => null,
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'created_proxy_name' => null,
        'file_attachments' => null,
        'id' => 'int64',
        'last_modified_date' => 'date-time',
        'last_modified_id' => 'int64',
        'last_modified_name' => null,
        'last_modified_proxy_name' => null,
        'message_type' => null,
        'network_effect_setting' => null,
        'organization_id' => 'int64',
        'publish_categories' => null,
        'receive_org_id' => 'int64',
        'resource_bundle_id' => 'int64',
        'send_result' => null,
        'sender_name' => null,
        'sender_time_zone_id' => null,
        'sent' => null,
        'source_id' => 'int64',
        'status' => null,
        'title' => null,
        'training_mode' => null,
        'voice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'affected_areas' => 'affectedAreas',
        'body' => 'body',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'created_proxy_name' => 'createdProxyName',
        'file_attachments' => 'fileAttachments',
        'id' => 'id',
        'last_modified_date' => 'lastModifiedDate',
        'last_modified_id' => 'lastModifiedId',
        'last_modified_name' => 'lastModifiedName',
        'last_modified_proxy_name' => 'lastModifiedProxyName',
        'message_type' => 'messageType',
        'network_effect_setting' => 'networkEffectSetting',
        'organization_id' => 'organizationId',
        'publish_categories' => 'publishCategories',
        'receive_org_id' => 'receiveOrgId',
        'resource_bundle_id' => 'resourceBundleId',
        'send_result' => 'sendResult',
        'sender_name' => 'senderName',
        'sender_time_zone_id' => 'senderTimeZoneId',
        'sent' => 'sent',
        'source_id' => 'sourceId',
        'status' => 'status',
        'title' => 'title',
        'training_mode' => 'trainingMode',
        'voice' => 'voice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'affected_areas' => 'setAffectedAreas',
        'body' => 'setBody',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'created_proxy_name' => 'setCreatedProxyName',
        'file_attachments' => 'setFileAttachments',
        'id' => 'setId',
        'last_modified_date' => 'setLastModifiedDate',
        'last_modified_id' => 'setLastModifiedId',
        'last_modified_name' => 'setLastModifiedName',
        'last_modified_proxy_name' => 'setLastModifiedProxyName',
        'message_type' => 'setMessageType',
        'network_effect_setting' => 'setNetworkEffectSetting',
        'organization_id' => 'setOrganizationId',
        'publish_categories' => 'setPublishCategories',
        'receive_org_id' => 'setReceiveOrgId',
        'resource_bundle_id' => 'setResourceBundleId',
        'send_result' => 'setSendResult',
        'sender_name' => 'setSenderName',
        'sender_time_zone_id' => 'setSenderTimeZoneId',
        'sent' => 'setSent',
        'source_id' => 'setSourceId',
        'status' => 'setStatus',
        'title' => 'setTitle',
        'training_mode' => 'setTrainingMode',
        'voice' => 'setVoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'affected_areas' => 'getAffectedAreas',
        'body' => 'getBody',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'created_proxy_name' => 'getCreatedProxyName',
        'file_attachments' => 'getFileAttachments',
        'id' => 'getId',
        'last_modified_date' => 'getLastModifiedDate',
        'last_modified_id' => 'getLastModifiedId',
        'last_modified_name' => 'getLastModifiedName',
        'last_modified_proxy_name' => 'getLastModifiedProxyName',
        'message_type' => 'getMessageType',
        'network_effect_setting' => 'getNetworkEffectSetting',
        'organization_id' => 'getOrganizationId',
        'publish_categories' => 'getPublishCategories',
        'receive_org_id' => 'getReceiveOrgId',
        'resource_bundle_id' => 'getResourceBundleId',
        'send_result' => 'getSendResult',
        'sender_name' => 'getSenderName',
        'sender_time_zone_id' => 'getSenderTimeZoneId',
        'sent' => 'getSent',
        'source_id' => 'getSourceId',
        'status' => 'getStatus',
        'title' => 'getTitle',
        'training_mode' => 'getTrainingMode',
        'voice' => 'getVoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MESSAGE_TYPE_SEND = 'Send';
    const MESSAGE_TYPE_RECEIVE = 'Receive';
    const STATUS_A = 'A';
    const STATUS_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_SEND,
            self::MESSAGE_TYPE_RECEIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['affected_areas'] = isset($data['affected_areas']) ? $data['affected_areas'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['created_proxy_name'] = isset($data['created_proxy_name']) ? $data['created_proxy_name'] : null;
        $this->container['file_attachments'] = isset($data['file_attachments']) ? $data['file_attachments'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_modified_id'] = isset($data['last_modified_id']) ? $data['last_modified_id'] : null;
        $this->container['last_modified_name'] = isset($data['last_modified_name']) ? $data['last_modified_name'] : null;
        $this->container['last_modified_proxy_name'] = isset($data['last_modified_proxy_name']) ? $data['last_modified_proxy_name'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['network_effect_setting'] = isset($data['network_effect_setting']) ? $data['network_effect_setting'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['publish_categories'] = isset($data['publish_categories']) ? $data['publish_categories'] : null;
        $this->container['receive_org_id'] = isset($data['receive_org_id']) ? $data['receive_org_id'] : null;
        $this->container['resource_bundle_id'] = isset($data['resource_bundle_id']) ? $data['resource_bundle_id'] : null;
        $this->container['send_result'] = isset($data['send_result']) ? $data['send_result'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['sender_time_zone_id'] = isset($data['sender_time_zone_id']) ? $data['sender_time_zone_id'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['training_mode'] = isset($data['training_mode']) ? $data['training_mode'] : null;
        $this->container['voice'] = isset($data['voice']) ? $data['voice'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['message_type']) && !in_array($this->container['message_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'message_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets affected_areas
     *
     * @return \Swagger\Client\Model\GeoShapeWrapper[]
     */
    public function getAffectedAreas()
    {
        return $this->container['affected_areas'];
    }

    /**
     * Sets affected_areas
     *
     * @param \Swagger\Client\Model\GeoShapeWrapper[] $affected_areas affected_areas
     *
     * @return $this
     */
    public function setAffectedAreas($affected_areas)
    {
        $this->container['affected_areas'] = $affected_areas;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets created_proxy_name
     *
     * @return string
     */
    public function getCreatedProxyName()
    {
        return $this->container['created_proxy_name'];
    }

    /**
     * Sets created_proxy_name
     *
     * @param string $created_proxy_name created_proxy_name
     *
     * @return $this
     */
    public function setCreatedProxyName($created_proxy_name)
    {
        $this->container['created_proxy_name'] = $created_proxy_name;

        return $this;
    }

    /**
     * Gets file_attachments
     *
     * @return \Swagger\Client\Model\FileAttachmentWrapper[]
     */
    public function getFileAttachments()
    {
        return $this->container['file_attachments'];
    }

    /**
     * Sets file_attachments
     *
     * @param \Swagger\Client\Model\FileAttachmentWrapper[] $file_attachments file_attachments
     *
     * @return $this
     */
    public function setFileAttachments($file_attachments)
    {
        $this->container['file_attachments'] = $file_attachments;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_modified_id
     *
     * @return int
     */
    public function getLastModifiedId()
    {
        return $this->container['last_modified_id'];
    }

    /**
     * Sets last_modified_id
     *
     * @param int $last_modified_id last_modified_id
     *
     * @return $this
     */
    public function setLastModifiedId($last_modified_id)
    {
        $this->container['last_modified_id'] = $last_modified_id;

        return $this;
    }

    /**
     * Gets last_modified_name
     *
     * @return string
     */
    public function getLastModifiedName()
    {
        return $this->container['last_modified_name'];
    }

    /**
     * Sets last_modified_name
     *
     * @param string $last_modified_name last_modified_name
     *
     * @return $this
     */
    public function setLastModifiedName($last_modified_name)
    {
        $this->container['last_modified_name'] = $last_modified_name;

        return $this;
    }

    /**
     * Gets last_modified_proxy_name
     *
     * @return string
     */
    public function getLastModifiedProxyName()
    {
        return $this->container['last_modified_proxy_name'];
    }

    /**
     * Sets last_modified_proxy_name
     *
     * @param string $last_modified_proxy_name last_modified_proxy_name
     *
     * @return $this
     */
    public function setLastModifiedProxyName($last_modified_proxy_name)
    {
        $this->container['last_modified_proxy_name'] = $last_modified_proxy_name;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string $message_type message_type
     *
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($message_type) && !in_array($message_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'message_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets network_effect_setting
     *
     * @return \Swagger\Client\Model\EBNetworkEffectSettingWrapper
     */
    public function getNetworkEffectSetting()
    {
        return $this->container['network_effect_setting'];
    }

    /**
     * Sets network_effect_setting
     *
     * @param \Swagger\Client\Model\EBNetworkEffectSettingWrapper $network_effect_setting network_effect_setting
     *
     * @return $this
     */
    public function setNetworkEffectSetting($network_effect_setting)
    {
        $this->container['network_effect_setting'] = $network_effect_setting;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets publish_categories
     *
     * @return \Swagger\Client\Model\EBNetworkEffectCategoryWrapper[]
     */
    public function getPublishCategories()
    {
        return $this->container['publish_categories'];
    }

    /**
     * Sets publish_categories
     *
     * @param \Swagger\Client\Model\EBNetworkEffectCategoryWrapper[] $publish_categories publish_categories
     *
     * @return $this
     */
    public function setPublishCategories($publish_categories)
    {
        $this->container['publish_categories'] = $publish_categories;

        return $this;
    }

    /**
     * Gets receive_org_id
     *
     * @return int
     */
    public function getReceiveOrgId()
    {
        return $this->container['receive_org_id'];
    }

    /**
     * Sets receive_org_id
     *
     * @param int $receive_org_id receive_org_id
     *
     * @return $this
     */
    public function setReceiveOrgId($receive_org_id)
    {
        $this->container['receive_org_id'] = $receive_org_id;

        return $this;
    }

    /**
     * Gets resource_bundle_id
     *
     * @return int
     */
    public function getResourceBundleId()
    {
        return $this->container['resource_bundle_id'];
    }

    /**
     * Sets resource_bundle_id
     *
     * @param int $resource_bundle_id resource_bundle_id
     *
     * @return $this
     */
    public function setResourceBundleId($resource_bundle_id)
    {
        $this->container['resource_bundle_id'] = $resource_bundle_id;

        return $this;
    }

    /**
     * Gets send_result
     *
     * @return string
     */
    public function getSendResult()
    {
        return $this->container['send_result'];
    }

    /**
     * Sets send_result
     *
     * @param string $send_result send_result
     *
     * @return $this
     */
    public function setSendResult($send_result)
    {
        $this->container['send_result'] = $send_result;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name sender_name
     *
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_time_zone_id
     *
     * @return string
     */
    public function getSenderTimeZoneId()
    {
        return $this->container['sender_time_zone_id'];
    }

    /**
     * Sets sender_time_zone_id
     *
     * @param string $sender_time_zone_id sender_time_zone_id
     *
     * @return $this
     */
    public function setSenderTimeZoneId($sender_time_zone_id)
    {
        $this->container['sender_time_zone_id'] = $sender_time_zone_id;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool $sent sent
     *
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return int
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param int $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets training_mode
     *
     * @return bool
     */
    public function getTrainingMode()
    {
        return $this->container['training_mode'];
    }

    /**
     * Sets training_mode
     *
     * @param bool $training_mode training_mode
     *
     * @return $this
     */
    public function setTrainingMode($training_mode)
    {
        $this->container['training_mode'] = $training_mode;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return \Swagger\Client\Model\FileAttachmentWrapper
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param \Swagger\Client\Model\FileAttachmentWrapper $voice voice
     *
     * @return $this
     */
    public function setVoice($voice)
    {
        $this->container['voice'] = $voice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


