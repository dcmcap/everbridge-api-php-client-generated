<?php
/**
 * EscalationLevelWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EscalationLevelWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EscalationLevelWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EscalationLevelWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'broadcast_contacts' => '\Swagger\Client\Model\BroadcastContactsWrapper',
        'escalation_condition' => '\Swagger\Client\Model\EscalationConditionWrapper',
        'escalation_name' => 'string',
        'index' => 'int',
        'notification_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'broadcast_contacts' => null,
        'escalation_condition' => null,
        'escalation_name' => null,
        'index' => 'int32',
        'notification_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'broadcast_contacts' => 'broadcastContacts',
        'escalation_condition' => 'escalationCondition',
        'escalation_name' => 'escalationName',
        'index' => 'index',
        'notification_id' => 'notificationId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'broadcast_contacts' => 'setBroadcastContacts',
        'escalation_condition' => 'setEscalationCondition',
        'escalation_name' => 'setEscalationName',
        'index' => 'setIndex',
        'notification_id' => 'setNotificationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'broadcast_contacts' => 'getBroadcastContacts',
        'escalation_condition' => 'getEscalationCondition',
        'escalation_name' => 'getEscalationName',
        'index' => 'getIndex',
        'notification_id' => 'getNotificationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['broadcast_contacts'] = isset($data['broadcast_contacts']) ? $data['broadcast_contacts'] : null;
        $this->container['escalation_condition'] = isset($data['escalation_condition']) ? $data['escalation_condition'] : null;
        $this->container['escalation_name'] = isset($data['escalation_name']) ? $data['escalation_name'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['notification_id'] = isset($data['notification_id']) ? $data['notification_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets broadcast_contacts
     *
     * @return \Swagger\Client\Model\BroadcastContactsWrapper
     */
    public function getBroadcastContacts()
    {
        return $this->container['broadcast_contacts'];
    }

    /**
     * Sets broadcast_contacts
     *
     * @param \Swagger\Client\Model\BroadcastContactsWrapper $broadcast_contacts broadcast_contacts
     *
     * @return $this
     */
    public function setBroadcastContacts($broadcast_contacts)
    {
        $this->container['broadcast_contacts'] = $broadcast_contacts;

        return $this;
    }

    /**
     * Gets escalation_condition
     *
     * @return \Swagger\Client\Model\EscalationConditionWrapper
     */
    public function getEscalationCondition()
    {
        return $this->container['escalation_condition'];
    }

    /**
     * Sets escalation_condition
     *
     * @param \Swagger\Client\Model\EscalationConditionWrapper $escalation_condition escalation_condition
     *
     * @return $this
     */
    public function setEscalationCondition($escalation_condition)
    {
        $this->container['escalation_condition'] = $escalation_condition;

        return $this;
    }

    /**
     * Gets escalation_name
     *
     * @return string
     */
    public function getEscalationName()
    {
        return $this->container['escalation_name'];
    }

    /**
     * Sets escalation_name
     *
     * @param string $escalation_name escalation_name
     *
     * @return $this
     */
    public function setEscalationName($escalation_name)
    {
        $this->container['escalation_name'] = $escalation_name;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets notification_id
     *
     * @return int
     */
    public function getNotificationId()
    {
        return $this->container['notification_id'];
    }

    /**
     * Sets notification_id
     *
     * @param int $notification_id notification_id
     *
     * @return $this
     */
    public function setNotificationId($notification_id)
    {
        $this->container['notification_id'] = $notification_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


