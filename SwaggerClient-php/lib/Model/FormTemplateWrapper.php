<?php
/**
 * FormTemplateWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FormTemplateWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormTemplateWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormTemplateWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'form_variable_items' => '\Swagger\Client\Model\FormVariableItemWrapper[]',
        'post_message' => 'string',
        'pre_message' => 'string',
        'subject' => 'string',
        'sys_var_current_time_format' => 'string',
        'sys_var_today_date_format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'form_variable_items' => null,
        'post_message' => null,
        'pre_message' => null,
        'subject' => null,
        'sys_var_current_time_format' => null,
        'sys_var_today_date_format' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'form_variable_items' => 'formVariableItems',
        'post_message' => 'postMessage',
        'pre_message' => 'preMessage',
        'subject' => 'subject',
        'sys_var_current_time_format' => 'sysVarCurrentTimeFormat',
        'sys_var_today_date_format' => 'sysVarTodayDateFormat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'form_variable_items' => 'setFormVariableItems',
        'post_message' => 'setPostMessage',
        'pre_message' => 'setPreMessage',
        'subject' => 'setSubject',
        'sys_var_current_time_format' => 'setSysVarCurrentTimeFormat',
        'sys_var_today_date_format' => 'setSysVarTodayDateFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'form_variable_items' => 'getFormVariableItems',
        'post_message' => 'getPostMessage',
        'pre_message' => 'getPreMessage',
        'subject' => 'getSubject',
        'sys_var_current_time_format' => 'getSysVarCurrentTimeFormat',
        'sys_var_today_date_format' => 'getSysVarTodayDateFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['form_variable_items'] = isset($data['form_variable_items']) ? $data['form_variable_items'] : null;
        $this->container['post_message'] = isset($data['post_message']) ? $data['post_message'] : null;
        $this->container['pre_message'] = isset($data['pre_message']) ? $data['pre_message'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['sys_var_current_time_format'] = isset($data['sys_var_current_time_format']) ? $data['sys_var_current_time_format'] : null;
        $this->container['sys_var_today_date_format'] = isset($data['sys_var_today_date_format']) ? $data['sys_var_today_date_format'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets form_variable_items
     *
     * @return \Swagger\Client\Model\FormVariableItemWrapper[]
     */
    public function getFormVariableItems()
    {
        return $this->container['form_variable_items'];
    }

    /**
     * Sets form_variable_items
     *
     * @param \Swagger\Client\Model\FormVariableItemWrapper[] $form_variable_items form_variable_items
     *
     * @return $this
     */
    public function setFormVariableItems($form_variable_items)
    {
        $this->container['form_variable_items'] = $form_variable_items;

        return $this;
    }

    /**
     * Gets post_message
     *
     * @return string
     */
    public function getPostMessage()
    {
        return $this->container['post_message'];
    }

    /**
     * Sets post_message
     *
     * @param string $post_message post_message
     *
     * @return $this
     */
    public function setPostMessage($post_message)
    {
        $this->container['post_message'] = $post_message;

        return $this;
    }

    /**
     * Gets pre_message
     *
     * @return string
     */
    public function getPreMessage()
    {
        return $this->container['pre_message'];
    }

    /**
     * Sets pre_message
     *
     * @param string $pre_message pre_message
     *
     * @return $this
     */
    public function setPreMessage($pre_message)
    {
        $this->container['pre_message'] = $pre_message;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets sys_var_current_time_format
     *
     * @return string
     */
    public function getSysVarCurrentTimeFormat()
    {
        return $this->container['sys_var_current_time_format'];
    }

    /**
     * Sets sys_var_current_time_format
     *
     * @param string $sys_var_current_time_format sys_var_current_time_format
     *
     * @return $this
     */
    public function setSysVarCurrentTimeFormat($sys_var_current_time_format)
    {
        $this->container['sys_var_current_time_format'] = $sys_var_current_time_format;

        return $this;
    }

    /**
     * Gets sys_var_today_date_format
     *
     * @return string
     */
    public function getSysVarTodayDateFormat()
    {
        return $this->container['sys_var_today_date_format'];
    }

    /**
     * Sets sys_var_today_date_format
     *
     * @param string $sys_var_today_date_format sys_var_today_date_format
     *
     * @return $this
     */
    public function setSysVarTodayDateFormat($sys_var_today_date_format)
    {
        $this->container['sys_var_today_date_format'] = $sys_var_today_date_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


