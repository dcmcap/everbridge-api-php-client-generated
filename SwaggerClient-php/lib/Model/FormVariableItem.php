<?php
/**
 * FormVariableItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FormVariableItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormVariableItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormVariableItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'created_proxy_name' => 'string',
        'edit_value_on_ui' => 'bool',
        'ext_properties' => 'map[string,string]',
        'form_id' => 'int',
        'id' => 'int',
        'incident_id' => 'int',
        'incident_phase_id' => 'int',
        'is_required' => 'bool',
        'is_sys' => 'bool',
        'is_used' => 'bool',
        'last_modified_date' => '\DateTime',
        'last_modified_id' => 'int',
        'last_modified_name' => 'string',
        'last_modified_proxy_name' => 'string',
        'organization_id' => 'int',
        'phase_template_id' => 'int',
        'prefix_name' => 'string',
        'previous_val' => 'string[]',
        'required' => 'bool',
        'resource_bundle_id' => 'int',
        'seq' => 'int',
        'short_id' => 'string',
        'status' => 'string',
        'sys' => 'bool',
        'template_form_id' => 'int',
        'template_id' => 'int',
        'url' => 'bool',
        'used' => 'bool',
        'val' => 'string[]',
        'validate_max_len' => 'bool',
        'variable_id' => 'int',
        'variable_item' => '\Swagger\Client\Model\VariableItem',
        'variable_name' => 'string',
        'variable_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'created_proxy_name' => null,
        'edit_value_on_ui' => null,
        'ext_properties' => null,
        'form_id' => 'int64',
        'id' => 'int64',
        'incident_id' => 'int64',
        'incident_phase_id' => 'int64',
        'is_required' => null,
        'is_sys' => null,
        'is_used' => null,
        'last_modified_date' => 'date-time',
        'last_modified_id' => 'int64',
        'last_modified_name' => null,
        'last_modified_proxy_name' => null,
        'organization_id' => 'int64',
        'phase_template_id' => 'int64',
        'prefix_name' => null,
        'previous_val' => null,
        'required' => null,
        'resource_bundle_id' => 'int64',
        'seq' => 'int32',
        'short_id' => null,
        'status' => null,
        'sys' => null,
        'template_form_id' => 'int64',
        'template_id' => 'int64',
        'url' => null,
        'used' => null,
        'val' => null,
        'validate_max_len' => null,
        'variable_id' => 'int64',
        'variable_item' => null,
        'variable_name' => null,
        'variable_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'created_proxy_name' => 'createdProxyName',
        'edit_value_on_ui' => 'editValueOnUI',
        'ext_properties' => 'extProperties',
        'form_id' => 'formId',
        'id' => 'id',
        'incident_id' => 'incidentId',
        'incident_phase_id' => 'incidentPhaseId',
        'is_required' => 'isRequired',
        'is_sys' => 'isSys',
        'is_used' => 'isUsed',
        'last_modified_date' => 'lastModifiedDate',
        'last_modified_id' => 'lastModifiedId',
        'last_modified_name' => 'lastModifiedName',
        'last_modified_proxy_name' => 'lastModifiedProxyName',
        'organization_id' => 'organizationId',
        'phase_template_id' => 'phaseTemplateId',
        'prefix_name' => 'prefixName',
        'previous_val' => 'previousVal',
        'required' => 'required',
        'resource_bundle_id' => 'resourceBundleId',
        'seq' => 'seq',
        'short_id' => 'shortId',
        'status' => 'status',
        'sys' => 'sys',
        'template_form_id' => 'templateFormId',
        'template_id' => 'templateId',
        'url' => 'url',
        'used' => 'used',
        'val' => 'val',
        'validate_max_len' => 'validateMaxLen',
        'variable_id' => 'variableId',
        'variable_item' => 'variableItem',
        'variable_name' => 'variableName',
        'variable_value' => 'variableValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'created_proxy_name' => 'setCreatedProxyName',
        'edit_value_on_ui' => 'setEditValueOnUi',
        'ext_properties' => 'setExtProperties',
        'form_id' => 'setFormId',
        'id' => 'setId',
        'incident_id' => 'setIncidentId',
        'incident_phase_id' => 'setIncidentPhaseId',
        'is_required' => 'setIsRequired',
        'is_sys' => 'setIsSys',
        'is_used' => 'setIsUsed',
        'last_modified_date' => 'setLastModifiedDate',
        'last_modified_id' => 'setLastModifiedId',
        'last_modified_name' => 'setLastModifiedName',
        'last_modified_proxy_name' => 'setLastModifiedProxyName',
        'organization_id' => 'setOrganizationId',
        'phase_template_id' => 'setPhaseTemplateId',
        'prefix_name' => 'setPrefixName',
        'previous_val' => 'setPreviousVal',
        'required' => 'setRequired',
        'resource_bundle_id' => 'setResourceBundleId',
        'seq' => 'setSeq',
        'short_id' => 'setShortId',
        'status' => 'setStatus',
        'sys' => 'setSys',
        'template_form_id' => 'setTemplateFormId',
        'template_id' => 'setTemplateId',
        'url' => 'setUrl',
        'used' => 'setUsed',
        'val' => 'setVal',
        'validate_max_len' => 'setValidateMaxLen',
        'variable_id' => 'setVariableId',
        'variable_item' => 'setVariableItem',
        'variable_name' => 'setVariableName',
        'variable_value' => 'setVariableValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'created_proxy_name' => 'getCreatedProxyName',
        'edit_value_on_ui' => 'getEditValueOnUi',
        'ext_properties' => 'getExtProperties',
        'form_id' => 'getFormId',
        'id' => 'getId',
        'incident_id' => 'getIncidentId',
        'incident_phase_id' => 'getIncidentPhaseId',
        'is_required' => 'getIsRequired',
        'is_sys' => 'getIsSys',
        'is_used' => 'getIsUsed',
        'last_modified_date' => 'getLastModifiedDate',
        'last_modified_id' => 'getLastModifiedId',
        'last_modified_name' => 'getLastModifiedName',
        'last_modified_proxy_name' => 'getLastModifiedProxyName',
        'organization_id' => 'getOrganizationId',
        'phase_template_id' => 'getPhaseTemplateId',
        'prefix_name' => 'getPrefixName',
        'previous_val' => 'getPreviousVal',
        'required' => 'getRequired',
        'resource_bundle_id' => 'getResourceBundleId',
        'seq' => 'getSeq',
        'short_id' => 'getShortId',
        'status' => 'getStatus',
        'sys' => 'getSys',
        'template_form_id' => 'getTemplateFormId',
        'template_id' => 'getTemplateId',
        'url' => 'getUrl',
        'used' => 'getUsed',
        'val' => 'getVal',
        'validate_max_len' => 'getValidateMaxLen',
        'variable_id' => 'getVariableId',
        'variable_item' => 'getVariableItem',
        'variable_name' => 'getVariableName',
        'variable_value' => 'getVariableValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_A = 'A';
    const STATUS_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['created_proxy_name'] = isset($data['created_proxy_name']) ? $data['created_proxy_name'] : null;
        $this->container['edit_value_on_ui'] = isset($data['edit_value_on_ui']) ? $data['edit_value_on_ui'] : null;
        $this->container['ext_properties'] = isset($data['ext_properties']) ? $data['ext_properties'] : null;
        $this->container['form_id'] = isset($data['form_id']) ? $data['form_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['incident_id'] = isset($data['incident_id']) ? $data['incident_id'] : null;
        $this->container['incident_phase_id'] = isset($data['incident_phase_id']) ? $data['incident_phase_id'] : null;
        $this->container['is_required'] = isset($data['is_required']) ? $data['is_required'] : null;
        $this->container['is_sys'] = isset($data['is_sys']) ? $data['is_sys'] : null;
        $this->container['is_used'] = isset($data['is_used']) ? $data['is_used'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_modified_id'] = isset($data['last_modified_id']) ? $data['last_modified_id'] : null;
        $this->container['last_modified_name'] = isset($data['last_modified_name']) ? $data['last_modified_name'] : null;
        $this->container['last_modified_proxy_name'] = isset($data['last_modified_proxy_name']) ? $data['last_modified_proxy_name'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['phase_template_id'] = isset($data['phase_template_id']) ? $data['phase_template_id'] : null;
        $this->container['prefix_name'] = isset($data['prefix_name']) ? $data['prefix_name'] : null;
        $this->container['previous_val'] = isset($data['previous_val']) ? $data['previous_val'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['resource_bundle_id'] = isset($data['resource_bundle_id']) ? $data['resource_bundle_id'] : null;
        $this->container['seq'] = isset($data['seq']) ? $data['seq'] : null;
        $this->container['short_id'] = isset($data['short_id']) ? $data['short_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sys'] = isset($data['sys']) ? $data['sys'] : null;
        $this->container['template_form_id'] = isset($data['template_form_id']) ? $data['template_form_id'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['used'] = isset($data['used']) ? $data['used'] : null;
        $this->container['val'] = isset($data['val']) ? $data['val'] : null;
        $this->container['validate_max_len'] = isset($data['validate_max_len']) ? $data['validate_max_len'] : null;
        $this->container['variable_id'] = isset($data['variable_id']) ? $data['variable_id'] : null;
        $this->container['variable_item'] = isset($data['variable_item']) ? $data['variable_item'] : null;
        $this->container['variable_name'] = isset($data['variable_name']) ? $data['variable_name'] : null;
        $this->container['variable_value'] = isset($data['variable_value']) ? $data['variable_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets created_proxy_name
     *
     * @return string
     */
    public function getCreatedProxyName()
    {
        return $this->container['created_proxy_name'];
    }

    /**
     * Sets created_proxy_name
     *
     * @param string $created_proxy_name created_proxy_name
     *
     * @return $this
     */
    public function setCreatedProxyName($created_proxy_name)
    {
        $this->container['created_proxy_name'] = $created_proxy_name;

        return $this;
    }

    /**
     * Gets edit_value_on_ui
     *
     * @return bool
     */
    public function getEditValueOnUi()
    {
        return $this->container['edit_value_on_ui'];
    }

    /**
     * Sets edit_value_on_ui
     *
     * @param bool $edit_value_on_ui edit_value_on_ui
     *
     * @return $this
     */
    public function setEditValueOnUi($edit_value_on_ui)
    {
        $this->container['edit_value_on_ui'] = $edit_value_on_ui;

        return $this;
    }

    /**
     * Gets ext_properties
     *
     * @return map[string,string]
     */
    public function getExtProperties()
    {
        return $this->container['ext_properties'];
    }

    /**
     * Sets ext_properties
     *
     * @param map[string,string] $ext_properties ext_properties
     *
     * @return $this
     */
    public function setExtProperties($ext_properties)
    {
        $this->container['ext_properties'] = $ext_properties;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return int
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param int $form_id form_id
     *
     * @return $this
     */
    public function setFormId($form_id)
    {
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets incident_id
     *
     * @return int
     */
    public function getIncidentId()
    {
        return $this->container['incident_id'];
    }

    /**
     * Sets incident_id
     *
     * @param int $incident_id incident_id
     *
     * @return $this
     */
    public function setIncidentId($incident_id)
    {
        $this->container['incident_id'] = $incident_id;

        return $this;
    }

    /**
     * Gets incident_phase_id
     *
     * @return int
     */
    public function getIncidentPhaseId()
    {
        return $this->container['incident_phase_id'];
    }

    /**
     * Sets incident_phase_id
     *
     * @param int $incident_phase_id incident_phase_id
     *
     * @return $this
     */
    public function setIncidentPhaseId($incident_phase_id)
    {
        $this->container['incident_phase_id'] = $incident_phase_id;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool $is_required is_required
     *
     * @return $this
     */
    public function setIsRequired($is_required)
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets is_sys
     *
     * @return bool
     */
    public function getIsSys()
    {
        return $this->container['is_sys'];
    }

    /**
     * Sets is_sys
     *
     * @param bool $is_sys is_sys
     *
     * @return $this
     */
    public function setIsSys($is_sys)
    {
        $this->container['is_sys'] = $is_sys;

        return $this;
    }

    /**
     * Gets is_used
     *
     * @return bool
     */
    public function getIsUsed()
    {
        return $this->container['is_used'];
    }

    /**
     * Sets is_used
     *
     * @param bool $is_used is_used
     *
     * @return $this
     */
    public function setIsUsed($is_used)
    {
        $this->container['is_used'] = $is_used;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_modified_id
     *
     * @return int
     */
    public function getLastModifiedId()
    {
        return $this->container['last_modified_id'];
    }

    /**
     * Sets last_modified_id
     *
     * @param int $last_modified_id last_modified_id
     *
     * @return $this
     */
    public function setLastModifiedId($last_modified_id)
    {
        $this->container['last_modified_id'] = $last_modified_id;

        return $this;
    }

    /**
     * Gets last_modified_name
     *
     * @return string
     */
    public function getLastModifiedName()
    {
        return $this->container['last_modified_name'];
    }

    /**
     * Sets last_modified_name
     *
     * @param string $last_modified_name last_modified_name
     *
     * @return $this
     */
    public function setLastModifiedName($last_modified_name)
    {
        $this->container['last_modified_name'] = $last_modified_name;

        return $this;
    }

    /**
     * Gets last_modified_proxy_name
     *
     * @return string
     */
    public function getLastModifiedProxyName()
    {
        return $this->container['last_modified_proxy_name'];
    }

    /**
     * Sets last_modified_proxy_name
     *
     * @param string $last_modified_proxy_name last_modified_proxy_name
     *
     * @return $this
     */
    public function setLastModifiedProxyName($last_modified_proxy_name)
    {
        $this->container['last_modified_proxy_name'] = $last_modified_proxy_name;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets phase_template_id
     *
     * @return int
     */
    public function getPhaseTemplateId()
    {
        return $this->container['phase_template_id'];
    }

    /**
     * Sets phase_template_id
     *
     * @param int $phase_template_id phase_template_id
     *
     * @return $this
     */
    public function setPhaseTemplateId($phase_template_id)
    {
        $this->container['phase_template_id'] = $phase_template_id;

        return $this;
    }

    /**
     * Gets prefix_name
     *
     * @return string
     */
    public function getPrefixName()
    {
        return $this->container['prefix_name'];
    }

    /**
     * Sets prefix_name
     *
     * @param string $prefix_name prefix_name
     *
     * @return $this
     */
    public function setPrefixName($prefix_name)
    {
        $this->container['prefix_name'] = $prefix_name;

        return $this;
    }

    /**
     * Gets previous_val
     *
     * @return string[]
     */
    public function getPreviousVal()
    {
        return $this->container['previous_val'];
    }

    /**
     * Sets previous_val
     *
     * @param string[] $previous_val previous_val
     *
     * @return $this
     */
    public function setPreviousVal($previous_val)
    {
        $this->container['previous_val'] = $previous_val;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets resource_bundle_id
     *
     * @return int
     */
    public function getResourceBundleId()
    {
        return $this->container['resource_bundle_id'];
    }

    /**
     * Sets resource_bundle_id
     *
     * @param int $resource_bundle_id resource_bundle_id
     *
     * @return $this
     */
    public function setResourceBundleId($resource_bundle_id)
    {
        $this->container['resource_bundle_id'] = $resource_bundle_id;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return int
     */
    public function getSeq()
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param int $seq seq
     *
     * @return $this
     */
    public function setSeq($seq)
    {
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets short_id
     *
     * @return string
     */
    public function getShortId()
    {
        return $this->container['short_id'];
    }

    /**
     * Sets short_id
     *
     * @param string $short_id short_id
     *
     * @return $this
     */
    public function setShortId($short_id)
    {
        $this->container['short_id'] = $short_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sys
     *
     * @return bool
     */
    public function getSys()
    {
        return $this->container['sys'];
    }

    /**
     * Sets sys
     *
     * @param bool $sys sys
     *
     * @return $this
     */
    public function setSys($sys)
    {
        $this->container['sys'] = $sys;

        return $this;
    }

    /**
     * Gets template_form_id
     *
     * @return int
     */
    public function getTemplateFormId()
    {
        return $this->container['template_form_id'];
    }

    /**
     * Sets template_form_id
     *
     * @param int $template_form_id template_form_id
     *
     * @return $this
     */
    public function setTemplateFormId($template_form_id)
    {
        $this->container['template_form_id'] = $template_form_id;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return bool
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param bool $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets used
     *
     * @return bool
     */
    public function getUsed()
    {
        return $this->container['used'];
    }

    /**
     * Sets used
     *
     * @param bool $used used
     *
     * @return $this
     */
    public function setUsed($used)
    {
        $this->container['used'] = $used;

        return $this;
    }

    /**
     * Gets val
     *
     * @return string[]
     */
    public function getVal()
    {
        return $this->container['val'];
    }

    /**
     * Sets val
     *
     * @param string[] $val val
     *
     * @return $this
     */
    public function setVal($val)
    {
        $this->container['val'] = $val;

        return $this;
    }

    /**
     * Gets validate_max_len
     *
     * @return bool
     */
    public function getValidateMaxLen()
    {
        return $this->container['validate_max_len'];
    }

    /**
     * Sets validate_max_len
     *
     * @param bool $validate_max_len validate_max_len
     *
     * @return $this
     */
    public function setValidateMaxLen($validate_max_len)
    {
        $this->container['validate_max_len'] = $validate_max_len;

        return $this;
    }

    /**
     * Gets variable_id
     *
     * @return int
     */
    public function getVariableId()
    {
        return $this->container['variable_id'];
    }

    /**
     * Sets variable_id
     *
     * @param int $variable_id variable_id
     *
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        $this->container['variable_id'] = $variable_id;

        return $this;
    }

    /**
     * Gets variable_item
     *
     * @return \Swagger\Client\Model\VariableItem
     */
    public function getVariableItem()
    {
        return $this->container['variable_item'];
    }

    /**
     * Sets variable_item
     *
     * @param \Swagger\Client\Model\VariableItem $variable_item variable_item
     *
     * @return $this
     */
    public function setVariableItem($variable_item)
    {
        $this->container['variable_item'] = $variable_item;

        return $this;
    }

    /**
     * Gets variable_name
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     *
     * @param string $variable_name variable_name
     *
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variable_value
     *
     * @return string
     */
    public function getVariableValue()
    {
        return $this->container['variable_value'];
    }

    /**
     * Sets variable_value
     *
     * @param string $variable_value variable_value
     *
     * @return $this
     */
    public function setVariableValue($variable_value)
    {
        $this->container['variable_value'] = $variable_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


