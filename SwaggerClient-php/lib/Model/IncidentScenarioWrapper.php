<?php
/**
 * IncidentScenarioWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IncidentScenarioWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IncidentScenarioWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IncidentScenarioWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_scenario_id' => 'string',
        'enable_message_truncate' => 'bool',
        'form_variables' => '\Swagger\Client\Model\FormVariableItem[]',
        'incident_action' => 'string',
        'incident_name' => 'string',
        'incident_notification_property_bag' => 'map[string,string]',
        'name' => 'string',
        'pin_code' => 'string',
        'push_custom_fields' => 'map[string,string]',
        'scenario_id' => 'int',
        'skip_variable_required_check' => 'bool',
        'template_ids' => 'int[]',
        'templates' => '\Swagger\Client\Model\IncidentTemplateBO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_scenario_id' => null,
        'enable_message_truncate' => null,
        'form_variables' => null,
        'incident_action' => null,
        'incident_name' => null,
        'incident_notification_property_bag' => null,
        'name' => null,
        'pin_code' => null,
        'push_custom_fields' => null,
        'scenario_id' => 'int64',
        'skip_variable_required_check' => null,
        'template_ids' => 'int64',
        'templates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_scenario_id' => 'customScenarioId',
        'enable_message_truncate' => 'enableMessageTruncate',
        'form_variables' => 'formVariables',
        'incident_action' => 'incidentAction',
        'incident_name' => 'incidentName',
        'incident_notification_property_bag' => 'incidentNotificationPropertyBag',
        'name' => 'name',
        'pin_code' => 'pinCode',
        'push_custom_fields' => 'pushCustomFields',
        'scenario_id' => 'scenarioId',
        'skip_variable_required_check' => 'skipVariableRequiredCheck',
        'template_ids' => 'templateIds',
        'templates' => 'templates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_scenario_id' => 'setCustomScenarioId',
        'enable_message_truncate' => 'setEnableMessageTruncate',
        'form_variables' => 'setFormVariables',
        'incident_action' => 'setIncidentAction',
        'incident_name' => 'setIncidentName',
        'incident_notification_property_bag' => 'setIncidentNotificationPropertyBag',
        'name' => 'setName',
        'pin_code' => 'setPinCode',
        'push_custom_fields' => 'setPushCustomFields',
        'scenario_id' => 'setScenarioId',
        'skip_variable_required_check' => 'setSkipVariableRequiredCheck',
        'template_ids' => 'setTemplateIds',
        'templates' => 'setTemplates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_scenario_id' => 'getCustomScenarioId',
        'enable_message_truncate' => 'getEnableMessageTruncate',
        'form_variables' => 'getFormVariables',
        'incident_action' => 'getIncidentAction',
        'incident_name' => 'getIncidentName',
        'incident_notification_property_bag' => 'getIncidentNotificationPropertyBag',
        'name' => 'getName',
        'pin_code' => 'getPinCode',
        'push_custom_fields' => 'getPushCustomFields',
        'scenario_id' => 'getScenarioId',
        'skip_variable_required_check' => 'getSkipVariableRequiredCheck',
        'template_ids' => 'getTemplateIds',
        'templates' => 'getTemplates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INCIDENT_ACTION_LAUNCH = 'Launch';
    const INCIDENT_ACTION_LAUNCH_THEN_CLOSE = 'LaunchThenClose';
    const INCIDENT_ACTION_UPDATE = 'Update';
    const INCIDENT_ACTION_CLOSE = 'Close';
    const INCIDENT_ACTION_UPDATE_THEN_CLOSE = 'UpdateThenClose';
    const INCIDENT_ACTION_CLOSE_WITH_NOTIFICATION = 'CloseWithNotification';
    const INCIDENT_ACTION_CLOSE_WITHOUT_NOTIFICATION = 'CloseWithoutNotification';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncidentActionAllowableValues()
    {
        return [
            self::INCIDENT_ACTION_LAUNCH,
            self::INCIDENT_ACTION_LAUNCH_THEN_CLOSE,
            self::INCIDENT_ACTION_UPDATE,
            self::INCIDENT_ACTION_CLOSE,
            self::INCIDENT_ACTION_UPDATE_THEN_CLOSE,
            self::INCIDENT_ACTION_CLOSE_WITH_NOTIFICATION,
            self::INCIDENT_ACTION_CLOSE_WITHOUT_NOTIFICATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_scenario_id'] = isset($data['custom_scenario_id']) ? $data['custom_scenario_id'] : null;
        $this->container['enable_message_truncate'] = isset($data['enable_message_truncate']) ? $data['enable_message_truncate'] : null;
        $this->container['form_variables'] = isset($data['form_variables']) ? $data['form_variables'] : null;
        $this->container['incident_action'] = isset($data['incident_action']) ? $data['incident_action'] : null;
        $this->container['incident_name'] = isset($data['incident_name']) ? $data['incident_name'] : null;
        $this->container['incident_notification_property_bag'] = isset($data['incident_notification_property_bag']) ? $data['incident_notification_property_bag'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pin_code'] = isset($data['pin_code']) ? $data['pin_code'] : null;
        $this->container['push_custom_fields'] = isset($data['push_custom_fields']) ? $data['push_custom_fields'] : null;
        $this->container['scenario_id'] = isset($data['scenario_id']) ? $data['scenario_id'] : null;
        $this->container['skip_variable_required_check'] = isset($data['skip_variable_required_check']) ? $data['skip_variable_required_check'] : null;
        $this->container['template_ids'] = isset($data['template_ids']) ? $data['template_ids'] : null;
        $this->container['templates'] = isset($data['templates']) ? $data['templates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIncidentActionAllowableValues();
        if (!is_null($this->container['incident_action']) && !in_array($this->container['incident_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'incident_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_scenario_id
     *
     * @return string
     */
    public function getCustomScenarioId()
    {
        return $this->container['custom_scenario_id'];
    }

    /**
     * Sets custom_scenario_id
     *
     * @param string $custom_scenario_id custom_scenario_id
     *
     * @return $this
     */
    public function setCustomScenarioId($custom_scenario_id)
    {
        $this->container['custom_scenario_id'] = $custom_scenario_id;

        return $this;
    }

    /**
     * Gets enable_message_truncate
     *
     * @return bool
     */
    public function getEnableMessageTruncate()
    {
        return $this->container['enable_message_truncate'];
    }

    /**
     * Sets enable_message_truncate
     *
     * @param bool $enable_message_truncate enable_message_truncate
     *
     * @return $this
     */
    public function setEnableMessageTruncate($enable_message_truncate)
    {
        $this->container['enable_message_truncate'] = $enable_message_truncate;

        return $this;
    }

    /**
     * Gets form_variables
     *
     * @return \Swagger\Client\Model\FormVariableItem[]
     */
    public function getFormVariables()
    {
        return $this->container['form_variables'];
    }

    /**
     * Sets form_variables
     *
     * @param \Swagger\Client\Model\FormVariableItem[] $form_variables form_variables
     *
     * @return $this
     */
    public function setFormVariables($form_variables)
    {
        $this->container['form_variables'] = $form_variables;

        return $this;
    }

    /**
     * Gets incident_action
     *
     * @return string
     */
    public function getIncidentAction()
    {
        return $this->container['incident_action'];
    }

    /**
     * Sets incident_action
     *
     * @param string $incident_action incident_action
     *
     * @return $this
     */
    public function setIncidentAction($incident_action)
    {
        $allowedValues = $this->getIncidentActionAllowableValues();
        if (!is_null($incident_action) && !in_array($incident_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'incident_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incident_action'] = $incident_action;

        return $this;
    }

    /**
     * Gets incident_name
     *
     * @return string
     */
    public function getIncidentName()
    {
        return $this->container['incident_name'];
    }

    /**
     * Sets incident_name
     *
     * @param string $incident_name incident_name
     *
     * @return $this
     */
    public function setIncidentName($incident_name)
    {
        $this->container['incident_name'] = $incident_name;

        return $this;
    }

    /**
     * Gets incident_notification_property_bag
     *
     * @return map[string,string]
     */
    public function getIncidentNotificationPropertyBag()
    {
        return $this->container['incident_notification_property_bag'];
    }

    /**
     * Sets incident_notification_property_bag
     *
     * @param map[string,string] $incident_notification_property_bag incident_notification_property_bag
     *
     * @return $this
     */
    public function setIncidentNotificationPropertyBag($incident_notification_property_bag)
    {
        $this->container['incident_notification_property_bag'] = $incident_notification_property_bag;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pin_code
     *
     * @return string
     */
    public function getPinCode()
    {
        return $this->container['pin_code'];
    }

    /**
     * Sets pin_code
     *
     * @param string $pin_code pin_code
     *
     * @return $this
     */
    public function setPinCode($pin_code)
    {
        $this->container['pin_code'] = $pin_code;

        return $this;
    }

    /**
     * Gets push_custom_fields
     *
     * @return map[string,string]
     */
    public function getPushCustomFields()
    {
        return $this->container['push_custom_fields'];
    }

    /**
     * Sets push_custom_fields
     *
     * @param map[string,string] $push_custom_fields push_custom_fields
     *
     * @return $this
     */
    public function setPushCustomFields($push_custom_fields)
    {
        $this->container['push_custom_fields'] = $push_custom_fields;

        return $this;
    }

    /**
     * Gets scenario_id
     *
     * @return int
     */
    public function getScenarioId()
    {
        return $this->container['scenario_id'];
    }

    /**
     * Sets scenario_id
     *
     * @param int $scenario_id scenario_id
     *
     * @return $this
     */
    public function setScenarioId($scenario_id)
    {
        $this->container['scenario_id'] = $scenario_id;

        return $this;
    }

    /**
     * Gets skip_variable_required_check
     *
     * @return bool
     */
    public function getSkipVariableRequiredCheck()
    {
        return $this->container['skip_variable_required_check'];
    }

    /**
     * Sets skip_variable_required_check
     *
     * @param bool $skip_variable_required_check skip_variable_required_check
     *
     * @return $this
     */
    public function setSkipVariableRequiredCheck($skip_variable_required_check)
    {
        $this->container['skip_variable_required_check'] = $skip_variable_required_check;

        return $this;
    }

    /**
     * Gets template_ids
     *
     * @return int[]
     */
    public function getTemplateIds()
    {
        return $this->container['template_ids'];
    }

    /**
     * Sets template_ids
     *
     * @param int[] $template_ids template_ids
     *
     * @return $this
     */
    public function setTemplateIds($template_ids)
    {
        $this->container['template_ids'] = $template_ids;

        return $this;
    }

    /**
     * Gets templates
     *
     * @return \Swagger\Client\Model\IncidentTemplateBO[]
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     *
     * @param \Swagger\Client\Model\IncidentTemplateBO[] $templates templates
     *
     * @return $this
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


