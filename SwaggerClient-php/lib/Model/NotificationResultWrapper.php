<?php
/**
 * NotificationResultWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NotificationResultWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationResultWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationResultWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'all_details' => '\Swagger\Client\Model\NotificationReportLogWrapper[]',
        'confirmed_count' => 'int',
        'confirmed_late_count' => 'int',
        'not_confirmed_count' => 'int',
        'notification_id' => 'int',
        'polling_details' => '\Swagger\Client\Model\NotificationPollingDetailWrapper[]',
        'total_count' => 'int',
        'unreachable_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'all_details' => null,
        'confirmed_count' => 'int64',
        'confirmed_late_count' => 'int64',
        'not_confirmed_count' => 'int64',
        'notification_id' => 'int64',
        'polling_details' => null,
        'total_count' => 'int64',
        'unreachable_count' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all_details' => 'allDetails',
        'confirmed_count' => 'confirmedCount',
        'confirmed_late_count' => 'confirmedLateCount',
        'not_confirmed_count' => 'notConfirmedCount',
        'notification_id' => 'notificationId',
        'polling_details' => 'pollingDetails',
        'total_count' => 'totalCount',
        'unreachable_count' => 'unreachableCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all_details' => 'setAllDetails',
        'confirmed_count' => 'setConfirmedCount',
        'confirmed_late_count' => 'setConfirmedLateCount',
        'not_confirmed_count' => 'setNotConfirmedCount',
        'notification_id' => 'setNotificationId',
        'polling_details' => 'setPollingDetails',
        'total_count' => 'setTotalCount',
        'unreachable_count' => 'setUnreachableCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all_details' => 'getAllDetails',
        'confirmed_count' => 'getConfirmedCount',
        'confirmed_late_count' => 'getConfirmedLateCount',
        'not_confirmed_count' => 'getNotConfirmedCount',
        'notification_id' => 'getNotificationId',
        'polling_details' => 'getPollingDetails',
        'total_count' => 'getTotalCount',
        'unreachable_count' => 'getUnreachableCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['all_details'] = isset($data['all_details']) ? $data['all_details'] : null;
        $this->container['confirmed_count'] = isset($data['confirmed_count']) ? $data['confirmed_count'] : null;
        $this->container['confirmed_late_count'] = isset($data['confirmed_late_count']) ? $data['confirmed_late_count'] : null;
        $this->container['not_confirmed_count'] = isset($data['not_confirmed_count']) ? $data['not_confirmed_count'] : null;
        $this->container['notification_id'] = isset($data['notification_id']) ? $data['notification_id'] : null;
        $this->container['polling_details'] = isset($data['polling_details']) ? $data['polling_details'] : null;
        $this->container['total_count'] = isset($data['total_count']) ? $data['total_count'] : null;
        $this->container['unreachable_count'] = isset($data['unreachable_count']) ? $data['unreachable_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all_details
     *
     * @return \Swagger\Client\Model\NotificationReportLogWrapper[]
     */
    public function getAllDetails()
    {
        return $this->container['all_details'];
    }

    /**
     * Sets all_details
     *
     * @param \Swagger\Client\Model\NotificationReportLogWrapper[] $all_details all_details
     *
     * @return $this
     */
    public function setAllDetails($all_details)
    {
        $this->container['all_details'] = $all_details;

        return $this;
    }

    /**
     * Gets confirmed_count
     *
     * @return int
     */
    public function getConfirmedCount()
    {
        return $this->container['confirmed_count'];
    }

    /**
     * Sets confirmed_count
     *
     * @param int $confirmed_count confirmed_count
     *
     * @return $this
     */
    public function setConfirmedCount($confirmed_count)
    {
        $this->container['confirmed_count'] = $confirmed_count;

        return $this;
    }

    /**
     * Gets confirmed_late_count
     *
     * @return int
     */
    public function getConfirmedLateCount()
    {
        return $this->container['confirmed_late_count'];
    }

    /**
     * Sets confirmed_late_count
     *
     * @param int $confirmed_late_count confirmed_late_count
     *
     * @return $this
     */
    public function setConfirmedLateCount($confirmed_late_count)
    {
        $this->container['confirmed_late_count'] = $confirmed_late_count;

        return $this;
    }

    /**
     * Gets not_confirmed_count
     *
     * @return int
     */
    public function getNotConfirmedCount()
    {
        return $this->container['not_confirmed_count'];
    }

    /**
     * Sets not_confirmed_count
     *
     * @param int $not_confirmed_count not_confirmed_count
     *
     * @return $this
     */
    public function setNotConfirmedCount($not_confirmed_count)
    {
        $this->container['not_confirmed_count'] = $not_confirmed_count;

        return $this;
    }

    /**
     * Gets notification_id
     *
     * @return int
     */
    public function getNotificationId()
    {
        return $this->container['notification_id'];
    }

    /**
     * Sets notification_id
     *
     * @param int $notification_id notification_id
     *
     * @return $this
     */
    public function setNotificationId($notification_id)
    {
        $this->container['notification_id'] = $notification_id;

        return $this;
    }

    /**
     * Gets polling_details
     *
     * @return \Swagger\Client\Model\NotificationPollingDetailWrapper[]
     */
    public function getPollingDetails()
    {
        return $this->container['polling_details'];
    }

    /**
     * Sets polling_details
     *
     * @param \Swagger\Client\Model\NotificationPollingDetailWrapper[] $polling_details polling_details
     *
     * @return $this
     */
    public function setPollingDetails($polling_details)
    {
        $this->container['polling_details'] = $polling_details;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int $total_count total_count
     *
     * @return $this
     */
    public function setTotalCount($total_count)
    {
        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets unreachable_count
     *
     * @return int
     */
    public function getUnreachableCount()
    {
        return $this->container['unreachable_count'];
    }

    /**
     * Sets unreachable_count
     *
     * @param int $unreachable_count unreachable_count
     *
     * @return $this
     */
    public function setUnreachableCount($unreachable_count)
    {
        $this->container['unreachable_count'] = $unreachable_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


