<?php
/**
 * OrganizationBroadcastSettingWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationBroadcastSettingWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationBroadcastSettingWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationBroadcastSettingWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'confirm_flag' => 'bool',
        'cycle_interval' => 'int',
        'default_cycles' => 'int',
        'duplicate_paths_flag' => 'bool',
        'emergency_duration' => 'int',
        'emergency_priority' => 'int',
        'enable_imminent_threat_to_life' => 'bool',
        'enable_verify_pin' => 'bool',
        'expose_sender_id' => 'bool',
        'launch_by_phone_flag' => 'int',
        'max_cycles' => 'int',
        'path_interval' => 'int',
        'require_security_code_flag' => 'bool',
        'standard_duration' => 'int',
        'standard_priority' => 'int',
        'use_external_id_flag' => 'bool',
        'vm_preference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'confirm_flag' => null,
        'cycle_interval' => 'int32',
        'default_cycles' => 'int32',
        'duplicate_paths_flag' => null,
        'emergency_duration' => 'int32',
        'emergency_priority' => 'int32',
        'enable_imminent_threat_to_life' => null,
        'enable_verify_pin' => null,
        'expose_sender_id' => null,
        'launch_by_phone_flag' => 'int32',
        'max_cycles' => 'int32',
        'path_interval' => 'int32',
        'require_security_code_flag' => null,
        'standard_duration' => 'int32',
        'standard_priority' => 'int32',
        'use_external_id_flag' => null,
        'vm_preference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'confirm_flag' => 'confirmFlag',
        'cycle_interval' => 'cycleInterval',
        'default_cycles' => 'defaultCycles',
        'duplicate_paths_flag' => 'duplicatePathsFlag',
        'emergency_duration' => 'emergencyDuration',
        'emergency_priority' => 'emergencyPriority',
        'enable_imminent_threat_to_life' => 'enableImminentThreatToLife',
        'enable_verify_pin' => 'enableVerifyPin',
        'expose_sender_id' => 'exposeSenderID',
        'launch_by_phone_flag' => 'launchByPhoneFlag',
        'max_cycles' => 'maxCycles',
        'path_interval' => 'pathInterval',
        'require_security_code_flag' => 'requireSecurityCodeFlag',
        'standard_duration' => 'standardDuration',
        'standard_priority' => 'standardPriority',
        'use_external_id_flag' => 'useExternalIdFlag',
        'vm_preference' => 'vmPreference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'confirm_flag' => 'setConfirmFlag',
        'cycle_interval' => 'setCycleInterval',
        'default_cycles' => 'setDefaultCycles',
        'duplicate_paths_flag' => 'setDuplicatePathsFlag',
        'emergency_duration' => 'setEmergencyDuration',
        'emergency_priority' => 'setEmergencyPriority',
        'enable_imminent_threat_to_life' => 'setEnableImminentThreatToLife',
        'enable_verify_pin' => 'setEnableVerifyPin',
        'expose_sender_id' => 'setExposeSenderId',
        'launch_by_phone_flag' => 'setLaunchByPhoneFlag',
        'max_cycles' => 'setMaxCycles',
        'path_interval' => 'setPathInterval',
        'require_security_code_flag' => 'setRequireSecurityCodeFlag',
        'standard_duration' => 'setStandardDuration',
        'standard_priority' => 'setStandardPriority',
        'use_external_id_flag' => 'setUseExternalIdFlag',
        'vm_preference' => 'setVmPreference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'confirm_flag' => 'getConfirmFlag',
        'cycle_interval' => 'getCycleInterval',
        'default_cycles' => 'getDefaultCycles',
        'duplicate_paths_flag' => 'getDuplicatePathsFlag',
        'emergency_duration' => 'getEmergencyDuration',
        'emergency_priority' => 'getEmergencyPriority',
        'enable_imminent_threat_to_life' => 'getEnableImminentThreatToLife',
        'enable_verify_pin' => 'getEnableVerifyPin',
        'expose_sender_id' => 'getExposeSenderId',
        'launch_by_phone_flag' => 'getLaunchByPhoneFlag',
        'max_cycles' => 'getMaxCycles',
        'path_interval' => 'getPathInterval',
        'require_security_code_flag' => 'getRequireSecurityCodeFlag',
        'standard_duration' => 'getStandardDuration',
        'standard_priority' => 'getStandardPriority',
        'use_external_id_flag' => 'getUseExternalIdFlag',
        'vm_preference' => 'getVmPreference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VM_PREFERENCE_NO_MESSAGE = 'NO_MESSAGE';
    const VM_PREFERENCE_MESSAGE_ONLY = 'MESSAGE_ONLY';
    const VM_PREFERENCE_MESSAGE_WITH_CONFIRMATION = 'MESSAGE_WITH_CONFIRMATION';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVmPreferenceAllowableValues()
    {
        return [
            self::VM_PREFERENCE_NO_MESSAGE,
            self::VM_PREFERENCE_MESSAGE_ONLY,
            self::VM_PREFERENCE_MESSAGE_WITH_CONFIRMATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['confirm_flag'] = isset($data['confirm_flag']) ? $data['confirm_flag'] : null;
        $this->container['cycle_interval'] = isset($data['cycle_interval']) ? $data['cycle_interval'] : null;
        $this->container['default_cycles'] = isset($data['default_cycles']) ? $data['default_cycles'] : null;
        $this->container['duplicate_paths_flag'] = isset($data['duplicate_paths_flag']) ? $data['duplicate_paths_flag'] : null;
        $this->container['emergency_duration'] = isset($data['emergency_duration']) ? $data['emergency_duration'] : null;
        $this->container['emergency_priority'] = isset($data['emergency_priority']) ? $data['emergency_priority'] : null;
        $this->container['enable_imminent_threat_to_life'] = isset($data['enable_imminent_threat_to_life']) ? $data['enable_imminent_threat_to_life'] : null;
        $this->container['enable_verify_pin'] = isset($data['enable_verify_pin']) ? $data['enable_verify_pin'] : null;
        $this->container['expose_sender_id'] = isset($data['expose_sender_id']) ? $data['expose_sender_id'] : null;
        $this->container['launch_by_phone_flag'] = isset($data['launch_by_phone_flag']) ? $data['launch_by_phone_flag'] : null;
        $this->container['max_cycles'] = isset($data['max_cycles']) ? $data['max_cycles'] : null;
        $this->container['path_interval'] = isset($data['path_interval']) ? $data['path_interval'] : null;
        $this->container['require_security_code_flag'] = isset($data['require_security_code_flag']) ? $data['require_security_code_flag'] : null;
        $this->container['standard_duration'] = isset($data['standard_duration']) ? $data['standard_duration'] : null;
        $this->container['standard_priority'] = isset($data['standard_priority']) ? $data['standard_priority'] : null;
        $this->container['use_external_id_flag'] = isset($data['use_external_id_flag']) ? $data['use_external_id_flag'] : null;
        $this->container['vm_preference'] = isset($data['vm_preference']) ? $data['vm_preference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVmPreferenceAllowableValues();
        if (!is_null($this->container['vm_preference']) && !in_array($this->container['vm_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vm_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets confirm_flag
     *
     * @return bool
     */
    public function getConfirmFlag()
    {
        return $this->container['confirm_flag'];
    }

    /**
     * Sets confirm_flag
     *
     * @param bool $confirm_flag confirm_flag
     *
     * @return $this
     */
    public function setConfirmFlag($confirm_flag)
    {
        $this->container['confirm_flag'] = $confirm_flag;

        return $this;
    }

    /**
     * Gets cycle_interval
     *
     * @return int
     */
    public function getCycleInterval()
    {
        return $this->container['cycle_interval'];
    }

    /**
     * Sets cycle_interval
     *
     * @param int $cycle_interval cycle_interval
     *
     * @return $this
     */
    public function setCycleInterval($cycle_interval)
    {
        $this->container['cycle_interval'] = $cycle_interval;

        return $this;
    }

    /**
     * Gets default_cycles
     *
     * @return int
     */
    public function getDefaultCycles()
    {
        return $this->container['default_cycles'];
    }

    /**
     * Sets default_cycles
     *
     * @param int $default_cycles default_cycles
     *
     * @return $this
     */
    public function setDefaultCycles($default_cycles)
    {
        $this->container['default_cycles'] = $default_cycles;

        return $this;
    }

    /**
     * Gets duplicate_paths_flag
     *
     * @return bool
     */
    public function getDuplicatePathsFlag()
    {
        return $this->container['duplicate_paths_flag'];
    }

    /**
     * Sets duplicate_paths_flag
     *
     * @param bool $duplicate_paths_flag duplicate_paths_flag
     *
     * @return $this
     */
    public function setDuplicatePathsFlag($duplicate_paths_flag)
    {
        $this->container['duplicate_paths_flag'] = $duplicate_paths_flag;

        return $this;
    }

    /**
     * Gets emergency_duration
     *
     * @return int
     */
    public function getEmergencyDuration()
    {
        return $this->container['emergency_duration'];
    }

    /**
     * Sets emergency_duration
     *
     * @param int $emergency_duration emergency_duration
     *
     * @return $this
     */
    public function setEmergencyDuration($emergency_duration)
    {
        $this->container['emergency_duration'] = $emergency_duration;

        return $this;
    }

    /**
     * Gets emergency_priority
     *
     * @return int
     */
    public function getEmergencyPriority()
    {
        return $this->container['emergency_priority'];
    }

    /**
     * Sets emergency_priority
     *
     * @param int $emergency_priority emergency_priority
     *
     * @return $this
     */
    public function setEmergencyPriority($emergency_priority)
    {
        $this->container['emergency_priority'] = $emergency_priority;

        return $this;
    }

    /**
     * Gets enable_imminent_threat_to_life
     *
     * @return bool
     */
    public function getEnableImminentThreatToLife()
    {
        return $this->container['enable_imminent_threat_to_life'];
    }

    /**
     * Sets enable_imminent_threat_to_life
     *
     * @param bool $enable_imminent_threat_to_life enable_imminent_threat_to_life
     *
     * @return $this
     */
    public function setEnableImminentThreatToLife($enable_imminent_threat_to_life)
    {
        $this->container['enable_imminent_threat_to_life'] = $enable_imminent_threat_to_life;

        return $this;
    }

    /**
     * Gets enable_verify_pin
     *
     * @return bool
     */
    public function getEnableVerifyPin()
    {
        return $this->container['enable_verify_pin'];
    }

    /**
     * Sets enable_verify_pin
     *
     * @param bool $enable_verify_pin enable_verify_pin
     *
     * @return $this
     */
    public function setEnableVerifyPin($enable_verify_pin)
    {
        $this->container['enable_verify_pin'] = $enable_verify_pin;

        return $this;
    }

    /**
     * Gets expose_sender_id
     *
     * @return bool
     */
    public function getExposeSenderId()
    {
        return $this->container['expose_sender_id'];
    }

    /**
     * Sets expose_sender_id
     *
     * @param bool $expose_sender_id expose_sender_id
     *
     * @return $this
     */
    public function setExposeSenderId($expose_sender_id)
    {
        $this->container['expose_sender_id'] = $expose_sender_id;

        return $this;
    }

    /**
     * Gets launch_by_phone_flag
     *
     * @return int
     */
    public function getLaunchByPhoneFlag()
    {
        return $this->container['launch_by_phone_flag'];
    }

    /**
     * Sets launch_by_phone_flag
     *
     * @param int $launch_by_phone_flag launch_by_phone_flag
     *
     * @return $this
     */
    public function setLaunchByPhoneFlag($launch_by_phone_flag)
    {
        $this->container['launch_by_phone_flag'] = $launch_by_phone_flag;

        return $this;
    }

    /**
     * Gets max_cycles
     *
     * @return int
     */
    public function getMaxCycles()
    {
        return $this->container['max_cycles'];
    }

    /**
     * Sets max_cycles
     *
     * @param int $max_cycles max_cycles
     *
     * @return $this
     */
    public function setMaxCycles($max_cycles)
    {
        $this->container['max_cycles'] = $max_cycles;

        return $this;
    }

    /**
     * Gets path_interval
     *
     * @return int
     */
    public function getPathInterval()
    {
        return $this->container['path_interval'];
    }

    /**
     * Sets path_interval
     *
     * @param int $path_interval path_interval
     *
     * @return $this
     */
    public function setPathInterval($path_interval)
    {
        $this->container['path_interval'] = $path_interval;

        return $this;
    }

    /**
     * Gets require_security_code_flag
     *
     * @return bool
     */
    public function getRequireSecurityCodeFlag()
    {
        return $this->container['require_security_code_flag'];
    }

    /**
     * Sets require_security_code_flag
     *
     * @param bool $require_security_code_flag require_security_code_flag
     *
     * @return $this
     */
    public function setRequireSecurityCodeFlag($require_security_code_flag)
    {
        $this->container['require_security_code_flag'] = $require_security_code_flag;

        return $this;
    }

    /**
     * Gets standard_duration
     *
     * @return int
     */
    public function getStandardDuration()
    {
        return $this->container['standard_duration'];
    }

    /**
     * Sets standard_duration
     *
     * @param int $standard_duration standard_duration
     *
     * @return $this
     */
    public function setStandardDuration($standard_duration)
    {
        $this->container['standard_duration'] = $standard_duration;

        return $this;
    }

    /**
     * Gets standard_priority
     *
     * @return int
     */
    public function getStandardPriority()
    {
        return $this->container['standard_priority'];
    }

    /**
     * Sets standard_priority
     *
     * @param int $standard_priority standard_priority
     *
     * @return $this
     */
    public function setStandardPriority($standard_priority)
    {
        $this->container['standard_priority'] = $standard_priority;

        return $this;
    }

    /**
     * Gets use_external_id_flag
     *
     * @return bool
     */
    public function getUseExternalIdFlag()
    {
        return $this->container['use_external_id_flag'];
    }

    /**
     * Sets use_external_id_flag
     *
     * @param bool $use_external_id_flag use_external_id_flag
     *
     * @return $this
     */
    public function setUseExternalIdFlag($use_external_id_flag)
    {
        $this->container['use_external_id_flag'] = $use_external_id_flag;

        return $this;
    }

    /**
     * Gets vm_preference
     *
     * @return string
     */
    public function getVmPreference()
    {
        return $this->container['vm_preference'];
    }

    /**
     * Sets vm_preference
     *
     * @param string $vm_preference vm_preference
     *
     * @return $this
     */
    public function setVmPreference($vm_preference)
    {
        $allowedValues = $this->getVmPreferenceAllowableValues();
        if (!is_null($vm_preference) && !in_array($vm_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vm_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vm_preference'] = $vm_preference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


