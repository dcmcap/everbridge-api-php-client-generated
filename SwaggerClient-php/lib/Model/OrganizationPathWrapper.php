<?php
/**
 * OrganizationPathWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationPathWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationPathWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationPathWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'aware_path_id' => 'int',
        'code' => 'string',
        'confirm_type' => 'string',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'created_proxy_name' => 'string',
        'default' => 'bool',
        'display_flag' => 'bool',
        'editable' => 'bool',
        'expose' => 'bool',
        'ext_flag' => 'string',
        'ext_prompt' => 'string',
        'ext_required' => 'bool',
        'ext_value' => 'string',
        'format_flag' => 'string',
        'id' => 'int',
        'is_default' => 'bool',
        'last_modified_date' => '\DateTime',
        'last_modified_id' => 'int',
        'last_modified_name' => 'string',
        'last_modified_proxy_name' => 'string',
        'mandatory' => 'bool',
        'message_code' => 'string',
        'organization_id' => 'int',
        'path_delivery_type' => 'string',
        'path_flag' => 'int',
        'path_id' => 'int',
        'path_type' => 'string',
        'prompt' => 'string',
        'resource_bundle_id' => 'int',
        'seq' => 'int',
        'status' => 'string',
        'sys_prompt' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'aware_path_id' => 'int32',
        'code' => null,
        'confirm_type' => null,
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'created_proxy_name' => null,
        'default' => null,
        'display_flag' => null,
        'editable' => null,
        'expose' => null,
        'ext_flag' => null,
        'ext_prompt' => null,
        'ext_required' => null,
        'ext_value' => null,
        'format_flag' => null,
        'id' => 'int64',
        'is_default' => null,
        'last_modified_date' => 'date-time',
        'last_modified_id' => 'int64',
        'last_modified_name' => null,
        'last_modified_proxy_name' => null,
        'mandatory' => null,
        'message_code' => null,
        'organization_id' => 'int64',
        'path_delivery_type' => null,
        'path_flag' => 'int64',
        'path_id' => 'int64',
        'path_type' => null,
        'prompt' => null,
        'resource_bundle_id' => 'int64',
        'seq' => 'int32',
        'status' => null,
        'sys_prompt' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'aware_path_id' => 'awarePathId',
        'code' => 'code',
        'confirm_type' => 'confirmType',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'created_proxy_name' => 'createdProxyName',
        'default' => 'default',
        'display_flag' => 'displayFlag',
        'editable' => 'editable',
        'expose' => 'expose',
        'ext_flag' => 'extFlag',
        'ext_prompt' => 'extPrompt',
        'ext_required' => 'extRequired',
        'ext_value' => 'extValue',
        'format_flag' => 'formatFlag',
        'id' => 'id',
        'is_default' => 'isDefault',
        'last_modified_date' => 'lastModifiedDate',
        'last_modified_id' => 'lastModifiedId',
        'last_modified_name' => 'lastModifiedName',
        'last_modified_proxy_name' => 'lastModifiedProxyName',
        'mandatory' => 'mandatory',
        'message_code' => 'messageCode',
        'organization_id' => 'organizationId',
        'path_delivery_type' => 'pathDeliveryType',
        'path_flag' => 'pathFlag',
        'path_id' => 'pathId',
        'path_type' => 'pathType',
        'prompt' => 'prompt',
        'resource_bundle_id' => 'resourceBundleId',
        'seq' => 'seq',
        'status' => 'status',
        'sys_prompt' => 'sysPrompt',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'aware_path_id' => 'setAwarePathId',
        'code' => 'setCode',
        'confirm_type' => 'setConfirmType',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'created_proxy_name' => 'setCreatedProxyName',
        'default' => 'setDefault',
        'display_flag' => 'setDisplayFlag',
        'editable' => 'setEditable',
        'expose' => 'setExpose',
        'ext_flag' => 'setExtFlag',
        'ext_prompt' => 'setExtPrompt',
        'ext_required' => 'setExtRequired',
        'ext_value' => 'setExtValue',
        'format_flag' => 'setFormatFlag',
        'id' => 'setId',
        'is_default' => 'setIsDefault',
        'last_modified_date' => 'setLastModifiedDate',
        'last_modified_id' => 'setLastModifiedId',
        'last_modified_name' => 'setLastModifiedName',
        'last_modified_proxy_name' => 'setLastModifiedProxyName',
        'mandatory' => 'setMandatory',
        'message_code' => 'setMessageCode',
        'organization_id' => 'setOrganizationId',
        'path_delivery_type' => 'setPathDeliveryType',
        'path_flag' => 'setPathFlag',
        'path_id' => 'setPathId',
        'path_type' => 'setPathType',
        'prompt' => 'setPrompt',
        'resource_bundle_id' => 'setResourceBundleId',
        'seq' => 'setSeq',
        'status' => 'setStatus',
        'sys_prompt' => 'setSysPrompt',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'aware_path_id' => 'getAwarePathId',
        'code' => 'getCode',
        'confirm_type' => 'getConfirmType',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'created_proxy_name' => 'getCreatedProxyName',
        'default' => 'getDefault',
        'display_flag' => 'getDisplayFlag',
        'editable' => 'getEditable',
        'expose' => 'getExpose',
        'ext_flag' => 'getExtFlag',
        'ext_prompt' => 'getExtPrompt',
        'ext_required' => 'getExtRequired',
        'ext_value' => 'getExtValue',
        'format_flag' => 'getFormatFlag',
        'id' => 'getId',
        'is_default' => 'getIsDefault',
        'last_modified_date' => 'getLastModifiedDate',
        'last_modified_id' => 'getLastModifiedId',
        'last_modified_name' => 'getLastModifiedName',
        'last_modified_proxy_name' => 'getLastModifiedProxyName',
        'mandatory' => 'getMandatory',
        'message_code' => 'getMessageCode',
        'organization_id' => 'getOrganizationId',
        'path_delivery_type' => 'getPathDeliveryType',
        'path_flag' => 'getPathFlag',
        'path_id' => 'getPathId',
        'path_type' => 'getPathType',
        'prompt' => 'getPrompt',
        'resource_bundle_id' => 'getResourceBundleId',
        'seq' => 'getSeq',
        'status' => 'getStatus',
        'sys_prompt' => 'getSysPrompt',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONFIRM_TYPE_REPLY_TO = 'REPLY_TO';
    const CONFIRM_TYPE_PHONE = 'PHONE';
    const CONFIRM_TYPE_HTTP = 'HTTP';
    const EXT_FLAG_Y = 'Y';
    const EXT_FLAG_N = 'N';
    const EXT_PROMPT_PIN = 'Pin';
    const EXT_PROMPT_EXT = 'Ext';
    const EXT_PROMPT_PROVIDER = 'Provider';
    const EXT_PROMPT_SYSTEM = 'System';
    const FORMAT_FLAG_P = 'P';
    const FORMAT_FLAG_N = 'N';
    const FORMAT_FLAG_E = 'E';
    const MESSAGE_CODE_P = 'P';
    const MESSAGE_CODE_T = 'T';
    const MESSAGE_CODE_E = 'E';
    const MESSAGE_CODE_F = 'F';
    const PATH_DELIVERY_TYPE_T = 'T';
    const PATH_TYPE_EMAIL = 'EMAIL';
    const PATH_TYPE_TTYTDD = 'TTYTDD';
    const PATH_TYPE_SMS = 'SMS';
    const PATH_TYPE_PHONE = 'PHONE';
    const PATH_TYPE_EXTPHONE = 'EXTPHONE';
    const PATH_TYPE_RECIP = 'RECIP';
    const PATH_TYPE_FAX = 'FAX';
    const PATH_TYPE_NUMERICPAGER = 'NUMERICPAGER';
    const PATH_TYPE_TAPPAGER = 'TAPPAGER';
    const PATH_TYPE_PLAINTEXTEMAIL = 'PLAINTEXTEMAIL';
    const PATH_TYPE_ONEWAYSMS = 'ONEWAYSMS';
    const PATH_TYPE_SECUREPUSH = 'SECUREPUSH';
    const PATH_TYPE_ONEBRIDGE = 'ONEBRIDGE';
    const STATUS_A = 'A';
    const STATUS_D = 'D';
    const TYPE_EMAIL = 'EMAIL';
    const TYPE_TA = 'TA';
    const TYPE_CALLIN = 'CALLIN';
    const TYPE_FAX = 'FAX';
    const TYPE_TTYTTD = 'TTYTTD';
    const TYPE_ALPHA = 'ALPHA';
    const TYPE_IM = 'IM';
    const TYPE_SMS = 'SMS';
    const TYPE_TELEX = 'TELEX';
    const TYPE_TTYTDD = 'TTYTDD';
    const TYPE_IPHONE = 'IPHONE';
    const TYPE_PHONE = 'PHONE';
    const TYPE_COMPACT = 'COMPACT';
    const TYPE_PAGER = 'PAGER';
    const TYPE_RECIP = 'RECIP';
    const TYPE_SECUREPUSH = 'SECUREPUSH';
    const TYPE_ONEBRIDGE = 'ONEBRIDGE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConfirmTypeAllowableValues()
    {
        return [
            self::CONFIRM_TYPE_REPLY_TO,
            self::CONFIRM_TYPE_PHONE,
            self::CONFIRM_TYPE_HTTP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtFlagAllowableValues()
    {
        return [
            self::EXT_FLAG_Y,
            self::EXT_FLAG_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtPromptAllowableValues()
    {
        return [
            self::EXT_PROMPT_PIN,
            self::EXT_PROMPT_EXT,
            self::EXT_PROMPT_PROVIDER,
            self::EXT_PROMPT_SYSTEM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatFlagAllowableValues()
    {
        return [
            self::FORMAT_FLAG_P,
            self::FORMAT_FLAG_N,
            self::FORMAT_FLAG_E,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageCodeAllowableValues()
    {
        return [
            self::MESSAGE_CODE_P,
            self::MESSAGE_CODE_T,
            self::MESSAGE_CODE_E,
            self::MESSAGE_CODE_F,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPathDeliveryTypeAllowableValues()
    {
        return [
            self::PATH_DELIVERY_TYPE_T,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPathTypeAllowableValues()
    {
        return [
            self::PATH_TYPE_EMAIL,
            self::PATH_TYPE_TTYTDD,
            self::PATH_TYPE_SMS,
            self::PATH_TYPE_PHONE,
            self::PATH_TYPE_EXTPHONE,
            self::PATH_TYPE_RECIP,
            self::PATH_TYPE_FAX,
            self::PATH_TYPE_NUMERICPAGER,
            self::PATH_TYPE_TAPPAGER,
            self::PATH_TYPE_PLAINTEXTEMAIL,
            self::PATH_TYPE_ONEWAYSMS,
            self::PATH_TYPE_SECUREPUSH,
            self::PATH_TYPE_ONEBRIDGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EMAIL,
            self::TYPE_TA,
            self::TYPE_CALLIN,
            self::TYPE_FAX,
            self::TYPE_TTYTTD,
            self::TYPE_ALPHA,
            self::TYPE_IM,
            self::TYPE_SMS,
            self::TYPE_TELEX,
            self::TYPE_TTYTDD,
            self::TYPE_IPHONE,
            self::TYPE_PHONE,
            self::TYPE_COMPACT,
            self::TYPE_PAGER,
            self::TYPE_RECIP,
            self::TYPE_SECUREPUSH,
            self::TYPE_ONEBRIDGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['aware_path_id'] = isset($data['aware_path_id']) ? $data['aware_path_id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['confirm_type'] = isset($data['confirm_type']) ? $data['confirm_type'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['created_proxy_name'] = isset($data['created_proxy_name']) ? $data['created_proxy_name'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['display_flag'] = isset($data['display_flag']) ? $data['display_flag'] : null;
        $this->container['editable'] = isset($data['editable']) ? $data['editable'] : null;
        $this->container['expose'] = isset($data['expose']) ? $data['expose'] : null;
        $this->container['ext_flag'] = isset($data['ext_flag']) ? $data['ext_flag'] : null;
        $this->container['ext_prompt'] = isset($data['ext_prompt']) ? $data['ext_prompt'] : null;
        $this->container['ext_required'] = isset($data['ext_required']) ? $data['ext_required'] : null;
        $this->container['ext_value'] = isset($data['ext_value']) ? $data['ext_value'] : null;
        $this->container['format_flag'] = isset($data['format_flag']) ? $data['format_flag'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_modified_id'] = isset($data['last_modified_id']) ? $data['last_modified_id'] : null;
        $this->container['last_modified_name'] = isset($data['last_modified_name']) ? $data['last_modified_name'] : null;
        $this->container['last_modified_proxy_name'] = isset($data['last_modified_proxy_name']) ? $data['last_modified_proxy_name'] : null;
        $this->container['mandatory'] = isset($data['mandatory']) ? $data['mandatory'] : null;
        $this->container['message_code'] = isset($data['message_code']) ? $data['message_code'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['path_delivery_type'] = isset($data['path_delivery_type']) ? $data['path_delivery_type'] : null;
        $this->container['path_flag'] = isset($data['path_flag']) ? $data['path_flag'] : null;
        $this->container['path_id'] = isset($data['path_id']) ? $data['path_id'] : null;
        $this->container['path_type'] = isset($data['path_type']) ? $data['path_type'] : null;
        $this->container['prompt'] = isset($data['prompt']) ? $data['prompt'] : null;
        $this->container['resource_bundle_id'] = isset($data['resource_bundle_id']) ? $data['resource_bundle_id'] : null;
        $this->container['seq'] = isset($data['seq']) ? $data['seq'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sys_prompt'] = isset($data['sys_prompt']) ? $data['sys_prompt'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getConfirmTypeAllowableValues();
        if (!is_null($this->container['confirm_type']) && !in_array($this->container['confirm_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'confirm_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtFlagAllowableValues();
        if (!is_null($this->container['ext_flag']) && !in_array($this->container['ext_flag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ext_flag', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExtPromptAllowableValues();
        if (!is_null($this->container['ext_prompt']) && !in_array($this->container['ext_prompt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ext_prompt', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFormatFlagAllowableValues();
        if (!is_null($this->container['format_flag']) && !in_array($this->container['format_flag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'format_flag', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageCodeAllowableValues();
        if (!is_null($this->container['message_code']) && !in_array($this->container['message_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'message_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPathDeliveryTypeAllowableValues();
        if (!is_null($this->container['path_delivery_type']) && !in_array($this->container['path_delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'path_delivery_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPathTypeAllowableValues();
        if (!is_null($this->container['path_type']) && !in_array($this->container['path_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'path_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets aware_path_id
     *
     * @return int
     */
    public function getAwarePathId()
    {
        return $this->container['aware_path_id'];
    }

    /**
     * Sets aware_path_id
     *
     * @param int $aware_path_id aware_path_id
     *
     * @return $this
     */
    public function setAwarePathId($aware_path_id)
    {
        $this->container['aware_path_id'] = $aware_path_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets confirm_type
     *
     * @return string
     */
    public function getConfirmType()
    {
        return $this->container['confirm_type'];
    }

    /**
     * Sets confirm_type
     *
     * @param string $confirm_type confirm_type
     *
     * @return $this
     */
    public function setConfirmType($confirm_type)
    {
        $allowedValues = $this->getConfirmTypeAllowableValues();
        if (!is_null($confirm_type) && !in_array($confirm_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'confirm_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['confirm_type'] = $confirm_type;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets created_proxy_name
     *
     * @return string
     */
    public function getCreatedProxyName()
    {
        return $this->container['created_proxy_name'];
    }

    /**
     * Sets created_proxy_name
     *
     * @param string $created_proxy_name created_proxy_name
     *
     * @return $this
     */
    public function setCreatedProxyName($created_proxy_name)
    {
        $this->container['created_proxy_name'] = $created_proxy_name;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool $default default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets display_flag
     *
     * @return bool
     */
    public function getDisplayFlag()
    {
        return $this->container['display_flag'];
    }

    /**
     * Sets display_flag
     *
     * @param bool $display_flag display_flag
     *
     * @return $this
     */
    public function setDisplayFlag($display_flag)
    {
        $this->container['display_flag'] = $display_flag;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool $editable editable
     *
     * @return $this
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets expose
     *
     * @return bool
     */
    public function getExpose()
    {
        return $this->container['expose'];
    }

    /**
     * Sets expose
     *
     * @param bool $expose expose
     *
     * @return $this
     */
    public function setExpose($expose)
    {
        $this->container['expose'] = $expose;

        return $this;
    }

    /**
     * Gets ext_flag
     *
     * @return string
     */
    public function getExtFlag()
    {
        return $this->container['ext_flag'];
    }

    /**
     * Sets ext_flag
     *
     * @param string $ext_flag ext_flag
     *
     * @return $this
     */
    public function setExtFlag($ext_flag)
    {
        $allowedValues = $this->getExtFlagAllowableValues();
        if (!is_null($ext_flag) && !in_array($ext_flag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ext_flag', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ext_flag'] = $ext_flag;

        return $this;
    }

    /**
     * Gets ext_prompt
     *
     * @return string
     */
    public function getExtPrompt()
    {
        return $this->container['ext_prompt'];
    }

    /**
     * Sets ext_prompt
     *
     * @param string $ext_prompt ext_prompt
     *
     * @return $this
     */
    public function setExtPrompt($ext_prompt)
    {
        $allowedValues = $this->getExtPromptAllowableValues();
        if (!is_null($ext_prompt) && !in_array($ext_prompt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ext_prompt', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ext_prompt'] = $ext_prompt;

        return $this;
    }

    /**
     * Gets ext_required
     *
     * @return bool
     */
    public function getExtRequired()
    {
        return $this->container['ext_required'];
    }

    /**
     * Sets ext_required
     *
     * @param bool $ext_required ext_required
     *
     * @return $this
     */
    public function setExtRequired($ext_required)
    {
        $this->container['ext_required'] = $ext_required;

        return $this;
    }

    /**
     * Gets ext_value
     *
     * @return string
     */
    public function getExtValue()
    {
        return $this->container['ext_value'];
    }

    /**
     * Sets ext_value
     *
     * @param string $ext_value ext_value
     *
     * @return $this
     */
    public function setExtValue($ext_value)
    {
        $this->container['ext_value'] = $ext_value;

        return $this;
    }

    /**
     * Gets format_flag
     *
     * @return string
     */
    public function getFormatFlag()
    {
        return $this->container['format_flag'];
    }

    /**
     * Sets format_flag
     *
     * @param string $format_flag format_flag
     *
     * @return $this
     */
    public function setFormatFlag($format_flag)
    {
        $allowedValues = $this->getFormatFlagAllowableValues();
        if (!is_null($format_flag) && !in_array($format_flag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'format_flag', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format_flag'] = $format_flag;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_modified_id
     *
     * @return int
     */
    public function getLastModifiedId()
    {
        return $this->container['last_modified_id'];
    }

    /**
     * Sets last_modified_id
     *
     * @param int $last_modified_id last_modified_id
     *
     * @return $this
     */
    public function setLastModifiedId($last_modified_id)
    {
        $this->container['last_modified_id'] = $last_modified_id;

        return $this;
    }

    /**
     * Gets last_modified_name
     *
     * @return string
     */
    public function getLastModifiedName()
    {
        return $this->container['last_modified_name'];
    }

    /**
     * Sets last_modified_name
     *
     * @param string $last_modified_name last_modified_name
     *
     * @return $this
     */
    public function setLastModifiedName($last_modified_name)
    {
        $this->container['last_modified_name'] = $last_modified_name;

        return $this;
    }

    /**
     * Gets last_modified_proxy_name
     *
     * @return string
     */
    public function getLastModifiedProxyName()
    {
        return $this->container['last_modified_proxy_name'];
    }

    /**
     * Sets last_modified_proxy_name
     *
     * @param string $last_modified_proxy_name last_modified_proxy_name
     *
     * @return $this
     */
    public function setLastModifiedProxyName($last_modified_proxy_name)
    {
        $this->container['last_modified_proxy_name'] = $last_modified_proxy_name;

        return $this;
    }

    /**
     * Gets mandatory
     *
     * @return bool
     */
    public function getMandatory()
    {
        return $this->container['mandatory'];
    }

    /**
     * Sets mandatory
     *
     * @param bool $mandatory mandatory
     *
     * @return $this
     */
    public function setMandatory($mandatory)
    {
        $this->container['mandatory'] = $mandatory;

        return $this;
    }

    /**
     * Gets message_code
     *
     * @return string
     */
    public function getMessageCode()
    {
        return $this->container['message_code'];
    }

    /**
     * Sets message_code
     *
     * @param string $message_code message_code
     *
     * @return $this
     */
    public function setMessageCode($message_code)
    {
        $allowedValues = $this->getMessageCodeAllowableValues();
        if (!is_null($message_code) && !in_array($message_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'message_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_code'] = $message_code;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets path_delivery_type
     *
     * @return string
     */
    public function getPathDeliveryType()
    {
        return $this->container['path_delivery_type'];
    }

    /**
     * Sets path_delivery_type
     *
     * @param string $path_delivery_type path_delivery_type
     *
     * @return $this
     */
    public function setPathDeliveryType($path_delivery_type)
    {
        $allowedValues = $this->getPathDeliveryTypeAllowableValues();
        if (!is_null($path_delivery_type) && !in_array($path_delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'path_delivery_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['path_delivery_type'] = $path_delivery_type;

        return $this;
    }

    /**
     * Gets path_flag
     *
     * @return int
     */
    public function getPathFlag()
    {
        return $this->container['path_flag'];
    }

    /**
     * Sets path_flag
     *
     * @param int $path_flag path_flag
     *
     * @return $this
     */
    public function setPathFlag($path_flag)
    {
        $this->container['path_flag'] = $path_flag;

        return $this;
    }

    /**
     * Gets path_id
     *
     * @return int
     */
    public function getPathId()
    {
        return $this->container['path_id'];
    }

    /**
     * Sets path_id
     *
     * @param int $path_id path_id
     *
     * @return $this
     */
    public function setPathId($path_id)
    {
        $this->container['path_id'] = $path_id;

        return $this;
    }

    /**
     * Gets path_type
     *
     * @return string
     */
    public function getPathType()
    {
        return $this->container['path_type'];
    }

    /**
     * Sets path_type
     *
     * @param string $path_type path_type
     *
     * @return $this
     */
    public function setPathType($path_type)
    {
        $allowedValues = $this->getPathTypeAllowableValues();
        if (!is_null($path_type) && !in_array($path_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'path_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['path_type'] = $path_type;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return string
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param string $prompt prompt
     *
     * @return $this
     */
    public function setPrompt($prompt)
    {
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets resource_bundle_id
     *
     * @return int
     */
    public function getResourceBundleId()
    {
        return $this->container['resource_bundle_id'];
    }

    /**
     * Sets resource_bundle_id
     *
     * @param int $resource_bundle_id resource_bundle_id
     *
     * @return $this
     */
    public function setResourceBundleId($resource_bundle_id)
    {
        $this->container['resource_bundle_id'] = $resource_bundle_id;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return int
     */
    public function getSeq()
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param int $seq seq
     *
     * @return $this
     */
    public function setSeq($seq)
    {
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sys_prompt
     *
     * @return string
     */
    public function getSysPrompt()
    {
        return $this->container['sys_prompt'];
    }

    /**
     * Sets sys_prompt
     *
     * @param string $sys_prompt sys_prompt
     *
     * @return $this
     */
    public function setSysPrompt($sys_prompt)
    {
        $this->container['sys_prompt'] = $sys_prompt;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


