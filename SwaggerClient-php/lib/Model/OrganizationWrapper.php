<?php
/**
 * OrganizationWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_disabled' => 'bool',
        'account_id' => 'int',
        'account_name' => 'string',
        'address' => '\Swagger\Client\Model\AddressWrapper',
        'admin_email' => 'string',
        'admin_name' => 'string',
        'admin_phone' => 'string',
        'allow_send_message' => 'bool',
        'allow_share_message' => 'bool',
        'aware_org_id' => 'int',
        'conference_bridge_permission' => 'bool',
        'contact_count' => 'int',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'created_proxy_name' => 'string',
        'data_center_id' => 'int',
        'dirty' => 'bool',
        'email' => 'string',
        'email_from_display' => 'string',
        'external_id_desc' => 'string',
        'feature_ids' => 'int[]',
        'gis_setting' => '\Swagger\Client\Model\GisSettingWrapper',
        'id' => 'int',
        'language' => 'int',
        'last_modified_date' => '\DateTime',
        'last_modified_id' => 'int',
        'last_modified_msg_by' => 'int',
        'last_modified_msg_date' => '\DateTime',
        'last_modified_name' => 'string',
        'last_modified_proxy_name' => 'string',
        'last_modified_time' => 'int',
        'last_synchronized_time' => 'int',
        'login_message' => 'string',
        'name' => 'string',
        'org_phone' => 'string',
        'organization_broadcast_setting' => '\Swagger\Client\Model\OrganizationBroadcastSettingWrapper',
        'organization_id' => 'int',
        'organization_status' => 'string',
        'password_refresh_days' => 'int',
        'processing_state' => '\Swagger\Client\Model\ProcessingStateWrapper',
        'product_ids' => 'int[]',
        'reply2_email_permission' => 'bool',
        'resource_bundle_id' => 'int',
        'role_ids' => 'int[]',
        'sender_caller_id_permission' => 'bool',
        'sender_email_info_permission' => 'bool',
        'sender_info_permission' => 'bool',
        'share_message_status' => 'bool',
        'short_id' => 'string',
        'show_message' => 'bool',
        'status' => 'string',
        'threshold_setting' => '\Swagger\Client\Model\ThresholdSettingWrapper',
        'throttle_setting' => '\Swagger\Client\Model\ThrottleSettingWrapper',
        'twitter_threshold_count' => 'int',
        'type' => 'string',
        'weather_provider' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_disabled' => null,
        'account_id' => 'int64',
        'account_name' => null,
        'address' => null,
        'admin_email' => null,
        'admin_name' => null,
        'admin_phone' => null,
        'allow_send_message' => null,
        'allow_share_message' => null,
        'aware_org_id' => 'int32',
        'conference_bridge_permission' => null,
        'contact_count' => 'int64',
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'created_proxy_name' => null,
        'data_center_id' => 'int64',
        'dirty' => null,
        'email' => null,
        'email_from_display' => null,
        'external_id_desc' => null,
        'feature_ids' => 'int64',
        'gis_setting' => null,
        'id' => 'int64',
        'language' => 'int64',
        'last_modified_date' => 'date-time',
        'last_modified_id' => 'int64',
        'last_modified_msg_by' => 'int64',
        'last_modified_msg_date' => 'date-time',
        'last_modified_name' => null,
        'last_modified_proxy_name' => null,
        'last_modified_time' => 'int64',
        'last_synchronized_time' => 'int64',
        'login_message' => null,
        'name' => null,
        'org_phone' => null,
        'organization_broadcast_setting' => null,
        'organization_id' => 'int64',
        'organization_status' => null,
        'password_refresh_days' => 'int32',
        'processing_state' => null,
        'product_ids' => 'int64',
        'reply2_email_permission' => null,
        'resource_bundle_id' => 'int64',
        'role_ids' => 'int64',
        'sender_caller_id_permission' => null,
        'sender_email_info_permission' => null,
        'sender_info_permission' => null,
        'share_message_status' => null,
        'short_id' => null,
        'show_message' => null,
        'status' => null,
        'threshold_setting' => null,
        'throttle_setting' => null,
        'twitter_threshold_count' => 'int64',
        'type' => null,
        'weather_provider' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_disabled' => 'accountDisabled',
        'account_id' => 'accountId',
        'account_name' => 'accountName',
        'address' => 'address',
        'admin_email' => 'adminEmail',
        'admin_name' => 'adminName',
        'admin_phone' => 'adminPhone',
        'allow_send_message' => 'allowSendMessage',
        'allow_share_message' => 'allowShareMessage',
        'aware_org_id' => 'awareOrgId',
        'conference_bridge_permission' => 'conferenceBridgePermission',
        'contact_count' => 'contactCount',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'created_proxy_name' => 'createdProxyName',
        'data_center_id' => 'dataCenterId',
        'dirty' => 'dirty',
        'email' => 'email',
        'email_from_display' => 'emailFromDisplay',
        'external_id_desc' => 'externalIdDesc',
        'feature_ids' => 'featureIds',
        'gis_setting' => 'gisSetting',
        'id' => 'id',
        'language' => 'language',
        'last_modified_date' => 'lastModifiedDate',
        'last_modified_id' => 'lastModifiedId',
        'last_modified_msg_by' => 'lastModifiedMsgBy',
        'last_modified_msg_date' => 'lastModifiedMsgDate',
        'last_modified_name' => 'lastModifiedName',
        'last_modified_proxy_name' => 'lastModifiedProxyName',
        'last_modified_time' => 'lastModifiedTime',
        'last_synchronized_time' => 'lastSynchronizedTime',
        'login_message' => 'loginMessage',
        'name' => 'name',
        'org_phone' => 'orgPhone',
        'organization_broadcast_setting' => 'organizationBroadcastSetting',
        'organization_id' => 'organizationId',
        'organization_status' => 'organizationStatus',
        'password_refresh_days' => 'passwordRefreshDays',
        'processing_state' => 'processingState',
        'product_ids' => 'productIds',
        'reply2_email_permission' => 'reply2EmailPermission',
        'resource_bundle_id' => 'resourceBundleId',
        'role_ids' => 'roleIds',
        'sender_caller_id_permission' => 'senderCallerIdPermission',
        'sender_email_info_permission' => 'senderEmailInfoPermission',
        'sender_info_permission' => 'senderInfoPermission',
        'share_message_status' => 'shareMessageStatus',
        'short_id' => 'shortId',
        'show_message' => 'showMessage',
        'status' => 'status',
        'threshold_setting' => 'thresholdSetting',
        'throttle_setting' => 'throttleSetting',
        'twitter_threshold_count' => 'twitterThresholdCount',
        'type' => 'type',
        'weather_provider' => 'weatherProvider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_disabled' => 'setAccountDisabled',
        'account_id' => 'setAccountId',
        'account_name' => 'setAccountName',
        'address' => 'setAddress',
        'admin_email' => 'setAdminEmail',
        'admin_name' => 'setAdminName',
        'admin_phone' => 'setAdminPhone',
        'allow_send_message' => 'setAllowSendMessage',
        'allow_share_message' => 'setAllowShareMessage',
        'aware_org_id' => 'setAwareOrgId',
        'conference_bridge_permission' => 'setConferenceBridgePermission',
        'contact_count' => 'setContactCount',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'created_proxy_name' => 'setCreatedProxyName',
        'data_center_id' => 'setDataCenterId',
        'dirty' => 'setDirty',
        'email' => 'setEmail',
        'email_from_display' => 'setEmailFromDisplay',
        'external_id_desc' => 'setExternalIdDesc',
        'feature_ids' => 'setFeatureIds',
        'gis_setting' => 'setGisSetting',
        'id' => 'setId',
        'language' => 'setLanguage',
        'last_modified_date' => 'setLastModifiedDate',
        'last_modified_id' => 'setLastModifiedId',
        'last_modified_msg_by' => 'setLastModifiedMsgBy',
        'last_modified_msg_date' => 'setLastModifiedMsgDate',
        'last_modified_name' => 'setLastModifiedName',
        'last_modified_proxy_name' => 'setLastModifiedProxyName',
        'last_modified_time' => 'setLastModifiedTime',
        'last_synchronized_time' => 'setLastSynchronizedTime',
        'login_message' => 'setLoginMessage',
        'name' => 'setName',
        'org_phone' => 'setOrgPhone',
        'organization_broadcast_setting' => 'setOrganizationBroadcastSetting',
        'organization_id' => 'setOrganizationId',
        'organization_status' => 'setOrganizationStatus',
        'password_refresh_days' => 'setPasswordRefreshDays',
        'processing_state' => 'setProcessingState',
        'product_ids' => 'setProductIds',
        'reply2_email_permission' => 'setReply2EmailPermission',
        'resource_bundle_id' => 'setResourceBundleId',
        'role_ids' => 'setRoleIds',
        'sender_caller_id_permission' => 'setSenderCallerIdPermission',
        'sender_email_info_permission' => 'setSenderEmailInfoPermission',
        'sender_info_permission' => 'setSenderInfoPermission',
        'share_message_status' => 'setShareMessageStatus',
        'short_id' => 'setShortId',
        'show_message' => 'setShowMessage',
        'status' => 'setStatus',
        'threshold_setting' => 'setThresholdSetting',
        'throttle_setting' => 'setThrottleSetting',
        'twitter_threshold_count' => 'setTwitterThresholdCount',
        'type' => 'setType',
        'weather_provider' => 'setWeatherProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_disabled' => 'getAccountDisabled',
        'account_id' => 'getAccountId',
        'account_name' => 'getAccountName',
        'address' => 'getAddress',
        'admin_email' => 'getAdminEmail',
        'admin_name' => 'getAdminName',
        'admin_phone' => 'getAdminPhone',
        'allow_send_message' => 'getAllowSendMessage',
        'allow_share_message' => 'getAllowShareMessage',
        'aware_org_id' => 'getAwareOrgId',
        'conference_bridge_permission' => 'getConferenceBridgePermission',
        'contact_count' => 'getContactCount',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'created_proxy_name' => 'getCreatedProxyName',
        'data_center_id' => 'getDataCenterId',
        'dirty' => 'getDirty',
        'email' => 'getEmail',
        'email_from_display' => 'getEmailFromDisplay',
        'external_id_desc' => 'getExternalIdDesc',
        'feature_ids' => 'getFeatureIds',
        'gis_setting' => 'getGisSetting',
        'id' => 'getId',
        'language' => 'getLanguage',
        'last_modified_date' => 'getLastModifiedDate',
        'last_modified_id' => 'getLastModifiedId',
        'last_modified_msg_by' => 'getLastModifiedMsgBy',
        'last_modified_msg_date' => 'getLastModifiedMsgDate',
        'last_modified_name' => 'getLastModifiedName',
        'last_modified_proxy_name' => 'getLastModifiedProxyName',
        'last_modified_time' => 'getLastModifiedTime',
        'last_synchronized_time' => 'getLastSynchronizedTime',
        'login_message' => 'getLoginMessage',
        'name' => 'getName',
        'org_phone' => 'getOrgPhone',
        'organization_broadcast_setting' => 'getOrganizationBroadcastSetting',
        'organization_id' => 'getOrganizationId',
        'organization_status' => 'getOrganizationStatus',
        'password_refresh_days' => 'getPasswordRefreshDays',
        'processing_state' => 'getProcessingState',
        'product_ids' => 'getProductIds',
        'reply2_email_permission' => 'getReply2EmailPermission',
        'resource_bundle_id' => 'getResourceBundleId',
        'role_ids' => 'getRoleIds',
        'sender_caller_id_permission' => 'getSenderCallerIdPermission',
        'sender_email_info_permission' => 'getSenderEmailInfoPermission',
        'sender_info_permission' => 'getSenderInfoPermission',
        'share_message_status' => 'getShareMessageStatus',
        'short_id' => 'getShortId',
        'show_message' => 'getShowMessage',
        'status' => 'getStatus',
        'threshold_setting' => 'getThresholdSetting',
        'throttle_setting' => 'getThrottleSetting',
        'twitter_threshold_count' => 'getTwitterThresholdCount',
        'type' => 'getType',
        'weather_provider' => 'getWeatherProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORGANIZATION_STATUS_ACTIVE = 'Active';
    const ORGANIZATION_STATUS_INACTIVE = 'Inactive';
    const STATUS_A = 'A';
    const STATUS_D = 'D';
    const WEATHER_PROVIDER_ACCUWEATHER = 'Accuweather';
    const WEATHER_PROVIDER_WDT = 'WDT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationStatusAllowableValues()
    {
        return [
            self::ORGANIZATION_STATUS_ACTIVE,
            self::ORGANIZATION_STATUS_INACTIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeatherProviderAllowableValues()
    {
        return [
            self::WEATHER_PROVIDER_ACCUWEATHER,
            self::WEATHER_PROVIDER_WDT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_disabled'] = isset($data['account_disabled']) ? $data['account_disabled'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['admin_email'] = isset($data['admin_email']) ? $data['admin_email'] : null;
        $this->container['admin_name'] = isset($data['admin_name']) ? $data['admin_name'] : null;
        $this->container['admin_phone'] = isset($data['admin_phone']) ? $data['admin_phone'] : null;
        $this->container['allow_send_message'] = isset($data['allow_send_message']) ? $data['allow_send_message'] : null;
        $this->container['allow_share_message'] = isset($data['allow_share_message']) ? $data['allow_share_message'] : null;
        $this->container['aware_org_id'] = isset($data['aware_org_id']) ? $data['aware_org_id'] : null;
        $this->container['conference_bridge_permission'] = isset($data['conference_bridge_permission']) ? $data['conference_bridge_permission'] : null;
        $this->container['contact_count'] = isset($data['contact_count']) ? $data['contact_count'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['created_proxy_name'] = isset($data['created_proxy_name']) ? $data['created_proxy_name'] : null;
        $this->container['data_center_id'] = isset($data['data_center_id']) ? $data['data_center_id'] : null;
        $this->container['dirty'] = isset($data['dirty']) ? $data['dirty'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['email_from_display'] = isset($data['email_from_display']) ? $data['email_from_display'] : null;
        $this->container['external_id_desc'] = isset($data['external_id_desc']) ? $data['external_id_desc'] : null;
        $this->container['feature_ids'] = isset($data['feature_ids']) ? $data['feature_ids'] : null;
        $this->container['gis_setting'] = isset($data['gis_setting']) ? $data['gis_setting'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_modified_id'] = isset($data['last_modified_id']) ? $data['last_modified_id'] : null;
        $this->container['last_modified_msg_by'] = isset($data['last_modified_msg_by']) ? $data['last_modified_msg_by'] : null;
        $this->container['last_modified_msg_date'] = isset($data['last_modified_msg_date']) ? $data['last_modified_msg_date'] : null;
        $this->container['last_modified_name'] = isset($data['last_modified_name']) ? $data['last_modified_name'] : null;
        $this->container['last_modified_proxy_name'] = isset($data['last_modified_proxy_name']) ? $data['last_modified_proxy_name'] : null;
        $this->container['last_modified_time'] = isset($data['last_modified_time']) ? $data['last_modified_time'] : null;
        $this->container['last_synchronized_time'] = isset($data['last_synchronized_time']) ? $data['last_synchronized_time'] : null;
        $this->container['login_message'] = isset($data['login_message']) ? $data['login_message'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['org_phone'] = isset($data['org_phone']) ? $data['org_phone'] : null;
        $this->container['organization_broadcast_setting'] = isset($data['organization_broadcast_setting']) ? $data['organization_broadcast_setting'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['organization_status'] = isset($data['organization_status']) ? $data['organization_status'] : null;
        $this->container['password_refresh_days'] = isset($data['password_refresh_days']) ? $data['password_refresh_days'] : null;
        $this->container['processing_state'] = isset($data['processing_state']) ? $data['processing_state'] : null;
        $this->container['product_ids'] = isset($data['product_ids']) ? $data['product_ids'] : null;
        $this->container['reply2_email_permission'] = isset($data['reply2_email_permission']) ? $data['reply2_email_permission'] : null;
        $this->container['resource_bundle_id'] = isset($data['resource_bundle_id']) ? $data['resource_bundle_id'] : null;
        $this->container['role_ids'] = isset($data['role_ids']) ? $data['role_ids'] : null;
        $this->container['sender_caller_id_permission'] = isset($data['sender_caller_id_permission']) ? $data['sender_caller_id_permission'] : null;
        $this->container['sender_email_info_permission'] = isset($data['sender_email_info_permission']) ? $data['sender_email_info_permission'] : null;
        $this->container['sender_info_permission'] = isset($data['sender_info_permission']) ? $data['sender_info_permission'] : null;
        $this->container['share_message_status'] = isset($data['share_message_status']) ? $data['share_message_status'] : null;
        $this->container['short_id'] = isset($data['short_id']) ? $data['short_id'] : null;
        $this->container['show_message'] = isset($data['show_message']) ? $data['show_message'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['threshold_setting'] = isset($data['threshold_setting']) ? $data['threshold_setting'] : null;
        $this->container['throttle_setting'] = isset($data['throttle_setting']) ? $data['throttle_setting'] : null;
        $this->container['twitter_threshold_count'] = isset($data['twitter_threshold_count']) ? $data['twitter_threshold_count'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['weather_provider'] = isset($data['weather_provider']) ? $data['weather_provider'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrganizationStatusAllowableValues();
        if (!is_null($this->container['organization_status']) && !in_array($this->container['organization_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'organization_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeatherProviderAllowableValues();
        if (!is_null($this->container['weather_provider']) && !in_array($this->container['weather_provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'weather_provider', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_disabled
     *
     * @return bool
     */
    public function getAccountDisabled()
    {
        return $this->container['account_disabled'];
    }

    /**
     * Sets account_disabled
     *
     * @param bool $account_disabled account_disabled
     *
     * @return $this
     */
    public function setAccountDisabled($account_disabled)
    {
        $this->container['account_disabled'] = $account_disabled;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\AddressWrapper
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\AddressWrapper $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets admin_email
     *
     * @return string
     */
    public function getAdminEmail()
    {
        return $this->container['admin_email'];
    }

    /**
     * Sets admin_email
     *
     * @param string $admin_email admin_email
     *
     * @return $this
     */
    public function setAdminEmail($admin_email)
    {
        $this->container['admin_email'] = $admin_email;

        return $this;
    }

    /**
     * Gets admin_name
     *
     * @return string
     */
    public function getAdminName()
    {
        return $this->container['admin_name'];
    }

    /**
     * Sets admin_name
     *
     * @param string $admin_name admin_name
     *
     * @return $this
     */
    public function setAdminName($admin_name)
    {
        $this->container['admin_name'] = $admin_name;

        return $this;
    }

    /**
     * Gets admin_phone
     *
     * @return string
     */
    public function getAdminPhone()
    {
        return $this->container['admin_phone'];
    }

    /**
     * Sets admin_phone
     *
     * @param string $admin_phone admin_phone
     *
     * @return $this
     */
    public function setAdminPhone($admin_phone)
    {
        $this->container['admin_phone'] = $admin_phone;

        return $this;
    }

    /**
     * Gets allow_send_message
     *
     * @return bool
     */
    public function getAllowSendMessage()
    {
        return $this->container['allow_send_message'];
    }

    /**
     * Sets allow_send_message
     *
     * @param bool $allow_send_message allow_send_message
     *
     * @return $this
     */
    public function setAllowSendMessage($allow_send_message)
    {
        $this->container['allow_send_message'] = $allow_send_message;

        return $this;
    }

    /**
     * Gets allow_share_message
     *
     * @return bool
     */
    public function getAllowShareMessage()
    {
        return $this->container['allow_share_message'];
    }

    /**
     * Sets allow_share_message
     *
     * @param bool $allow_share_message allow_share_message
     *
     * @return $this
     */
    public function setAllowShareMessage($allow_share_message)
    {
        $this->container['allow_share_message'] = $allow_share_message;

        return $this;
    }

    /**
     * Gets aware_org_id
     *
     * @return int
     */
    public function getAwareOrgId()
    {
        return $this->container['aware_org_id'];
    }

    /**
     * Sets aware_org_id
     *
     * @param int $aware_org_id aware_org_id
     *
     * @return $this
     */
    public function setAwareOrgId($aware_org_id)
    {
        $this->container['aware_org_id'] = $aware_org_id;

        return $this;
    }

    /**
     * Gets conference_bridge_permission
     *
     * @return bool
     */
    public function getConferenceBridgePermission()
    {
        return $this->container['conference_bridge_permission'];
    }

    /**
     * Sets conference_bridge_permission
     *
     * @param bool $conference_bridge_permission conference_bridge_permission
     *
     * @return $this
     */
    public function setConferenceBridgePermission($conference_bridge_permission)
    {
        $this->container['conference_bridge_permission'] = $conference_bridge_permission;

        return $this;
    }

    /**
     * Gets contact_count
     *
     * @return int
     */
    public function getContactCount()
    {
        return $this->container['contact_count'];
    }

    /**
     * Sets contact_count
     *
     * @param int $contact_count contact_count
     *
     * @return $this
     */
    public function setContactCount($contact_count)
    {
        $this->container['contact_count'] = $contact_count;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets created_proxy_name
     *
     * @return string
     */
    public function getCreatedProxyName()
    {
        return $this->container['created_proxy_name'];
    }

    /**
     * Sets created_proxy_name
     *
     * @param string $created_proxy_name created_proxy_name
     *
     * @return $this
     */
    public function setCreatedProxyName($created_proxy_name)
    {
        $this->container['created_proxy_name'] = $created_proxy_name;

        return $this;
    }

    /**
     * Gets data_center_id
     *
     * @return int
     */
    public function getDataCenterId()
    {
        return $this->container['data_center_id'];
    }

    /**
     * Sets data_center_id
     *
     * @param int $data_center_id data_center_id
     *
     * @return $this
     */
    public function setDataCenterId($data_center_id)
    {
        $this->container['data_center_id'] = $data_center_id;

        return $this;
    }

    /**
     * Gets dirty
     *
     * @return bool
     */
    public function getDirty()
    {
        return $this->container['dirty'];
    }

    /**
     * Sets dirty
     *
     * @param bool $dirty dirty
     *
     * @return $this
     */
    public function setDirty($dirty)
    {
        $this->container['dirty'] = $dirty;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_from_display
     *
     * @return string
     */
    public function getEmailFromDisplay()
    {
        return $this->container['email_from_display'];
    }

    /**
     * Sets email_from_display
     *
     * @param string $email_from_display email_from_display
     *
     * @return $this
     */
    public function setEmailFromDisplay($email_from_display)
    {
        $this->container['email_from_display'] = $email_from_display;

        return $this;
    }

    /**
     * Gets external_id_desc
     *
     * @return string
     */
    public function getExternalIdDesc()
    {
        return $this->container['external_id_desc'];
    }

    /**
     * Sets external_id_desc
     *
     * @param string $external_id_desc external_id_desc
     *
     * @return $this
     */
    public function setExternalIdDesc($external_id_desc)
    {
        $this->container['external_id_desc'] = $external_id_desc;

        return $this;
    }

    /**
     * Gets feature_ids
     *
     * @return int[]
     */
    public function getFeatureIds()
    {
        return $this->container['feature_ids'];
    }

    /**
     * Sets feature_ids
     *
     * @param int[] $feature_ids feature_ids
     *
     * @return $this
     */
    public function setFeatureIds($feature_ids)
    {
        $this->container['feature_ids'] = $feature_ids;

        return $this;
    }

    /**
     * Gets gis_setting
     *
     * @return \Swagger\Client\Model\GisSettingWrapper
     */
    public function getGisSetting()
    {
        return $this->container['gis_setting'];
    }

    /**
     * Sets gis_setting
     *
     * @param \Swagger\Client\Model\GisSettingWrapper $gis_setting gis_setting
     *
     * @return $this
     */
    public function setGisSetting($gis_setting)
    {
        $this->container['gis_setting'] = $gis_setting;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets language
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param int $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_modified_id
     *
     * @return int
     */
    public function getLastModifiedId()
    {
        return $this->container['last_modified_id'];
    }

    /**
     * Sets last_modified_id
     *
     * @param int $last_modified_id last_modified_id
     *
     * @return $this
     */
    public function setLastModifiedId($last_modified_id)
    {
        $this->container['last_modified_id'] = $last_modified_id;

        return $this;
    }

    /**
     * Gets last_modified_msg_by
     *
     * @return int
     */
    public function getLastModifiedMsgBy()
    {
        return $this->container['last_modified_msg_by'];
    }

    /**
     * Sets last_modified_msg_by
     *
     * @param int $last_modified_msg_by last_modified_msg_by
     *
     * @return $this
     */
    public function setLastModifiedMsgBy($last_modified_msg_by)
    {
        $this->container['last_modified_msg_by'] = $last_modified_msg_by;

        return $this;
    }

    /**
     * Gets last_modified_msg_date
     *
     * @return \DateTime
     */
    public function getLastModifiedMsgDate()
    {
        return $this->container['last_modified_msg_date'];
    }

    /**
     * Sets last_modified_msg_date
     *
     * @param \DateTime $last_modified_msg_date last_modified_msg_date
     *
     * @return $this
     */
    public function setLastModifiedMsgDate($last_modified_msg_date)
    {
        $this->container['last_modified_msg_date'] = $last_modified_msg_date;

        return $this;
    }

    /**
     * Gets last_modified_name
     *
     * @return string
     */
    public function getLastModifiedName()
    {
        return $this->container['last_modified_name'];
    }

    /**
     * Sets last_modified_name
     *
     * @param string $last_modified_name last_modified_name
     *
     * @return $this
     */
    public function setLastModifiedName($last_modified_name)
    {
        $this->container['last_modified_name'] = $last_modified_name;

        return $this;
    }

    /**
     * Gets last_modified_proxy_name
     *
     * @return string
     */
    public function getLastModifiedProxyName()
    {
        return $this->container['last_modified_proxy_name'];
    }

    /**
     * Sets last_modified_proxy_name
     *
     * @param string $last_modified_proxy_name last_modified_proxy_name
     *
     * @return $this
     */
    public function setLastModifiedProxyName($last_modified_proxy_name)
    {
        $this->container['last_modified_proxy_name'] = $last_modified_proxy_name;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return int
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param int $last_modified_time last_modified_time
     *
     * @return $this
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets last_synchronized_time
     *
     * @return int
     */
    public function getLastSynchronizedTime()
    {
        return $this->container['last_synchronized_time'];
    }

    /**
     * Sets last_synchronized_time
     *
     * @param int $last_synchronized_time last_synchronized_time
     *
     * @return $this
     */
    public function setLastSynchronizedTime($last_synchronized_time)
    {
        $this->container['last_synchronized_time'] = $last_synchronized_time;

        return $this;
    }

    /**
     * Gets login_message
     *
     * @return string
     */
    public function getLoginMessage()
    {
        return $this->container['login_message'];
    }

    /**
     * Sets login_message
     *
     * @param string $login_message login_message
     *
     * @return $this
     */
    public function setLoginMessage($login_message)
    {
        $this->container['login_message'] = $login_message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets org_phone
     *
     * @return string
     */
    public function getOrgPhone()
    {
        return $this->container['org_phone'];
    }

    /**
     * Sets org_phone
     *
     * @param string $org_phone org_phone
     *
     * @return $this
     */
    public function setOrgPhone($org_phone)
    {
        $this->container['org_phone'] = $org_phone;

        return $this;
    }

    /**
     * Gets organization_broadcast_setting
     *
     * @return \Swagger\Client\Model\OrganizationBroadcastSettingWrapper
     */
    public function getOrganizationBroadcastSetting()
    {
        return $this->container['organization_broadcast_setting'];
    }

    /**
     * Sets organization_broadcast_setting
     *
     * @param \Swagger\Client\Model\OrganizationBroadcastSettingWrapper $organization_broadcast_setting organization_broadcast_setting
     *
     * @return $this
     */
    public function setOrganizationBroadcastSetting($organization_broadcast_setting)
    {
        $this->container['organization_broadcast_setting'] = $organization_broadcast_setting;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets organization_status
     *
     * @return string
     */
    public function getOrganizationStatus()
    {
        return $this->container['organization_status'];
    }

    /**
     * Sets organization_status
     *
     * @param string $organization_status organization_status
     *
     * @return $this
     */
    public function setOrganizationStatus($organization_status)
    {
        $allowedValues = $this->getOrganizationStatusAllowableValues();
        if (!is_null($organization_status) && !in_array($organization_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'organization_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_status'] = $organization_status;

        return $this;
    }

    /**
     * Gets password_refresh_days
     *
     * @return int
     */
    public function getPasswordRefreshDays()
    {
        return $this->container['password_refresh_days'];
    }

    /**
     * Sets password_refresh_days
     *
     * @param int $password_refresh_days password_refresh_days
     *
     * @return $this
     */
    public function setPasswordRefreshDays($password_refresh_days)
    {
        $this->container['password_refresh_days'] = $password_refresh_days;

        return $this;
    }

    /**
     * Gets processing_state
     *
     * @return \Swagger\Client\Model\ProcessingStateWrapper
     */
    public function getProcessingState()
    {
        return $this->container['processing_state'];
    }

    /**
     * Sets processing_state
     *
     * @param \Swagger\Client\Model\ProcessingStateWrapper $processing_state processing_state
     *
     * @return $this
     */
    public function setProcessingState($processing_state)
    {
        $this->container['processing_state'] = $processing_state;

        return $this;
    }

    /**
     * Gets product_ids
     *
     * @return int[]
     */
    public function getProductIds()
    {
        return $this->container['product_ids'];
    }

    /**
     * Sets product_ids
     *
     * @param int[] $product_ids product_ids
     *
     * @return $this
     */
    public function setProductIds($product_ids)
    {
        $this->container['product_ids'] = $product_ids;

        return $this;
    }

    /**
     * Gets reply2_email_permission
     *
     * @return bool
     */
    public function getReply2EmailPermission()
    {
        return $this->container['reply2_email_permission'];
    }

    /**
     * Sets reply2_email_permission
     *
     * @param bool $reply2_email_permission reply2_email_permission
     *
     * @return $this
     */
    public function setReply2EmailPermission($reply2_email_permission)
    {
        $this->container['reply2_email_permission'] = $reply2_email_permission;

        return $this;
    }

    /**
     * Gets resource_bundle_id
     *
     * @return int
     */
    public function getResourceBundleId()
    {
        return $this->container['resource_bundle_id'];
    }

    /**
     * Sets resource_bundle_id
     *
     * @param int $resource_bundle_id resource_bundle_id
     *
     * @return $this
     */
    public function setResourceBundleId($resource_bundle_id)
    {
        $this->container['resource_bundle_id'] = $resource_bundle_id;

        return $this;
    }

    /**
     * Gets role_ids
     *
     * @return int[]
     */
    public function getRoleIds()
    {
        return $this->container['role_ids'];
    }

    /**
     * Sets role_ids
     *
     * @param int[] $role_ids role_ids
     *
     * @return $this
     */
    public function setRoleIds($role_ids)
    {
        $this->container['role_ids'] = $role_ids;

        return $this;
    }

    /**
     * Gets sender_caller_id_permission
     *
     * @return bool
     */
    public function getSenderCallerIdPermission()
    {
        return $this->container['sender_caller_id_permission'];
    }

    /**
     * Sets sender_caller_id_permission
     *
     * @param bool $sender_caller_id_permission sender_caller_id_permission
     *
     * @return $this
     */
    public function setSenderCallerIdPermission($sender_caller_id_permission)
    {
        $this->container['sender_caller_id_permission'] = $sender_caller_id_permission;

        return $this;
    }

    /**
     * Gets sender_email_info_permission
     *
     * @return bool
     */
    public function getSenderEmailInfoPermission()
    {
        return $this->container['sender_email_info_permission'];
    }

    /**
     * Sets sender_email_info_permission
     *
     * @param bool $sender_email_info_permission sender_email_info_permission
     *
     * @return $this
     */
    public function setSenderEmailInfoPermission($sender_email_info_permission)
    {
        $this->container['sender_email_info_permission'] = $sender_email_info_permission;

        return $this;
    }

    /**
     * Gets sender_info_permission
     *
     * @return bool
     */
    public function getSenderInfoPermission()
    {
        return $this->container['sender_info_permission'];
    }

    /**
     * Sets sender_info_permission
     *
     * @param bool $sender_info_permission sender_info_permission
     *
     * @return $this
     */
    public function setSenderInfoPermission($sender_info_permission)
    {
        $this->container['sender_info_permission'] = $sender_info_permission;

        return $this;
    }

    /**
     * Gets share_message_status
     *
     * @return bool
     */
    public function getShareMessageStatus()
    {
        return $this->container['share_message_status'];
    }

    /**
     * Sets share_message_status
     *
     * @param bool $share_message_status share_message_status
     *
     * @return $this
     */
    public function setShareMessageStatus($share_message_status)
    {
        $this->container['share_message_status'] = $share_message_status;

        return $this;
    }

    /**
     * Gets short_id
     *
     * @return string
     */
    public function getShortId()
    {
        return $this->container['short_id'];
    }

    /**
     * Sets short_id
     *
     * @param string $short_id short_id
     *
     * @return $this
     */
    public function setShortId($short_id)
    {
        $this->container['short_id'] = $short_id;

        return $this;
    }

    /**
     * Gets show_message
     *
     * @return bool
     */
    public function getShowMessage()
    {
        return $this->container['show_message'];
    }

    /**
     * Sets show_message
     *
     * @param bool $show_message show_message
     *
     * @return $this
     */
    public function setShowMessage($show_message)
    {
        $this->container['show_message'] = $show_message;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets threshold_setting
     *
     * @return \Swagger\Client\Model\ThresholdSettingWrapper
     */
    public function getThresholdSetting()
    {
        return $this->container['threshold_setting'];
    }

    /**
     * Sets threshold_setting
     *
     * @param \Swagger\Client\Model\ThresholdSettingWrapper $threshold_setting threshold_setting
     *
     * @return $this
     */
    public function setThresholdSetting($threshold_setting)
    {
        $this->container['threshold_setting'] = $threshold_setting;

        return $this;
    }

    /**
     * Gets throttle_setting
     *
     * @return \Swagger\Client\Model\ThrottleSettingWrapper
     */
    public function getThrottleSetting()
    {
        return $this->container['throttle_setting'];
    }

    /**
     * Sets throttle_setting
     *
     * @param \Swagger\Client\Model\ThrottleSettingWrapper $throttle_setting throttle_setting
     *
     * @return $this
     */
    public function setThrottleSetting($throttle_setting)
    {
        $this->container['throttle_setting'] = $throttle_setting;

        return $this;
    }

    /**
     * Gets twitter_threshold_count
     *
     * @return int
     */
    public function getTwitterThresholdCount()
    {
        return $this->container['twitter_threshold_count'];
    }

    /**
     * Sets twitter_threshold_count
     *
     * @param int $twitter_threshold_count twitter_threshold_count
     *
     * @return $this
     */
    public function setTwitterThresholdCount($twitter_threshold_count)
    {
        $this->container['twitter_threshold_count'] = $twitter_threshold_count;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets weather_provider
     *
     * @return string
     */
    public function getWeatherProvider()
    {
        return $this->container['weather_provider'];
    }

    /**
     * Sets weather_provider
     *
     * @param string $weather_provider weather_provider
     *
     * @return $this
     */
    public function setWeatherProvider($weather_provider)
    {
        $allowedValues = $this->getWeatherProviderAllowableValues();
        if (!is_null($weather_provider) && !in_array($weather_provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weather_provider', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weather_provider'] = $weather_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


