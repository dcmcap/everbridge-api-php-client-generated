<?php
/**
 * PermissionScopeWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PermissionScopeWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PermissionScopeWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PermissionScopeWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_contacts_to_groups' => 'bool',
        'create_contacts' => 'bool',
        'create_edit_delete_groups' => 'bool',
        'create_edit_delete_schedules' => 'bool',
        'create_edit_view_cockpit_work_flows' => 'bool',
        'delete_contacts' => 'bool',
        'move_remove_contacts_from_groups' => 'bool',
        'only_edit_rules_with_same_role' => 'bool',
        'role_template' => 'string',
        'view_cockpit_work_flows' => 'bool',
        'view_download_all_contacts' => 'bool',
        'view_download_edit_all_contacts' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'add_contacts_to_groups' => null,
        'create_contacts' => null,
        'create_edit_delete_groups' => null,
        'create_edit_delete_schedules' => null,
        'create_edit_view_cockpit_work_flows' => null,
        'delete_contacts' => null,
        'move_remove_contacts_from_groups' => null,
        'only_edit_rules_with_same_role' => null,
        'role_template' => null,
        'view_cockpit_work_flows' => null,
        'view_download_all_contacts' => null,
        'view_download_edit_all_contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_contacts_to_groups' => 'addContactsToGroups',
        'create_contacts' => 'createContacts',
        'create_edit_delete_groups' => 'createEditDeleteGroups',
        'create_edit_delete_schedules' => 'createEditDeleteSchedules',
        'create_edit_view_cockpit_work_flows' => 'createEditViewCockpitWorkFlows',
        'delete_contacts' => 'deleteContacts',
        'move_remove_contacts_from_groups' => 'moveRemoveContactsFromGroups',
        'only_edit_rules_with_same_role' => 'onlyEditRulesWithSameRole',
        'role_template' => 'roleTemplate',
        'view_cockpit_work_flows' => 'viewCockpitWorkFlows',
        'view_download_all_contacts' => 'viewDownloadAllContacts',
        'view_download_edit_all_contacts' => 'viewDownloadEditAllContacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_contacts_to_groups' => 'setAddContactsToGroups',
        'create_contacts' => 'setCreateContacts',
        'create_edit_delete_groups' => 'setCreateEditDeleteGroups',
        'create_edit_delete_schedules' => 'setCreateEditDeleteSchedules',
        'create_edit_view_cockpit_work_flows' => 'setCreateEditViewCockpitWorkFlows',
        'delete_contacts' => 'setDeleteContacts',
        'move_remove_contacts_from_groups' => 'setMoveRemoveContactsFromGroups',
        'only_edit_rules_with_same_role' => 'setOnlyEditRulesWithSameRole',
        'role_template' => 'setRoleTemplate',
        'view_cockpit_work_flows' => 'setViewCockpitWorkFlows',
        'view_download_all_contacts' => 'setViewDownloadAllContacts',
        'view_download_edit_all_contacts' => 'setViewDownloadEditAllContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_contacts_to_groups' => 'getAddContactsToGroups',
        'create_contacts' => 'getCreateContacts',
        'create_edit_delete_groups' => 'getCreateEditDeleteGroups',
        'create_edit_delete_schedules' => 'getCreateEditDeleteSchedules',
        'create_edit_view_cockpit_work_flows' => 'getCreateEditViewCockpitWorkFlows',
        'delete_contacts' => 'getDeleteContacts',
        'move_remove_contacts_from_groups' => 'getMoveRemoveContactsFromGroups',
        'only_edit_rules_with_same_role' => 'getOnlyEditRulesWithSameRole',
        'role_template' => 'getRoleTemplate',
        'view_cockpit_work_flows' => 'getViewCockpitWorkFlows',
        'view_download_all_contacts' => 'getViewDownloadAllContacts',
        'view_download_edit_all_contacts' => 'getViewDownloadEditAllContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROLE_TEMPLATE_EB = 'EB';
    const ROLE_TEMPLATE_SUPPORT = 'SUPPORT';
    const ROLE_TEMPLATE_VIEW_ONLY = 'VIEW_ONLY';
    const ROLE_TEMPLATE_ACCOUNT_ADMIN = 'ACCOUNT_ADMIN';
    const ROLE_TEMPLATE_ORGANIZATION_ADMIN = 'ORGANIZATION_ADMIN';
    const ROLE_TEMPLATE_GROUP_LEADER = 'GROUP_LEADER';
    const ROLE_TEMPLATE_MASS_NOTIFICATION_OPERATOR = 'MASS_NOTIFICATION_OPERATOR';
    const ROLE_TEMPLATE_INCIDENT_OPERATOR = 'INCIDENT_OPERATOR';
    const ROLE_TEMPLATE_DISPATCHER = 'DISPATCHER';
    const ROLE_TEMPLATE_DISPATCHER_IPAWS_CMAS = 'DISPATCHER_IPAWS_CMAS';
    const ROLE_TEMPLATE_DATA_MANAGER = 'DATA_MANAGER';
    const ROLE_TEMPLATE_INCIDENT_ADMIN = 'INCIDENT_ADMIN';
    const ROLE_TEMPLATE_CUSTOM = 'CUSTOM';
    const ROLE_TEMPLATE_CUSTOMIZED = 'CUSTOMIZED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleTemplateAllowableValues()
    {
        return [
            self::ROLE_TEMPLATE_EB,
            self::ROLE_TEMPLATE_SUPPORT,
            self::ROLE_TEMPLATE_VIEW_ONLY,
            self::ROLE_TEMPLATE_ACCOUNT_ADMIN,
            self::ROLE_TEMPLATE_ORGANIZATION_ADMIN,
            self::ROLE_TEMPLATE_GROUP_LEADER,
            self::ROLE_TEMPLATE_MASS_NOTIFICATION_OPERATOR,
            self::ROLE_TEMPLATE_INCIDENT_OPERATOR,
            self::ROLE_TEMPLATE_DISPATCHER,
            self::ROLE_TEMPLATE_DISPATCHER_IPAWS_CMAS,
            self::ROLE_TEMPLATE_DATA_MANAGER,
            self::ROLE_TEMPLATE_INCIDENT_ADMIN,
            self::ROLE_TEMPLATE_CUSTOM,
            self::ROLE_TEMPLATE_CUSTOMIZED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_contacts_to_groups'] = isset($data['add_contacts_to_groups']) ? $data['add_contacts_to_groups'] : null;
        $this->container['create_contacts'] = isset($data['create_contacts']) ? $data['create_contacts'] : null;
        $this->container['create_edit_delete_groups'] = isset($data['create_edit_delete_groups']) ? $data['create_edit_delete_groups'] : null;
        $this->container['create_edit_delete_schedules'] = isset($data['create_edit_delete_schedules']) ? $data['create_edit_delete_schedules'] : null;
        $this->container['create_edit_view_cockpit_work_flows'] = isset($data['create_edit_view_cockpit_work_flows']) ? $data['create_edit_view_cockpit_work_flows'] : null;
        $this->container['delete_contacts'] = isset($data['delete_contacts']) ? $data['delete_contacts'] : null;
        $this->container['move_remove_contacts_from_groups'] = isset($data['move_remove_contacts_from_groups']) ? $data['move_remove_contacts_from_groups'] : null;
        $this->container['only_edit_rules_with_same_role'] = isset($data['only_edit_rules_with_same_role']) ? $data['only_edit_rules_with_same_role'] : null;
        $this->container['role_template'] = isset($data['role_template']) ? $data['role_template'] : null;
        $this->container['view_cockpit_work_flows'] = isset($data['view_cockpit_work_flows']) ? $data['view_cockpit_work_flows'] : null;
        $this->container['view_download_all_contacts'] = isset($data['view_download_all_contacts']) ? $data['view_download_all_contacts'] : null;
        $this->container['view_download_edit_all_contacts'] = isset($data['view_download_edit_all_contacts']) ? $data['view_download_edit_all_contacts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRoleTemplateAllowableValues();
        if (!is_null($this->container['role_template']) && !in_array($this->container['role_template'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'role_template', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_contacts_to_groups
     *
     * @return bool
     */
    public function getAddContactsToGroups()
    {
        return $this->container['add_contacts_to_groups'];
    }

    /**
     * Sets add_contacts_to_groups
     *
     * @param bool $add_contacts_to_groups add_contacts_to_groups
     *
     * @return $this
     */
    public function setAddContactsToGroups($add_contacts_to_groups)
    {
        $this->container['add_contacts_to_groups'] = $add_contacts_to_groups;

        return $this;
    }

    /**
     * Gets create_contacts
     *
     * @return bool
     */
    public function getCreateContacts()
    {
        return $this->container['create_contacts'];
    }

    /**
     * Sets create_contacts
     *
     * @param bool $create_contacts create_contacts
     *
     * @return $this
     */
    public function setCreateContacts($create_contacts)
    {
        $this->container['create_contacts'] = $create_contacts;

        return $this;
    }

    /**
     * Gets create_edit_delete_groups
     *
     * @return bool
     */
    public function getCreateEditDeleteGroups()
    {
        return $this->container['create_edit_delete_groups'];
    }

    /**
     * Sets create_edit_delete_groups
     *
     * @param bool $create_edit_delete_groups create_edit_delete_groups
     *
     * @return $this
     */
    public function setCreateEditDeleteGroups($create_edit_delete_groups)
    {
        $this->container['create_edit_delete_groups'] = $create_edit_delete_groups;

        return $this;
    }

    /**
     * Gets create_edit_delete_schedules
     *
     * @return bool
     */
    public function getCreateEditDeleteSchedules()
    {
        return $this->container['create_edit_delete_schedules'];
    }

    /**
     * Sets create_edit_delete_schedules
     *
     * @param bool $create_edit_delete_schedules create_edit_delete_schedules
     *
     * @return $this
     */
    public function setCreateEditDeleteSchedules($create_edit_delete_schedules)
    {
        $this->container['create_edit_delete_schedules'] = $create_edit_delete_schedules;

        return $this;
    }

    /**
     * Gets create_edit_view_cockpit_work_flows
     *
     * @return bool
     */
    public function getCreateEditViewCockpitWorkFlows()
    {
        return $this->container['create_edit_view_cockpit_work_flows'];
    }

    /**
     * Sets create_edit_view_cockpit_work_flows
     *
     * @param bool $create_edit_view_cockpit_work_flows create_edit_view_cockpit_work_flows
     *
     * @return $this
     */
    public function setCreateEditViewCockpitWorkFlows($create_edit_view_cockpit_work_flows)
    {
        $this->container['create_edit_view_cockpit_work_flows'] = $create_edit_view_cockpit_work_flows;

        return $this;
    }

    /**
     * Gets delete_contacts
     *
     * @return bool
     */
    public function getDeleteContacts()
    {
        return $this->container['delete_contacts'];
    }

    /**
     * Sets delete_contacts
     *
     * @param bool $delete_contacts delete_contacts
     *
     * @return $this
     */
    public function setDeleteContacts($delete_contacts)
    {
        $this->container['delete_contacts'] = $delete_contacts;

        return $this;
    }

    /**
     * Gets move_remove_contacts_from_groups
     *
     * @return bool
     */
    public function getMoveRemoveContactsFromGroups()
    {
        return $this->container['move_remove_contacts_from_groups'];
    }

    /**
     * Sets move_remove_contacts_from_groups
     *
     * @param bool $move_remove_contacts_from_groups move_remove_contacts_from_groups
     *
     * @return $this
     */
    public function setMoveRemoveContactsFromGroups($move_remove_contacts_from_groups)
    {
        $this->container['move_remove_contacts_from_groups'] = $move_remove_contacts_from_groups;

        return $this;
    }

    /**
     * Gets only_edit_rules_with_same_role
     *
     * @return bool
     */
    public function getOnlyEditRulesWithSameRole()
    {
        return $this->container['only_edit_rules_with_same_role'];
    }

    /**
     * Sets only_edit_rules_with_same_role
     *
     * @param bool $only_edit_rules_with_same_role only_edit_rules_with_same_role
     *
     * @return $this
     */
    public function setOnlyEditRulesWithSameRole($only_edit_rules_with_same_role)
    {
        $this->container['only_edit_rules_with_same_role'] = $only_edit_rules_with_same_role;

        return $this;
    }

    /**
     * Gets role_template
     *
     * @return string
     */
    public function getRoleTemplate()
    {
        return $this->container['role_template'];
    }

    /**
     * Sets role_template
     *
     * @param string $role_template role_template
     *
     * @return $this
     */
    public function setRoleTemplate($role_template)
    {
        $allowedValues = $this->getRoleTemplateAllowableValues();
        if (!is_null($role_template) && !in_array($role_template, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'role_template', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role_template'] = $role_template;

        return $this;
    }

    /**
     * Gets view_cockpit_work_flows
     *
     * @return bool
     */
    public function getViewCockpitWorkFlows()
    {
        return $this->container['view_cockpit_work_flows'];
    }

    /**
     * Sets view_cockpit_work_flows
     *
     * @param bool $view_cockpit_work_flows view_cockpit_work_flows
     *
     * @return $this
     */
    public function setViewCockpitWorkFlows($view_cockpit_work_flows)
    {
        $this->container['view_cockpit_work_flows'] = $view_cockpit_work_flows;

        return $this;
    }

    /**
     * Gets view_download_all_contacts
     *
     * @return bool
     */
    public function getViewDownloadAllContacts()
    {
        return $this->container['view_download_all_contacts'];
    }

    /**
     * Sets view_download_all_contacts
     *
     * @param bool $view_download_all_contacts view_download_all_contacts
     *
     * @return $this
     */
    public function setViewDownloadAllContacts($view_download_all_contacts)
    {
        $this->container['view_download_all_contacts'] = $view_download_all_contacts;

        return $this;
    }

    /**
     * Gets view_download_edit_all_contacts
     *
     * @return bool
     */
    public function getViewDownloadEditAllContacts()
    {
        return $this->container['view_download_edit_all_contacts'];
    }

    /**
     * Sets view_download_edit_all_contacts
     *
     * @param bool $view_download_edit_all_contacts view_download_edit_all_contacts
     *
     * @return $this
     */
    public function setViewDownloadEditAllContacts($view_download_edit_all_contacts)
    {
        $this->container['view_download_edit_all_contacts'] = $view_download_edit_all_contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


