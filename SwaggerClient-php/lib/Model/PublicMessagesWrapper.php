<?php
/**
 * PublicMessagesWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PublicMessagesWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicMessagesWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublicMessagesWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_us_message' => '\Swagger\Client\Model\AlertUsMessageWrapper',
        'desktop_alert_message' => '\Swagger\Client\Model\DesktopAlertWrapper',
        'generic_oney_way_message' => '\Swagger\Client\Model\GenericOneWayMessageWrapper',
        'ipaws_message' => '\Swagger\Client\Model\IPAWSMessageWrapper',
        'network_effect_message' => '\Swagger\Client\Model\EBNetworkEffectMessageWrapper',
        'nixle_alert_message' => '\Swagger\Client\Model\NixleAlertMessageWrapper',
        'web_widget_message' => '\Swagger\Client\Model\WebWidgetWrapper'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_us_message' => null,
        'desktop_alert_message' => null,
        'generic_oney_way_message' => null,
        'ipaws_message' => null,
        'network_effect_message' => null,
        'nixle_alert_message' => null,
        'web_widget_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_us_message' => 'alertUsMessage',
        'desktop_alert_message' => 'desktopAlertMessage',
        'generic_oney_way_message' => 'genericOneyWayMessage',
        'ipaws_message' => 'ipawsMessage',
        'network_effect_message' => 'networkEffectMessage',
        'nixle_alert_message' => 'nixleAlertMessage',
        'web_widget_message' => 'webWidgetMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_us_message' => 'setAlertUsMessage',
        'desktop_alert_message' => 'setDesktopAlertMessage',
        'generic_oney_way_message' => 'setGenericOneyWayMessage',
        'ipaws_message' => 'setIpawsMessage',
        'network_effect_message' => 'setNetworkEffectMessage',
        'nixle_alert_message' => 'setNixleAlertMessage',
        'web_widget_message' => 'setWebWidgetMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_us_message' => 'getAlertUsMessage',
        'desktop_alert_message' => 'getDesktopAlertMessage',
        'generic_oney_way_message' => 'getGenericOneyWayMessage',
        'ipaws_message' => 'getIpawsMessage',
        'network_effect_message' => 'getNetworkEffectMessage',
        'nixle_alert_message' => 'getNixleAlertMessage',
        'web_widget_message' => 'getWebWidgetMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_us_message'] = isset($data['alert_us_message']) ? $data['alert_us_message'] : null;
        $this->container['desktop_alert_message'] = isset($data['desktop_alert_message']) ? $data['desktop_alert_message'] : null;
        $this->container['generic_oney_way_message'] = isset($data['generic_oney_way_message']) ? $data['generic_oney_way_message'] : null;
        $this->container['ipaws_message'] = isset($data['ipaws_message']) ? $data['ipaws_message'] : null;
        $this->container['network_effect_message'] = isset($data['network_effect_message']) ? $data['network_effect_message'] : null;
        $this->container['nixle_alert_message'] = isset($data['nixle_alert_message']) ? $data['nixle_alert_message'] : null;
        $this->container['web_widget_message'] = isset($data['web_widget_message']) ? $data['web_widget_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_us_message
     *
     * @return \Swagger\Client\Model\AlertUsMessageWrapper
     */
    public function getAlertUsMessage()
    {
        return $this->container['alert_us_message'];
    }

    /**
     * Sets alert_us_message
     *
     * @param \Swagger\Client\Model\AlertUsMessageWrapper $alert_us_message alert_us_message
     *
     * @return $this
     */
    public function setAlertUsMessage($alert_us_message)
    {
        $this->container['alert_us_message'] = $alert_us_message;

        return $this;
    }

    /**
     * Gets desktop_alert_message
     *
     * @return \Swagger\Client\Model\DesktopAlertWrapper
     */
    public function getDesktopAlertMessage()
    {
        return $this->container['desktop_alert_message'];
    }

    /**
     * Sets desktop_alert_message
     *
     * @param \Swagger\Client\Model\DesktopAlertWrapper $desktop_alert_message desktop_alert_message
     *
     * @return $this
     */
    public function setDesktopAlertMessage($desktop_alert_message)
    {
        $this->container['desktop_alert_message'] = $desktop_alert_message;

        return $this;
    }

    /**
     * Gets generic_oney_way_message
     *
     * @return \Swagger\Client\Model\GenericOneWayMessageWrapper
     */
    public function getGenericOneyWayMessage()
    {
        return $this->container['generic_oney_way_message'];
    }

    /**
     * Sets generic_oney_way_message
     *
     * @param \Swagger\Client\Model\GenericOneWayMessageWrapper $generic_oney_way_message generic_oney_way_message
     *
     * @return $this
     */
    public function setGenericOneyWayMessage($generic_oney_way_message)
    {
        $this->container['generic_oney_way_message'] = $generic_oney_way_message;

        return $this;
    }

    /**
     * Gets ipaws_message
     *
     * @return \Swagger\Client\Model\IPAWSMessageWrapper
     */
    public function getIpawsMessage()
    {
        return $this->container['ipaws_message'];
    }

    /**
     * Sets ipaws_message
     *
     * @param \Swagger\Client\Model\IPAWSMessageWrapper $ipaws_message ipaws_message
     *
     * @return $this
     */
    public function setIpawsMessage($ipaws_message)
    {
        $this->container['ipaws_message'] = $ipaws_message;

        return $this;
    }

    /**
     * Gets network_effect_message
     *
     * @return \Swagger\Client\Model\EBNetworkEffectMessageWrapper
     */
    public function getNetworkEffectMessage()
    {
        return $this->container['network_effect_message'];
    }

    /**
     * Sets network_effect_message
     *
     * @param \Swagger\Client\Model\EBNetworkEffectMessageWrapper $network_effect_message network_effect_message
     *
     * @return $this
     */
    public function setNetworkEffectMessage($network_effect_message)
    {
        $this->container['network_effect_message'] = $network_effect_message;

        return $this;
    }

    /**
     * Gets nixle_alert_message
     *
     * @return \Swagger\Client\Model\NixleAlertMessageWrapper
     */
    public function getNixleAlertMessage()
    {
        return $this->container['nixle_alert_message'];
    }

    /**
     * Sets nixle_alert_message
     *
     * @param \Swagger\Client\Model\NixleAlertMessageWrapper $nixle_alert_message nixle_alert_message
     *
     * @return $this
     */
    public function setNixleAlertMessage($nixle_alert_message)
    {
        $this->container['nixle_alert_message'] = $nixle_alert_message;

        return $this;
    }

    /**
     * Gets web_widget_message
     *
     * @return \Swagger\Client\Model\WebWidgetWrapper
     */
    public function getWebWidgetMessage()
    {
        return $this->container['web_widget_message'];
    }

    /**
     * Sets web_widget_message
     *
     * @param \Swagger\Client\Model\WebWidgetWrapper $web_widget_message web_widget_message
     *
     * @return $this
     */
    public function setWebWidgetMessage($web_widget_message)
    {
        $this->container['web_widget_message'] = $web_widget_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


