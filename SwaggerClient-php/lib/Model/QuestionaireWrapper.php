<?php
/**
 * QuestionaireWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QuestionaireWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuestionaireWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuestionaireWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'answers' => '\Swagger\Client\Model\AnswerWrapper[]',
        'input_option_allowable' => 'bool',
        'input_option_type' => 'string',
        'multiple_selected' => 'bool',
        'question' => 'string',
        'required' => 'bool',
        'voice_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'answers' => null,
        'input_option_allowable' => null,
        'input_option_type' => null,
        'multiple_selected' => null,
        'question' => null,
        'required' => null,
        'voice_message' => 'byte'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answers' => 'answers',
        'input_option_allowable' => 'inputOptionAllowable',
        'input_option_type' => 'inputOptionType',
        'multiple_selected' => 'multipleSelected',
        'question' => 'question',
        'required' => 'required',
        'voice_message' => 'voiceMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answers' => 'setAnswers',
        'input_option_allowable' => 'setInputOptionAllowable',
        'input_option_type' => 'setInputOptionType',
        'multiple_selected' => 'setMultipleSelected',
        'question' => 'setQuestion',
        'required' => 'setRequired',
        'voice_message' => 'setVoiceMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answers' => 'getAnswers',
        'input_option_allowable' => 'getInputOptionAllowable',
        'input_option_type' => 'getInputOptionType',
        'multiple_selected' => 'getMultipleSelected',
        'question' => 'getQuestion',
        'required' => 'getRequired',
        'voice_message' => 'getVoiceMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['answers'] = isset($data['answers']) ? $data['answers'] : null;
        $this->container['input_option_allowable'] = isset($data['input_option_allowable']) ? $data['input_option_allowable'] : null;
        $this->container['input_option_type'] = isset($data['input_option_type']) ? $data['input_option_type'] : null;
        $this->container['multiple_selected'] = isset($data['multiple_selected']) ? $data['multiple_selected'] : null;
        $this->container['question'] = isset($data['question']) ? $data['question'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['voice_message'] = isset($data['voice_message']) ? $data['voice_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['voice_message']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['voice_message'])) {
            $invalidProperties[] = "invalid value for 'voice_message', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answers
     *
     * @return \Swagger\Client\Model\AnswerWrapper[]
     */
    public function getAnswers()
    {
        return $this->container['answers'];
    }

    /**
     * Sets answers
     *
     * @param \Swagger\Client\Model\AnswerWrapper[] $answers answers
     *
     * @return $this
     */
    public function setAnswers($answers)
    {
        $this->container['answers'] = $answers;

        return $this;
    }

    /**
     * Gets input_option_allowable
     *
     * @return bool
     */
    public function getInputOptionAllowable()
    {
        return $this->container['input_option_allowable'];
    }

    /**
     * Sets input_option_allowable
     *
     * @param bool $input_option_allowable input_option_allowable
     *
     * @return $this
     */
    public function setInputOptionAllowable($input_option_allowable)
    {
        $this->container['input_option_allowable'] = $input_option_allowable;

        return $this;
    }

    /**
     * Gets input_option_type
     *
     * @return string
     */
    public function getInputOptionType()
    {
        return $this->container['input_option_type'];
    }

    /**
     * Sets input_option_type
     *
     * @param string $input_option_type input_option_type
     *
     * @return $this
     */
    public function setInputOptionType($input_option_type)
    {
        $this->container['input_option_type'] = $input_option_type;

        return $this;
    }

    /**
     * Gets multiple_selected
     *
     * @return bool
     */
    public function getMultipleSelected()
    {
        return $this->container['multiple_selected'];
    }

    /**
     * Sets multiple_selected
     *
     * @param bool $multiple_selected multiple_selected
     *
     * @return $this
     */
    public function setMultipleSelected($multiple_selected)
    {
        $this->container['multiple_selected'] = $multiple_selected;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string $question question
     *
     * @return $this
     */
    public function setQuestion($question)
    {
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets voice_message
     *
     * @return string
     */
    public function getVoiceMessage()
    {
        return $this->container['voice_message'];
    }

    /**
     * Sets voice_message
     *
     * @param string $voice_message voice_message
     *
     * @return $this
     */
    public function setVoiceMessage($voice_message)
    {

        if (!is_null($voice_message) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $voice_message))) {
            throw new \InvalidArgumentException("invalid value for $voice_message when calling QuestionaireWrapper., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['voice_message'] = $voice_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


