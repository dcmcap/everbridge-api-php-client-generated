<?php
/**
 * RoleDataScopeWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RoleDataScopeWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoleDataScopeWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoleDataScopeWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'broadcast_template_ids' => 'int[]',
        'dynamic_group_ids' => 'int[]',
        'group_ids' => 'int[]',
        'incident_template_ids' => 'int[]',
        'is_empty' => 'bool',
        'organization_id' => 'int',
        'reference_id' => 'int',
        'reference_type' => 'string',
        'role_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'broadcast_template_ids' => 'int64',
        'dynamic_group_ids' => 'int64',
        'group_ids' => 'int64',
        'incident_template_ids' => 'int64',
        'is_empty' => null,
        'organization_id' => 'int64',
        'reference_id' => 'int64',
        'reference_type' => null,
        'role_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'broadcast_template_ids' => 'broadcastTemplateIds',
        'dynamic_group_ids' => 'dynamicGroupIds',
        'group_ids' => 'groupIds',
        'incident_template_ids' => 'incidentTemplateIds',
        'is_empty' => 'isEmpty',
        'organization_id' => 'organizationId',
        'reference_id' => 'referenceId',
        'reference_type' => 'referenceType',
        'role_id' => 'roleId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'broadcast_template_ids' => 'setBroadcastTemplateIds',
        'dynamic_group_ids' => 'setDynamicGroupIds',
        'group_ids' => 'setGroupIds',
        'incident_template_ids' => 'setIncidentTemplateIds',
        'is_empty' => 'setIsEmpty',
        'organization_id' => 'setOrganizationId',
        'reference_id' => 'setReferenceId',
        'reference_type' => 'setReferenceType',
        'role_id' => 'setRoleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'broadcast_template_ids' => 'getBroadcastTemplateIds',
        'dynamic_group_ids' => 'getDynamicGroupIds',
        'group_ids' => 'getGroupIds',
        'incident_template_ids' => 'getIncidentTemplateIds',
        'is_empty' => 'getIsEmpty',
        'organization_id' => 'getOrganizationId',
        'reference_id' => 'getReferenceId',
        'reference_type' => 'getReferenceType',
        'role_id' => 'getRoleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['broadcast_template_ids'] = isset($data['broadcast_template_ids']) ? $data['broadcast_template_ids'] : null;
        $this->container['dynamic_group_ids'] = isset($data['dynamic_group_ids']) ? $data['dynamic_group_ids'] : null;
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['incident_template_ids'] = isset($data['incident_template_ids']) ? $data['incident_template_ids'] : null;
        $this->container['is_empty'] = isset($data['is_empty']) ? $data['is_empty'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['reference_id'] = isset($data['reference_id']) ? $data['reference_id'] : null;
        $this->container['reference_type'] = isset($data['reference_type']) ? $data['reference_type'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets broadcast_template_ids
     *
     * @return int[]
     */
    public function getBroadcastTemplateIds()
    {
        return $this->container['broadcast_template_ids'];
    }

    /**
     * Sets broadcast_template_ids
     *
     * @param int[] $broadcast_template_ids broadcast_template_ids
     *
     * @return $this
     */
    public function setBroadcastTemplateIds($broadcast_template_ids)
    {
        $this->container['broadcast_template_ids'] = $broadcast_template_ids;

        return $this;
    }

    /**
     * Gets dynamic_group_ids
     *
     * @return int[]
     */
    public function getDynamicGroupIds()
    {
        return $this->container['dynamic_group_ids'];
    }

    /**
     * Sets dynamic_group_ids
     *
     * @param int[] $dynamic_group_ids dynamic_group_ids
     *
     * @return $this
     */
    public function setDynamicGroupIds($dynamic_group_ids)
    {
        $this->container['dynamic_group_ids'] = $dynamic_group_ids;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return int[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param int[] $group_ids group_ids
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets incident_template_ids
     *
     * @return int[]
     */
    public function getIncidentTemplateIds()
    {
        return $this->container['incident_template_ids'];
    }

    /**
     * Sets incident_template_ids
     *
     * @param int[] $incident_template_ids incident_template_ids
     *
     * @return $this
     */
    public function setIncidentTemplateIds($incident_template_ids)
    {
        $this->container['incident_template_ids'] = $incident_template_ids;

        return $this;
    }

    /**
     * Gets is_empty
     *
     * @return bool
     */
    public function getIsEmpty()
    {
        return $this->container['is_empty'];
    }

    /**
     * Sets is_empty
     *
     * @param bool $is_empty is_empty
     *
     * @return $this
     */
    public function setIsEmpty($is_empty)
    {
        $this->container['is_empty'] = $is_empty;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int $reference_id reference_id
     *
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets reference_type
     *
     * @return string
     */
    public function getReferenceType()
    {
        return $this->container['reference_type'];
    }

    /**
     * Sets reference_type
     *
     * @param string $reference_type reference_type
     *
     * @return $this
     */
    public function setReferenceType($reference_type)
    {
        $this->container['reference_type'] = $reference_type;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param int $role_id role_id
     *
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


