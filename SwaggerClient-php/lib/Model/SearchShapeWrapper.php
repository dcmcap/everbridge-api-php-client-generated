<?php
/**
 * SearchShapeWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SearchShapeWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchShapeWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchShapeWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'boundary_id' => 'string',
        'from_library' => 'bool',
        'include' => 'bool',
        'region_id' => 'int',
        'resident_contact_types' => 'string[]',
        'search_shape_types' => 'string[]',
        'shape' => '\Swagger\Client\Model\GeoShapeWrapper'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'boundary_id' => null,
        'from_library' => null,
        'include' => null,
        'region_id' => 'int64',
        'resident_contact_types' => null,
        'search_shape_types' => null,
        'shape' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'boundary_id' => 'boundaryId',
        'from_library' => 'fromLibrary',
        'include' => 'include',
        'region_id' => 'regionId',
        'resident_contact_types' => 'residentContactTypes',
        'search_shape_types' => 'searchShapeTypes',
        'shape' => 'shape'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'boundary_id' => 'setBoundaryId',
        'from_library' => 'setFromLibrary',
        'include' => 'setInclude',
        'region_id' => 'setRegionId',
        'resident_contact_types' => 'setResidentContactTypes',
        'search_shape_types' => 'setSearchShapeTypes',
        'shape' => 'setShape'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'boundary_id' => 'getBoundaryId',
        'from_library' => 'getFromLibrary',
        'include' => 'getInclude',
        'region_id' => 'getRegionId',
        'resident_contact_types' => 'getResidentContactTypes',
        'search_shape_types' => 'getSearchShapeTypes',
        'shape' => 'getShape'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESIDENT_CONTACT_TYPES_RESIDENTIAL = 'RESIDENTIAL';
    const RESIDENT_CONTACT_TYPES_BUSINESS = 'BUSINESS';
    const SEARCH_SHAPE_TYPES__STATIC = 'STATIC';
    const SEARCH_SHAPE_TYPES_DYNAMIC = 'DYNAMIC';
    const SEARCH_SHAPE_TYPES_EXPECTED = 'EXPECTED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResidentContactTypesAllowableValues()
    {
        return [
            self::RESIDENT_CONTACT_TYPES_RESIDENTIAL,
            self::RESIDENT_CONTACT_TYPES_BUSINESS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSearchShapeTypesAllowableValues()
    {
        return [
            self::SEARCH_SHAPE_TYPES__STATIC,
            self::SEARCH_SHAPE_TYPES_DYNAMIC,
            self::SEARCH_SHAPE_TYPES_EXPECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['boundary_id'] = isset($data['boundary_id']) ? $data['boundary_id'] : null;
        $this->container['from_library'] = isset($data['from_library']) ? $data['from_library'] : null;
        $this->container['include'] = isset($data['include']) ? $data['include'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['resident_contact_types'] = isset($data['resident_contact_types']) ? $data['resident_contact_types'] : null;
        $this->container['search_shape_types'] = isset($data['search_shape_types']) ? $data['search_shape_types'] : null;
        $this->container['shape'] = isset($data['shape']) ? $data['shape'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets boundary_id
     *
     * @return string
     */
    public function getBoundaryId()
    {
        return $this->container['boundary_id'];
    }

    /**
     * Sets boundary_id
     *
     * @param string $boundary_id boundary_id
     *
     * @return $this
     */
    public function setBoundaryId($boundary_id)
    {
        $this->container['boundary_id'] = $boundary_id;

        return $this;
    }

    /**
     * Gets from_library
     *
     * @return bool
     */
    public function getFromLibrary()
    {
        return $this->container['from_library'];
    }

    /**
     * Sets from_library
     *
     * @param bool $from_library from_library
     *
     * @return $this
     */
    public function setFromLibrary($from_library)
    {
        $this->container['from_library'] = $from_library;

        return $this;
    }

    /**
     * Gets include
     *
     * @return bool
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param bool $include include
     *
     * @return $this
     */
    public function setInclude($include)
    {
        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return int
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param int $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets resident_contact_types
     *
     * @return string[]
     */
    public function getResidentContactTypes()
    {
        return $this->container['resident_contact_types'];
    }

    /**
     * Sets resident_contact_types
     *
     * @param string[] $resident_contact_types resident_contact_types
     *
     * @return $this
     */
    public function setResidentContactTypes($resident_contact_types)
    {
        $allowedValues = $this->getResidentContactTypesAllowableValues();
        if (!is_null($resident_contact_types) && array_diff($resident_contact_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resident_contact_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resident_contact_types'] = $resident_contact_types;

        return $this;
    }

    /**
     * Gets search_shape_types
     *
     * @return string[]
     */
    public function getSearchShapeTypes()
    {
        return $this->container['search_shape_types'];
    }

    /**
     * Sets search_shape_types
     *
     * @param string[] $search_shape_types search_shape_types
     *
     * @return $this
     */
    public function setSearchShapeTypes($search_shape_types)
    {
        $allowedValues = $this->getSearchShapeTypesAllowableValues();
        if (!is_null($search_shape_types) && array_diff($search_shape_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'search_shape_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['search_shape_types'] = $search_shape_types;

        return $this;
    }

    /**
     * Gets shape
     *
     * @return \Swagger\Client\Model\GeoShapeWrapper
     */
    public function getShape()
    {
        return $this->container['shape'];
    }

    /**
     * Sets shape
     *
     * @param \Swagger\Client\Model\GeoShapeWrapper $shape shape
     *
     * @return $this
     */
    public function setShape($shape)
    {
        $this->container['shape'] = $shape;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


