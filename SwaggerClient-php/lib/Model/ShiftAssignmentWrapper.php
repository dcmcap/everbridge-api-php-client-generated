<?php
/**
 * ShiftAssignmentWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShiftAssignmentWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShiftAssignmentWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShiftAssignmentWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'day_of_shift' => 'string',
        'shift_applicability_interval' => '\Swagger\Client\Model\TimingInterval',
        'shift_applicability_interval_from' => 'string',
        'shift_applicability_interval_to' => 'string',
        'shift_exceptions' => '\Swagger\Client\Model\ShiftExceptions[]',
        'shift_id' => 'int',
        'shift_name' => 'string',
        'staff_contactid' => 'int',
        'staff_member' => '\Swagger\Client\Model\Staff',
        'staff_shift_assignment_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'day_of_shift' => null,
        'shift_applicability_interval' => null,
        'shift_applicability_interval_from' => null,
        'shift_applicability_interval_to' => null,
        'shift_exceptions' => null,
        'shift_id' => 'int64',
        'shift_name' => null,
        'staff_contactid' => 'int64',
        'staff_member' => null,
        'staff_shift_assignment_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'day_of_shift' => 'dayOfShift',
        'shift_applicability_interval' => 'shiftApplicabilityInterval',
        'shift_applicability_interval_from' => 'shiftApplicabilityIntervalFrom',
        'shift_applicability_interval_to' => 'shiftApplicabilityIntervalTo',
        'shift_exceptions' => 'shiftExceptions',
        'shift_id' => 'shiftId',
        'shift_name' => 'shiftName',
        'staff_contactid' => 'staffContactid',
        'staff_member' => 'staffMember',
        'staff_shift_assignment_id' => 'staffShiftAssignmentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'day_of_shift' => 'setDayOfShift',
        'shift_applicability_interval' => 'setShiftApplicabilityInterval',
        'shift_applicability_interval_from' => 'setShiftApplicabilityIntervalFrom',
        'shift_applicability_interval_to' => 'setShiftApplicabilityIntervalTo',
        'shift_exceptions' => 'setShiftExceptions',
        'shift_id' => 'setShiftId',
        'shift_name' => 'setShiftName',
        'staff_contactid' => 'setStaffContactid',
        'staff_member' => 'setStaffMember',
        'staff_shift_assignment_id' => 'setStaffShiftAssignmentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'day_of_shift' => 'getDayOfShift',
        'shift_applicability_interval' => 'getShiftApplicabilityInterval',
        'shift_applicability_interval_from' => 'getShiftApplicabilityIntervalFrom',
        'shift_applicability_interval_to' => 'getShiftApplicabilityIntervalTo',
        'shift_exceptions' => 'getShiftExceptions',
        'shift_id' => 'getShiftId',
        'shift_name' => 'getShiftName',
        'staff_contactid' => 'getStaffContactid',
        'staff_member' => 'getStaffMember',
        'staff_shift_assignment_id' => 'getStaffShiftAssignmentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DAY_OF_SHIFT_MONDAY = 'MONDAY';
    const DAY_OF_SHIFT_TUESDAY = 'TUESDAY';
    const DAY_OF_SHIFT_WEDNESDAY = 'WEDNESDAY';
    const DAY_OF_SHIFT_THURSDAY = 'THURSDAY';
    const DAY_OF_SHIFT_FRIDAY = 'FRIDAY';
    const DAY_OF_SHIFT_SATURDAY = 'SATURDAY';
    const DAY_OF_SHIFT_SUNDAY = 'SUNDAY';
    const DAY_OF_SHIFT_EVERYDAY = 'EVERYDAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDayOfShiftAllowableValues()
    {
        return [
            self::DAY_OF_SHIFT_MONDAY,
            self::DAY_OF_SHIFT_TUESDAY,
            self::DAY_OF_SHIFT_WEDNESDAY,
            self::DAY_OF_SHIFT_THURSDAY,
            self::DAY_OF_SHIFT_FRIDAY,
            self::DAY_OF_SHIFT_SATURDAY,
            self::DAY_OF_SHIFT_SUNDAY,
            self::DAY_OF_SHIFT_EVERYDAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['day_of_shift'] = isset($data['day_of_shift']) ? $data['day_of_shift'] : null;
        $this->container['shift_applicability_interval'] = isset($data['shift_applicability_interval']) ? $data['shift_applicability_interval'] : null;
        $this->container['shift_applicability_interval_from'] = isset($data['shift_applicability_interval_from']) ? $data['shift_applicability_interval_from'] : null;
        $this->container['shift_applicability_interval_to'] = isset($data['shift_applicability_interval_to']) ? $data['shift_applicability_interval_to'] : null;
        $this->container['shift_exceptions'] = isset($data['shift_exceptions']) ? $data['shift_exceptions'] : null;
        $this->container['shift_id'] = isset($data['shift_id']) ? $data['shift_id'] : null;
        $this->container['shift_name'] = isset($data['shift_name']) ? $data['shift_name'] : null;
        $this->container['staff_contactid'] = isset($data['staff_contactid']) ? $data['staff_contactid'] : null;
        $this->container['staff_member'] = isset($data['staff_member']) ? $data['staff_member'] : null;
        $this->container['staff_shift_assignment_id'] = isset($data['staff_shift_assignment_id']) ? $data['staff_shift_assignment_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDayOfShiftAllowableValues();
        if (!is_null($this->container['day_of_shift']) && !in_array($this->container['day_of_shift'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'day_of_shift', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets day_of_shift
     *
     * @return string
     */
    public function getDayOfShift()
    {
        return $this->container['day_of_shift'];
    }

    /**
     * Sets day_of_shift
     *
     * @param string $day_of_shift day_of_shift
     *
     * @return $this
     */
    public function setDayOfShift($day_of_shift)
    {
        $allowedValues = $this->getDayOfShiftAllowableValues();
        if (!is_null($day_of_shift) && !in_array($day_of_shift, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'day_of_shift', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['day_of_shift'] = $day_of_shift;

        return $this;
    }

    /**
     * Gets shift_applicability_interval
     *
     * @return \Swagger\Client\Model\TimingInterval
     */
    public function getShiftApplicabilityInterval()
    {
        return $this->container['shift_applicability_interval'];
    }

    /**
     * Sets shift_applicability_interval
     *
     * @param \Swagger\Client\Model\TimingInterval $shift_applicability_interval shift_applicability_interval
     *
     * @return $this
     */
    public function setShiftApplicabilityInterval($shift_applicability_interval)
    {
        $this->container['shift_applicability_interval'] = $shift_applicability_interval;

        return $this;
    }

    /**
     * Gets shift_applicability_interval_from
     *
     * @return string
     */
    public function getShiftApplicabilityIntervalFrom()
    {
        return $this->container['shift_applicability_interval_from'];
    }

    /**
     * Sets shift_applicability_interval_from
     *
     * @param string $shift_applicability_interval_from shift_applicability_interval_from
     *
     * @return $this
     */
    public function setShiftApplicabilityIntervalFrom($shift_applicability_interval_from)
    {
        $this->container['shift_applicability_interval_from'] = $shift_applicability_interval_from;

        return $this;
    }

    /**
     * Gets shift_applicability_interval_to
     *
     * @return string
     */
    public function getShiftApplicabilityIntervalTo()
    {
        return $this->container['shift_applicability_interval_to'];
    }

    /**
     * Sets shift_applicability_interval_to
     *
     * @param string $shift_applicability_interval_to shift_applicability_interval_to
     *
     * @return $this
     */
    public function setShiftApplicabilityIntervalTo($shift_applicability_interval_to)
    {
        $this->container['shift_applicability_interval_to'] = $shift_applicability_interval_to;

        return $this;
    }

    /**
     * Gets shift_exceptions
     *
     * @return \Swagger\Client\Model\ShiftExceptions[]
     */
    public function getShiftExceptions()
    {
        return $this->container['shift_exceptions'];
    }

    /**
     * Sets shift_exceptions
     *
     * @param \Swagger\Client\Model\ShiftExceptions[] $shift_exceptions shift_exceptions
     *
     * @return $this
     */
    public function setShiftExceptions($shift_exceptions)
    {
        $this->container['shift_exceptions'] = $shift_exceptions;

        return $this;
    }

    /**
     * Gets shift_id
     *
     * @return int
     */
    public function getShiftId()
    {
        return $this->container['shift_id'];
    }

    /**
     * Sets shift_id
     *
     * @param int $shift_id shift_id
     *
     * @return $this
     */
    public function setShiftId($shift_id)
    {
        $this->container['shift_id'] = $shift_id;

        return $this;
    }

    /**
     * Gets shift_name
     *
     * @return string
     */
    public function getShiftName()
    {
        return $this->container['shift_name'];
    }

    /**
     * Sets shift_name
     *
     * @param string $shift_name shift_name
     *
     * @return $this
     */
    public function setShiftName($shift_name)
    {
        $this->container['shift_name'] = $shift_name;

        return $this;
    }

    /**
     * Gets staff_contactid
     *
     * @return int
     */
    public function getStaffContactid()
    {
        return $this->container['staff_contactid'];
    }

    /**
     * Sets staff_contactid
     *
     * @param int $staff_contactid staff_contactid
     *
     * @return $this
     */
    public function setStaffContactid($staff_contactid)
    {
        $this->container['staff_contactid'] = $staff_contactid;

        return $this;
    }

    /**
     * Gets staff_member
     *
     * @return \Swagger\Client\Model\Staff
     */
    public function getStaffMember()
    {
        return $this->container['staff_member'];
    }

    /**
     * Sets staff_member
     *
     * @param \Swagger\Client\Model\Staff $staff_member staff_member
     *
     * @return $this
     */
    public function setStaffMember($staff_member)
    {
        $this->container['staff_member'] = $staff_member;

        return $this;
    }

    /**
     * Gets staff_shift_assignment_id
     *
     * @return int
     */
    public function getStaffShiftAssignmentId()
    {
        return $this->container['staff_shift_assignment_id'];
    }

    /**
     * Sets staff_shift_assignment_id
     *
     * @param int $staff_shift_assignment_id staff_shift_assignment_id
     *
     * @return $this
     */
    public function setStaffShiftAssignmentId($staff_shift_assignment_id)
    {
        $this->container['staff_shift_assignment_id'] = $staff_shift_assignment_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


