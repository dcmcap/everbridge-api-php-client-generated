<?php
/**
 * TimeFrameWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TimeFrameWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeFrameWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimeFrameWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'days' => 'int[]',
        'from_hour' => 'int',
        'from_min' => 'int',
        'name' => 'string',
        'to_hour' => 'int',
        'to_min' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'days' => 'int32',
        'from_hour' => 'int32',
        'from_min' => 'int32',
        'name' => null,
        'to_hour' => 'int32',
        'to_min' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'days' => 'days',
        'from_hour' => 'fromHour',
        'from_min' => 'fromMin',
        'name' => 'name',
        'to_hour' => 'toHour',
        'to_min' => 'toMin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'days' => 'setDays',
        'from_hour' => 'setFromHour',
        'from_min' => 'setFromMin',
        'name' => 'setName',
        'to_hour' => 'setToHour',
        'to_min' => 'setToMin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'days' => 'getDays',
        'from_hour' => 'getFromHour',
        'from_min' => 'getFromMin',
        'name' => 'getName',
        'to_hour' => 'getToHour',
        'to_min' => 'getToMin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['days'] = isset($data['days']) ? $data['days'] : null;
        $this->container['from_hour'] = isset($data['from_hour']) ? $data['from_hour'] : null;
        $this->container['from_min'] = isset($data['from_min']) ? $data['from_min'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['to_hour'] = isset($data['to_hour']) ? $data['to_hour'] : null;
        $this->container['to_min'] = isset($data['to_min']) ? $data['to_min'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets days
     *
     * @return int[]
     */
    public function getDays()
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param int[] $days days
     *
     * @return $this
     */
    public function setDays($days)
    {
        $this->container['days'] = $days;

        return $this;
    }

    /**
     * Gets from_hour
     *
     * @return int
     */
    public function getFromHour()
    {
        return $this->container['from_hour'];
    }

    /**
     * Sets from_hour
     *
     * @param int $from_hour from_hour
     *
     * @return $this
     */
    public function setFromHour($from_hour)
    {
        $this->container['from_hour'] = $from_hour;

        return $this;
    }

    /**
     * Gets from_min
     *
     * @return int
     */
    public function getFromMin()
    {
        return $this->container['from_min'];
    }

    /**
     * Sets from_min
     *
     * @param int $from_min from_min
     *
     * @return $this
     */
    public function setFromMin($from_min)
    {
        $this->container['from_min'] = $from_min;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets to_hour
     *
     * @return int
     */
    public function getToHour()
    {
        return $this->container['to_hour'];
    }

    /**
     * Sets to_hour
     *
     * @param int $to_hour to_hour
     *
     * @return $this
     */
    public function setToHour($to_hour)
    {
        $this->container['to_hour'] = $to_hour;

        return $this;
    }

    /**
     * Gets to_min
     *
     * @return int
     */
    public function getToMin()
    {
        return $this->container['to_min'];
    }

    /**
     * Sets to_min
     *
     * @param int $to_min to_min
     *
     * @return $this
     */
    public function setToMin($to_min)
    {
        $this->container['to_min'] = $to_min;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


