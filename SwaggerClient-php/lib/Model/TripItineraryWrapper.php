<?php
/**
 * TripItineraryWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TripItineraryWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TripItineraryWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TripItineraryWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_date' => 'string',
        'external_itinerary_id' => 'string',
        'id' => 'string',
        'itinerary_source' => 'string',
        'itinerary_status' => 'string',
        'last_modified_date' => 'string',
        'organization_id' => 'int',
        'passengers' => '\Swagger\Client\Model\TripPersonProfile[]',
        'pnr' => 'string',
        'segments' => '\Swagger\Client\Model\TripSegment[]',
        'travel_arranger' => '\Swagger\Client\Model\TripPersonProfile'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_date' => null,
        'external_itinerary_id' => null,
        'id' => null,
        'itinerary_source' => null,
        'itinerary_status' => null,
        'last_modified_date' => null,
        'organization_id' => 'int64',
        'passengers' => null,
        'pnr' => null,
        'segments' => null,
        'travel_arranger' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_date' => 'createdDate',
        'external_itinerary_id' => 'externalItineraryId',
        'id' => 'id',
        'itinerary_source' => 'itinerarySource',
        'itinerary_status' => 'itineraryStatus',
        'last_modified_date' => 'lastModifiedDate',
        'organization_id' => 'organizationId',
        'passengers' => 'passengers',
        'pnr' => 'pnr',
        'segments' => 'segments',
        'travel_arranger' => 'travelArranger'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_date' => 'setCreatedDate',
        'external_itinerary_id' => 'setExternalItineraryId',
        'id' => 'setId',
        'itinerary_source' => 'setItinerarySource',
        'itinerary_status' => 'setItineraryStatus',
        'last_modified_date' => 'setLastModifiedDate',
        'organization_id' => 'setOrganizationId',
        'passengers' => 'setPassengers',
        'pnr' => 'setPnr',
        'segments' => 'setSegments',
        'travel_arranger' => 'setTravelArranger'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_date' => 'getCreatedDate',
        'external_itinerary_id' => 'getExternalItineraryId',
        'id' => 'getId',
        'itinerary_source' => 'getItinerarySource',
        'itinerary_status' => 'getItineraryStatus',
        'last_modified_date' => 'getLastModifiedDate',
        'organization_id' => 'getOrganizationId',
        'passengers' => 'getPassengers',
        'pnr' => 'getPnr',
        'segments' => 'getSegments',
        'travel_arranger' => 'getTravelArranger'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['external_itinerary_id'] = isset($data['external_itinerary_id']) ? $data['external_itinerary_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['itinerary_source'] = isset($data['itinerary_source']) ? $data['itinerary_source'] : null;
        $this->container['itinerary_status'] = isset($data['itinerary_status']) ? $data['itinerary_status'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['passengers'] = isset($data['passengers']) ? $data['passengers'] : null;
        $this->container['pnr'] = isset($data['pnr']) ? $data['pnr'] : null;
        $this->container['segments'] = isset($data['segments']) ? $data['segments'] : null;
        $this->container['travel_arranger'] = isset($data['travel_arranger']) ? $data['travel_arranger'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_date
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets external_itinerary_id
     *
     * @return string
     */
    public function getExternalItineraryId()
    {
        return $this->container['external_itinerary_id'];
    }

    /**
     * Sets external_itinerary_id
     *
     * @param string $external_itinerary_id external_itinerary_id
     *
     * @return $this
     */
    public function setExternalItineraryId($external_itinerary_id)
    {
        $this->container['external_itinerary_id'] = $external_itinerary_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets itinerary_source
     *
     * @return string
     */
    public function getItinerarySource()
    {
        return $this->container['itinerary_source'];
    }

    /**
     * Sets itinerary_source
     *
     * @param string $itinerary_source itinerary_source
     *
     * @return $this
     */
    public function setItinerarySource($itinerary_source)
    {
        $this->container['itinerary_source'] = $itinerary_source;

        return $this;
    }

    /**
     * Gets itinerary_status
     *
     * @return string
     */
    public function getItineraryStatus()
    {
        return $this->container['itinerary_status'];
    }

    /**
     * Sets itinerary_status
     *
     * @param string $itinerary_status itinerary_status
     *
     * @return $this
     */
    public function setItineraryStatus($itinerary_status)
    {
        $this->container['itinerary_status'] = $itinerary_status;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return string
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param string $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets passengers
     *
     * @return \Swagger\Client\Model\TripPersonProfile[]
     */
    public function getPassengers()
    {
        return $this->container['passengers'];
    }

    /**
     * Sets passengers
     *
     * @param \Swagger\Client\Model\TripPersonProfile[] $passengers passengers
     *
     * @return $this
     */
    public function setPassengers($passengers)
    {
        $this->container['passengers'] = $passengers;

        return $this;
    }

    /**
     * Gets pnr
     *
     * @return string
     */
    public function getPnr()
    {
        return $this->container['pnr'];
    }

    /**
     * Sets pnr
     *
     * @param string $pnr pnr
     *
     * @return $this
     */
    public function setPnr($pnr)
    {
        $this->container['pnr'] = $pnr;

        return $this;
    }

    /**
     * Gets segments
     *
     * @return \Swagger\Client\Model\TripSegment[]
     */
    public function getSegments()
    {
        return $this->container['segments'];
    }

    /**
     * Sets segments
     *
     * @param \Swagger\Client\Model\TripSegment[] $segments segments
     *
     * @return $this
     */
    public function setSegments($segments)
    {
        $this->container['segments'] = $segments;

        return $this;
    }

    /**
     * Gets travel_arranger
     *
     * @return \Swagger\Client\Model\TripPersonProfile
     */
    public function getTravelArranger()
    {
        return $this->container['travel_arranger'];
    }

    /**
     * Sets travel_arranger
     *
     * @param \Swagger\Client\Model\TripPersonProfile $travel_arranger travel_arranger
     *
     * @return $this
     */
    public function setTravelArranger($travel_arranger)
    {
        $this->container['travel_arranger'] = $travel_arranger;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


