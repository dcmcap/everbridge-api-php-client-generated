<?php
/**
 * UploadContactWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UploadContactWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadContactWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UploadContactWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contact_id' => 'int',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'error_message' => 'string',
        'external_id' => 'string',
        'first_name' => 'string',
        'id' => 'int',
        'last_modified_date' => '\DateTime',
        'last_name' => 'string',
        'middle_initial' => 'string',
        'record_type' => 'string',
        'upload_batch_id' => 'int',
        'upload_errors' => '\Swagger\Client\Model\UploadErrorWrapper[]',
        'upload_record_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contact_id' => 'int64',
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'error_message' => null,
        'external_id' => null,
        'first_name' => null,
        'id' => 'int64',
        'last_modified_date' => 'date-time',
        'last_name' => null,
        'middle_initial' => null,
        'record_type' => null,
        'upload_batch_id' => 'int64',
        'upload_errors' => null,
        'upload_record_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_id' => 'contactId',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'error_message' => 'errorMessage',
        'external_id' => 'externalId',
        'first_name' => 'firstName',
        'id' => 'id',
        'last_modified_date' => 'lastModifiedDate',
        'last_name' => 'lastName',
        'middle_initial' => 'middleInitial',
        'record_type' => 'recordType',
        'upload_batch_id' => 'uploadBatchId',
        'upload_errors' => 'uploadErrors',
        'upload_record_status' => 'uploadRecordStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_id' => 'setContactId',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'error_message' => 'setErrorMessage',
        'external_id' => 'setExternalId',
        'first_name' => 'setFirstName',
        'id' => 'setId',
        'last_modified_date' => 'setLastModifiedDate',
        'last_name' => 'setLastName',
        'middle_initial' => 'setMiddleInitial',
        'record_type' => 'setRecordType',
        'upload_batch_id' => 'setUploadBatchId',
        'upload_errors' => 'setUploadErrors',
        'upload_record_status' => 'setUploadRecordStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_id' => 'getContactId',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'error_message' => 'getErrorMessage',
        'external_id' => 'getExternalId',
        'first_name' => 'getFirstName',
        'id' => 'getId',
        'last_modified_date' => 'getLastModifiedDate',
        'last_name' => 'getLastName',
        'middle_initial' => 'getMiddleInitial',
        'record_type' => 'getRecordType',
        'upload_batch_id' => 'getUploadBatchId',
        'upload_errors' => 'getUploadErrors',
        'upload_record_status' => 'getUploadRecordStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ERROR_MESSAGE_UPLOAD_FILE_DENCRYPT_FAIL = 'UPLOAD_FILE_DENCRYPT_FAIL';
    const ERROR_MESSAGE_HEADER_NOT_FOUND_ERROR = 'HEADER_NOT_FOUND_ERROR';
    const ERROR_MESSAGE_HEADER_INVALID_HEADER_IN_CSV_ERROR = 'HEADER_INVALID_HEADER_IN_CSV_ERROR';
    const ERROR_MESSAGE_HEADER_PATHS_NOT_IN_ORG_PATHS_ERROR = 'HEADER_PATHS_NOT_IN_ORG_PATHS_ERROR';
    const ERROR_MESSAGE_HEADER_EXTERNALID_ERROR = 'HEADER_EXTERNALID_ERROR';
    const ERROR_MESSAGE_HEADER_RESTORED_ID_ERROR = 'HEADER_RESTORED_ID_ERROR';
    const ERROR_MESSAGE_HEADER_FIRSTNAME_ERROR = 'HEADER_FIRSTNAME_ERROR';
    const ERROR_MESSAGE_HEADER_LASTNAME_ERROR = 'HEADER_LASTNAME_ERROR';
    const ERROR_MESSAGE_HEADER_RECORDTYPE_ERROR = 'HEADER_RECORDTYPE_ERROR';
    const ERROR_MESSAGE_HEADER_GROUP_ERROR = 'HEADER_GROUP_ERROR';
    const ERROR_MESSAGE_HEADER_GROUP_REMOVE_ERROR = 'HEADER_GROUP_REMOVE_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ERROR = 'UPLOADCONTACT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_NULL_ERROR = 'UPLOADCONTACT_EXTERNALID_NULL_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_ID_ERROR = 'UPLOADCONTACT_RESTORED_CONTACT_ID_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_STILL_ALIVE_ERROR = 'UPLOADCONTACT_RESTORED_CONTACT_STILL_ALIVE_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_NOT_EXISTS = 'UPLOADCONTACT_RESTORED_CONTACT_NOT_EXISTS';
    const ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_ORGANIZATION_ERROR = 'UPLOADCONTACT_RESTORED_CONTACT_ORGANIZATION_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_LENGTH_ERROR = 'UPLOADCONTACT_EXTERNALID_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_NOT_EXISTS_IN_ORG_ERROR = 'UPLOADCONTACT_EXTERNALID_NOT_EXISTS_IN_ORG_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_DUPLICATE_IN_ORG = 'UPLOADCONTACT_EXTERNALID_DUPLICATE_IN_ORG';
    const ERROR_MESSAGE_UPLOADCONTACT_SSOID_DUPLICATE_IN_ORG = 'UPLOADCONTACT_SSOID_DUPLICATE_IN_ORG';
    const ERROR_MESSAGE_UPLOADCONTACT_SSOID_FEATURE_NOT_BOUGHT_IN_ORG = 'UPLOADCONTACT_SSOID_FEATURE_NOT_BOUGHT_IN_ORG';
    const ERROR_MESSAGE_UPLOADCONTACT_RECORD_TYPE_NULL_ERROR = 'UPLOADCONTACT_RECORD_TYPE_NULL_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_RECORD_TYPE_LENGTH_ERROR = 'UPLOADCONTACT_RECORD_TYPE_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_RECORD_TYPE_NOT_FOUND_IN_ORG = 'UPLOADCONTACT_RECORD_TYPE_NOT_FOUND_IN_ORG';
    const ERROR_MESSAGE_UPLOADCONTACT_FIRSTNAME_EMPTY_ERROR = 'UPLOADCONTACT_FIRSTNAME_EMPTY_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_LASTNAME_EMPTY_ERROR = 'UPLOADCONTACT_LASTNAME_EMPTY_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_GROUP_LENGTH_ERROR = 'UPLOADCONTACT_GROUP_LENGTH_ERROR';
    const ERROR_MESSAGE_NO_PERMISSION_GROUP = 'NO_PERMISSION_GROUP';
    const ERROR_MESSAGE_NO_PERMISSION_CONTACT = 'NO_PERMISSION_CONTACT';
    const ERROR_MESSAGE_UPLOADCONTACT_TRAVEL_ARRANGER_NOT_EXISTS_IN_ORG_ERROR = 'UPLOADCONTACT_TRAVEL_ARRANGER_NOT_EXISTS_IN_ORG_ERROR';
    const ERROR_MESSAGE_NO_GROUP_FOUND = 'NO_GROUP_FOUND';
    const ERROR_MESSAGE_UPLOADCONTACT_REMOVE_GROUP_NOT_FOUND = 'UPLOADCONTACT_REMOVE_GROUP_NOT_FOUND';
    const ERROR_MESSAGE_UPLOADCONTACT_FIRSTNAME_LENGTH_ERROR = 'UPLOADCONTACT_FIRSTNAME_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_MIDDLEINITIAL_LENGTH_ERROR = 'UPLOADCONTACT_MIDDLEINITIAL_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_LASTNAME_LENGTH_ERROR = 'UPLOADCONTACT_LASTNAME_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_SUFFIX_LENGTH_ERROR = 'UPLOADCONTACT_SUFFIX_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_SECURITYPIN_NOT_INTEGER_ERROR = 'UPLOADCONTACT_SECURITYPIN_NOT_INTEGER_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_BUSINESSNAME_LENGTH_ERROR = 'UPLOADCONTACT_BUSINESSNAME_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_COUNTRY_LENGTH_ERROR = 'UPLOADCONTACT_COUNTRY_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_COUNTRY_NOT_DEFINED = 'UPLOADCONTACT_COUNTRY_NOT_DEFINED';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_STREETADDRESS_EMPTY_ERROR = 'UPLOADCONTACT_ADDRESS_STREETADDRESS_EMPTY_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_US_STATE_ERROR = 'UPLOADCONTACT_ADDRESS_US_STATE_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_US_POSTAL_ERROR = 'UPLOADCONTACT_ADDRESS_US_POSTAL_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_LENGTH_ERROR = 'UPLOADCONTACT_ADDRESS_LOCATION_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_EMPTY_ERROR = 'UPLOADCONTACT_ADDRESS_LOCATION_EMPTY_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_STREETADDRESS_LENGTH_ERROR = 'UPLOADCONTACT_ADDRESS_STREETADDRESS_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_SUITE_LENGTH_ERROR = 'UPLOADCONTACT_ADDRESS_SUITE_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_CITY_LENGTH_ERROR = 'UPLOADCONTACT_ADDRESS_CITY_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_COUNTRY_EMPTY_ERROR = 'UPLOADCONTACT_ADDRESS_COUNTRY_EMPTY_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_COUNTRY_LENGTH_ERROR = 'UPLOADCONTACT_ADDRESS_COUNTRY_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_STATE_LENGTH_ERROR = 'UPLOADCONTACT_ADDRESS_STATE_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_POSTAL_LENGTH_ERROR = 'UPLOADCONTACT_ADDRESS_POSTAL_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_ONE_OF_LAT_LON_IS_BLANK = 'UPLOADCONTACT_ADDRESS_ONE_OF_LAT_LON_IS_BLANK';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LAT_IS_NOT_NUMBER = 'UPLOADCONTACT_ADDRESS_LAT_IS_NOT_NUMBER';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LON_IS_NOT_NUMBER = 'UPLOADCONTACT_ADDRESS_LON_IS_NOT_NUMBER';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LAT_NOT_IN_VALID_RANGE = 'UPLOADCONTACT_ADDRESS_LAT_NOT_IN_VALID_RANGE';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LON_NOT_IN_VALID_RANGE = 'UPLOADCONTACT_ADDRESS_LON_NOT_IN_VALID_RANGE';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_NAME_DUPLICATE = 'UPLOADCONTACT_ADDRESS_LOCATION_NAME_DUPLICATE';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_ID_NOT_EXISTS = 'UPLOADCONTACT_ADDRESS_LOCATION_ID_NOT_EXISTS';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_GEOMETRY_NOT_POINT = 'UPLOADCONTACT_ADDRESS_LOCATION_GEOMETRY_NOT_POINT';
    const ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_EMPTY_ERROR = 'UPLOADCONTACT_ATTRIBUTE_NAME_EMPTY_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_NOT_DEFINED_IN_ORG = 'UPLOADCONTACT_ATTRIBUTE_NAME_NOT_DEFINED_IN_ORG';
    const ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_DUPLICATE = 'UPLOADCONTACT_ATTRIBUTE_NAME_DUPLICATE';
    const ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_LENGTH_ERROR = 'UPLOADCONTACT_ATTRIBUTE_NAME_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_VALUE_LENGTH_ERROR = 'UPLOADCONTACT_ATTRIBUTE_VALUE_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_VALUE_FORMAT_ERROR = 'UPLOADCONTACT_ATTRIBUTE_VALUE_FORMAT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_VALUE_NOT_DEFINED_IN_ORG = 'UPLOADCONTACT_ATTRIBUTE_VALUE_NOT_DEFINED_IN_ORG';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_EMPTY = 'UPLOADCONTACT_PATH_PHONE_EMPTY';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONEEXT_LENGTH_ERROR = 'UPLOADCONTACT_PATH_PHONEEXT_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONEEXT_FORMAT_ERROR = 'UPLOADCONTACT_PATH_PHONEEXT_FORMAT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PIN_FORMAT_ERROR = 'UPLOADCONTACT_PATH_PIN_FORMAT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PAGER_SERVICE_NOT_EXIST = 'UPLOADCONTACT_PATH_PAGER_SERVICE_NOT_EXIST';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_CALLINGCODE_NOT_EXIST = 'UPLOADCONTACT_PATH_CALLINGCODE_NOT_EXIST';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_EMAIL_LENGTH_ERROR = 'UPLOADCONTACT_PATH_EMAIL_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_EMAIL_FORMAT_ERROR = 'UPLOADCONTACT_PATH_EMAIL_FORMAT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PLAIN_TEXT_EMAIL_LENGTH_ERROR = 'UPLOADCONTACT_PATH_PLAIN_TEXT_EMAIL_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PLAIN_TEXT_EMAIL_FORMAT_ERROR = 'UPLOADCONTACT_PATH_PLAIN_TEXT_EMAIL_FORMAT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_NANP_ERROR = 'UPLOADCONTACT_PATH_PHONE_NANP_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_NANP_LENGTH_ERROR = 'UPLOADCONTACT_PATH_PHONE_NANP_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_FORMAT_ERROR = 'UPLOADCONTACT_PATH_PHONE_FORMAT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_NOT_NANP_LENGTH_ERROR = 'UPLOADCONTACT_PATH_PHONE_NOT_NANP_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_PATH_COUNTRY_LENGTH_ERROR = 'UPLOADCONTACT_PATH_COUNTRY_LENGTH_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_TTYTTD_COUNTRY_NOT_1_ERROR = 'UPLOADCONTACT_TTYTTD_COUNTRY_NOT_1_ERROR';
    const ERROR_MESSAGE_ACCOUNTUPLOAD_ACCOUNT_NOT_EXISTS = 'ACCOUNTUPLOAD_ACCOUNT_NOT_EXISTS';
    const ERROR_MESSAGE_ACCOUNTUPLOAD_ACCOUNT_NO_ORGANIZATIONS_ERROR = 'ACCOUNTUPLOAD_ACCOUNT_NO_ORGANIZATIONS_ERROR';
    const ERROR_MESSAGE_ACCOUNTUPLOAD_ACCOUNT_CSV_NO_ORG_HEADER_ERROR = 'ACCOUNTUPLOAD_ACCOUNT_CSV_NO_ORG_HEADER_ERROR';
    const ERROR_MESSAGE_ACCOUNTUPLOAD_ORG_NOT_IN_ACCOUNT_ERROR = 'ACCOUNTUPLOAD_ORG_NOT_IN_ACCOUNT_ERROR';
    const ERROR_MESSAGE_ACCOUNTUPLOAD_ORG_EMPTY_ACCOUNT_ERROR = 'ACCOUNTUPLOAD_ORG_EMPTY_ACCOUNT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_UNKNOWN_ERROR = 'UPLOADCONTACT_UNKNOWN_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_COLUMN_NUMBER_NOT_EQUAL = 'UPLOADCONTACT_COLUMN_NUMBER_NOT_EQUAL';
    const ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_COUNT_ERROR = 'UPLOADCONTACT_ADDRESS_COUNT_ERROR';
    const ERROR_MESSAGE_UPLOADCONTACT_GROUP_NAME_DUPLICATE = 'UPLOADCONTACT_GROUP_NAME_DUPLICATE';
    const ERROR_MESSAGE_UPLOADCONTACT_FAILED_BY_FILES_PARTIALLY_MISSING = 'UPLOADCONTACT_FAILED_BY_FILES_PARTIALLY_MISSING';
    const UPLOAD_RECORD_STATUS_LOADED_SUCCESS = 'LOADED_SUCCESS';
    const UPLOAD_RECORD_STATUS_LOADED_WITH_ERROR = 'LOADED_WITH_ERROR';
    const UPLOAD_RECORD_STATUS_NOT_LOADED = 'NOT_LOADED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorMessageAllowableValues()
    {
        return [
            self::ERROR_MESSAGE_UPLOAD_FILE_DENCRYPT_FAIL,
            self::ERROR_MESSAGE_HEADER_NOT_FOUND_ERROR,
            self::ERROR_MESSAGE_HEADER_INVALID_HEADER_IN_CSV_ERROR,
            self::ERROR_MESSAGE_HEADER_PATHS_NOT_IN_ORG_PATHS_ERROR,
            self::ERROR_MESSAGE_HEADER_EXTERNALID_ERROR,
            self::ERROR_MESSAGE_HEADER_RESTORED_ID_ERROR,
            self::ERROR_MESSAGE_HEADER_FIRSTNAME_ERROR,
            self::ERROR_MESSAGE_HEADER_LASTNAME_ERROR,
            self::ERROR_MESSAGE_HEADER_RECORDTYPE_ERROR,
            self::ERROR_MESSAGE_HEADER_GROUP_ERROR,
            self::ERROR_MESSAGE_HEADER_GROUP_REMOVE_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_NULL_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_ID_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_STILL_ALIVE_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_NOT_EXISTS,
            self::ERROR_MESSAGE_UPLOADCONTACT_RESTORED_CONTACT_ORGANIZATION_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_NOT_EXISTS_IN_ORG_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_EXTERNALID_DUPLICATE_IN_ORG,
            self::ERROR_MESSAGE_UPLOADCONTACT_SSOID_DUPLICATE_IN_ORG,
            self::ERROR_MESSAGE_UPLOADCONTACT_SSOID_FEATURE_NOT_BOUGHT_IN_ORG,
            self::ERROR_MESSAGE_UPLOADCONTACT_RECORD_TYPE_NULL_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_RECORD_TYPE_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_RECORD_TYPE_NOT_FOUND_IN_ORG,
            self::ERROR_MESSAGE_UPLOADCONTACT_FIRSTNAME_EMPTY_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_LASTNAME_EMPTY_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_GROUP_LENGTH_ERROR,
            self::ERROR_MESSAGE_NO_PERMISSION_GROUP,
            self::ERROR_MESSAGE_NO_PERMISSION_CONTACT,
            self::ERROR_MESSAGE_UPLOADCONTACT_TRAVEL_ARRANGER_NOT_EXISTS_IN_ORG_ERROR,
            self::ERROR_MESSAGE_NO_GROUP_FOUND,
            self::ERROR_MESSAGE_UPLOADCONTACT_REMOVE_GROUP_NOT_FOUND,
            self::ERROR_MESSAGE_UPLOADCONTACT_FIRSTNAME_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_MIDDLEINITIAL_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_LASTNAME_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_SUFFIX_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_SECURITYPIN_NOT_INTEGER_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_BUSINESSNAME_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_COUNTRY_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_COUNTRY_NOT_DEFINED,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_STREETADDRESS_EMPTY_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_US_STATE_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_US_POSTAL_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_EMPTY_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_STREETADDRESS_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_SUITE_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_CITY_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_COUNTRY_EMPTY_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_COUNTRY_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_STATE_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_POSTAL_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_ONE_OF_LAT_LON_IS_BLANK,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LAT_IS_NOT_NUMBER,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LON_IS_NOT_NUMBER,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LAT_NOT_IN_VALID_RANGE,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LON_NOT_IN_VALID_RANGE,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_NAME_DUPLICATE,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_ID_NOT_EXISTS,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_LOCATION_GEOMETRY_NOT_POINT,
            self::ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_EMPTY_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_NOT_DEFINED_IN_ORG,
            self::ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_DUPLICATE,
            self::ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_NAME_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_VALUE_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_VALUE_FORMAT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_ATTRIBUTE_VALUE_NOT_DEFINED_IN_ORG,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_EMPTY,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONEEXT_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONEEXT_FORMAT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PIN_FORMAT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PAGER_SERVICE_NOT_EXIST,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_CALLINGCODE_NOT_EXIST,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_EMAIL_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_EMAIL_FORMAT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PLAIN_TEXT_EMAIL_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PLAIN_TEXT_EMAIL_FORMAT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_NANP_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_NANP_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_FORMAT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_PHONE_NOT_NANP_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_PATH_COUNTRY_LENGTH_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_TTYTTD_COUNTRY_NOT_1_ERROR,
            self::ERROR_MESSAGE_ACCOUNTUPLOAD_ACCOUNT_NOT_EXISTS,
            self::ERROR_MESSAGE_ACCOUNTUPLOAD_ACCOUNT_NO_ORGANIZATIONS_ERROR,
            self::ERROR_MESSAGE_ACCOUNTUPLOAD_ACCOUNT_CSV_NO_ORG_HEADER_ERROR,
            self::ERROR_MESSAGE_ACCOUNTUPLOAD_ORG_NOT_IN_ACCOUNT_ERROR,
            self::ERROR_MESSAGE_ACCOUNTUPLOAD_ORG_EMPTY_ACCOUNT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_UNKNOWN_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_COLUMN_NUMBER_NOT_EQUAL,
            self::ERROR_MESSAGE_UPLOADCONTACT_ADDRESS_COUNT_ERROR,
            self::ERROR_MESSAGE_UPLOADCONTACT_GROUP_NAME_DUPLICATE,
            self::ERROR_MESSAGE_UPLOADCONTACT_FAILED_BY_FILES_PARTIALLY_MISSING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadRecordStatusAllowableValues()
    {
        return [
            self::UPLOAD_RECORD_STATUS_LOADED_SUCCESS,
            self::UPLOAD_RECORD_STATUS_LOADED_WITH_ERROR,
            self::UPLOAD_RECORD_STATUS_NOT_LOADED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_initial'] = isset($data['middle_initial']) ? $data['middle_initial'] : null;
        $this->container['record_type'] = isset($data['record_type']) ? $data['record_type'] : null;
        $this->container['upload_batch_id'] = isset($data['upload_batch_id']) ? $data['upload_batch_id'] : null;
        $this->container['upload_errors'] = isset($data['upload_errors']) ? $data['upload_errors'] : null;
        $this->container['upload_record_status'] = isset($data['upload_record_status']) ? $data['upload_record_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getErrorMessageAllowableValues();
        if (!is_null($this->container['error_message']) && !in_array($this->container['error_message'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'error_message', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUploadRecordStatusAllowableValues();
        if (!is_null($this->container['upload_record_status']) && !in_array($this->container['upload_record_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'upload_record_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $allowedValues = $this->getErrorMessageAllowableValues();
        if (!is_null($error_message) && !in_array($error_message, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'error_message', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_initial
     *
     * @return string
     */
    public function getMiddleInitial()
    {
        return $this->container['middle_initial'];
    }

    /**
     * Sets middle_initial
     *
     * @param string $middle_initial middle_initial
     *
     * @return $this
     */
    public function setMiddleInitial($middle_initial)
    {
        $this->container['middle_initial'] = $middle_initial;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string $record_type record_type
     *
     * @return $this
     */
    public function setRecordType($record_type)
    {
        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets upload_batch_id
     *
     * @return int
     */
    public function getUploadBatchId()
    {
        return $this->container['upload_batch_id'];
    }

    /**
     * Sets upload_batch_id
     *
     * @param int $upload_batch_id upload_batch_id
     *
     * @return $this
     */
    public function setUploadBatchId($upload_batch_id)
    {
        $this->container['upload_batch_id'] = $upload_batch_id;

        return $this;
    }

    /**
     * Gets upload_errors
     *
     * @return \Swagger\Client\Model\UploadErrorWrapper[]
     */
    public function getUploadErrors()
    {
        return $this->container['upload_errors'];
    }

    /**
     * Sets upload_errors
     *
     * @param \Swagger\Client\Model\UploadErrorWrapper[] $upload_errors upload_errors
     *
     * @return $this
     */
    public function setUploadErrors($upload_errors)
    {
        $this->container['upload_errors'] = $upload_errors;

        return $this;
    }

    /**
     * Gets upload_record_status
     *
     * @return string
     */
    public function getUploadRecordStatus()
    {
        return $this->container['upload_record_status'];
    }

    /**
     * Sets upload_record_status
     *
     * @param string $upload_record_status upload_record_status
     *
     * @return $this
     */
    public function setUploadRecordStatus($upload_record_status)
    {
        $allowedValues = $this->getUploadRecordStatusAllowableValues();
        if (!is_null($upload_record_status) && !in_array($upload_record_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'upload_record_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_record_status'] = $upload_record_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


