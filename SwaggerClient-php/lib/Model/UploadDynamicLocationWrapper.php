<?php
/**
 * UploadDynamicLocationWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UploadDynamicLocationWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadDynamicLocationWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UploadDynamicLocationWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arrive_date' => 'string',
        'city' => 'string',
        'country' => 'string',
        'created_date' => '\DateTime',
        'created_id' => 'int',
        'created_name' => 'string',
        'expire_date' => 'string',
        'external_id' => 'string',
        'floor_no' => 'string',
        'id' => 'int',
        'last_modified_date' => '\DateTime',
        'lat' => 'string',
        'location_id' => 'string',
        'lon' => 'string',
        'postal_code' => 'string',
        'reference_id' => 'int',
        'room_no' => 'string',
        'source' => 'string',
        'state' => 'string',
        'street' => 'string',
        'suite' => 'string',
        'upload_batch_id' => 'int',
        'upload_errors' => '\Swagger\Client\Model\UploadErrorWrapper[]',
        'upload_record_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'arrive_date' => null,
        'city' => null,
        'country' => null,
        'created_date' => 'date-time',
        'created_id' => 'int64',
        'created_name' => null,
        'expire_date' => null,
        'external_id' => null,
        'floor_no' => null,
        'id' => 'int64',
        'last_modified_date' => 'date-time',
        'lat' => null,
        'location_id' => null,
        'lon' => null,
        'postal_code' => null,
        'reference_id' => 'int64',
        'room_no' => null,
        'source' => null,
        'state' => null,
        'street' => null,
        'suite' => null,
        'upload_batch_id' => 'int64',
        'upload_errors' => null,
        'upload_record_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arrive_date' => 'arriveDate',
        'city' => 'city',
        'country' => 'country',
        'created_date' => 'createdDate',
        'created_id' => 'createdId',
        'created_name' => 'createdName',
        'expire_date' => 'expireDate',
        'external_id' => 'externalId',
        'floor_no' => 'floorNo',
        'id' => 'id',
        'last_modified_date' => 'lastModifiedDate',
        'lat' => 'lat',
        'location_id' => 'locationId',
        'lon' => 'lon',
        'postal_code' => 'postalCode',
        'reference_id' => 'referenceId',
        'room_no' => 'roomNo',
        'source' => 'source',
        'state' => 'state',
        'street' => 'street',
        'suite' => 'suite',
        'upload_batch_id' => 'uploadBatchId',
        'upload_errors' => 'uploadErrors',
        'upload_record_status' => 'uploadRecordStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arrive_date' => 'setArriveDate',
        'city' => 'setCity',
        'country' => 'setCountry',
        'created_date' => 'setCreatedDate',
        'created_id' => 'setCreatedId',
        'created_name' => 'setCreatedName',
        'expire_date' => 'setExpireDate',
        'external_id' => 'setExternalId',
        'floor_no' => 'setFloorNo',
        'id' => 'setId',
        'last_modified_date' => 'setLastModifiedDate',
        'lat' => 'setLat',
        'location_id' => 'setLocationId',
        'lon' => 'setLon',
        'postal_code' => 'setPostalCode',
        'reference_id' => 'setReferenceId',
        'room_no' => 'setRoomNo',
        'source' => 'setSource',
        'state' => 'setState',
        'street' => 'setStreet',
        'suite' => 'setSuite',
        'upload_batch_id' => 'setUploadBatchId',
        'upload_errors' => 'setUploadErrors',
        'upload_record_status' => 'setUploadRecordStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arrive_date' => 'getArriveDate',
        'city' => 'getCity',
        'country' => 'getCountry',
        'created_date' => 'getCreatedDate',
        'created_id' => 'getCreatedId',
        'created_name' => 'getCreatedName',
        'expire_date' => 'getExpireDate',
        'external_id' => 'getExternalId',
        'floor_no' => 'getFloorNo',
        'id' => 'getId',
        'last_modified_date' => 'getLastModifiedDate',
        'lat' => 'getLat',
        'location_id' => 'getLocationId',
        'lon' => 'getLon',
        'postal_code' => 'getPostalCode',
        'reference_id' => 'getReferenceId',
        'room_no' => 'getRoomNo',
        'source' => 'getSource',
        'state' => 'getState',
        'street' => 'getStreet',
        'suite' => 'getSuite',
        'upload_batch_id' => 'getUploadBatchId',
        'upload_errors' => 'getUploadErrors',
        'upload_record_status' => 'getUploadRecordStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrive_date'] = isset($data['arrive_date']) ? $data['arrive_date'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_id'] = isset($data['created_id']) ? $data['created_id'] : null;
        $this->container['created_name'] = isset($data['created_name']) ? $data['created_name'] : null;
        $this->container['expire_date'] = isset($data['expire_date']) ? $data['expire_date'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['floor_no'] = isset($data['floor_no']) ? $data['floor_no'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['reference_id'] = isset($data['reference_id']) ? $data['reference_id'] : null;
        $this->container['room_no'] = isset($data['room_no']) ? $data['room_no'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['suite'] = isset($data['suite']) ? $data['suite'] : null;
        $this->container['upload_batch_id'] = isset($data['upload_batch_id']) ? $data['upload_batch_id'] : null;
        $this->container['upload_errors'] = isset($data['upload_errors']) ? $data['upload_errors'] : null;
        $this->container['upload_record_status'] = isset($data['upload_record_status']) ? $data['upload_record_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arrive_date
     *
     * @return string
     */
    public function getArriveDate()
    {
        return $this->container['arrive_date'];
    }

    /**
     * Sets arrive_date
     *
     * @param string $arrive_date arrive_date
     *
     * @return $this
     */
    public function setArriveDate($arrive_date)
    {
        $this->container['arrive_date'] = $arrive_date;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_id
     *
     * @return int
     */
    public function getCreatedId()
    {
        return $this->container['created_id'];
    }

    /**
     * Sets created_id
     *
     * @param int $created_id created_id
     *
     * @return $this
     */
    public function setCreatedId($created_id)
    {
        $this->container['created_id'] = $created_id;

        return $this;
    }

    /**
     * Gets created_name
     *
     * @return string
     */
    public function getCreatedName()
    {
        return $this->container['created_name'];
    }

    /**
     * Sets created_name
     *
     * @param string $created_name created_name
     *
     * @return $this
     */
    public function setCreatedName($created_name)
    {
        $this->container['created_name'] = $created_name;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return string
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param string $expire_date expire_date
     *
     * @return $this
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets floor_no
     *
     * @return string
     */
    public function getFloorNo()
    {
        return $this->container['floor_no'];
    }

    /**
     * Sets floor_no
     *
     * @param string $floor_no floor_no
     *
     * @return $this
     */
    public function setFloorNo($floor_no)
    {
        $this->container['floor_no'] = $floor_no;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return string
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param string $lat lat
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return string
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param string $lon lon
     *
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int $reference_id reference_id
     *
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets room_no
     *
     * @return string
     */
    public function getRoomNo()
    {
        return $this->container['room_no'];
    }

    /**
     * Sets room_no
     *
     * @param string $room_no room_no
     *
     * @return $this
     */
    public function setRoomNo($room_no)
    {
        $this->container['room_no'] = $room_no;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets suite
     *
     * @return string
     */
    public function getSuite()
    {
        return $this->container['suite'];
    }

    /**
     * Sets suite
     *
     * @param string $suite suite
     *
     * @return $this
     */
    public function setSuite($suite)
    {
        $this->container['suite'] = $suite;

        return $this;
    }

    /**
     * Gets upload_batch_id
     *
     * @return int
     */
    public function getUploadBatchId()
    {
        return $this->container['upload_batch_id'];
    }

    /**
     * Sets upload_batch_id
     *
     * @param int $upload_batch_id upload_batch_id
     *
     * @return $this
     */
    public function setUploadBatchId($upload_batch_id)
    {
        $this->container['upload_batch_id'] = $upload_batch_id;

        return $this;
    }

    /**
     * Gets upload_errors
     *
     * @return \Swagger\Client\Model\UploadErrorWrapper[]
     */
    public function getUploadErrors()
    {
        return $this->container['upload_errors'];
    }

    /**
     * Sets upload_errors
     *
     * @param \Swagger\Client\Model\UploadErrorWrapper[] $upload_errors upload_errors
     *
     * @return $this
     */
    public function setUploadErrors($upload_errors)
    {
        $this->container['upload_errors'] = $upload_errors;

        return $this;
    }

    /**
     * Gets upload_record_status
     *
     * @return string
     */
    public function getUploadRecordStatus()
    {
        return $this->container['upload_record_status'];
    }

    /**
     * Sets upload_record_status
     *
     * @param string $upload_record_status upload_record_status
     *
     * @return $this
     */
    public function setUploadRecordStatus($upload_record_status)
    {
        $this->container['upload_record_status'] = $upload_record_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


