<?php
/**
 * UploadErrorWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UploadErrorWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadErrorWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UploadErrorWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'column_name' => 'string',
        'column_value' => 'string',
        'upload_error_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'column_name' => null,
        'column_value' => null,
        'upload_error_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'column_name' => 'columnName',
        'column_value' => 'columnValue',
        'upload_error_code' => 'uploadErrorCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'column_name' => 'setColumnName',
        'column_value' => 'setColumnValue',
        'upload_error_code' => 'setUploadErrorCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'column_name' => 'getColumnName',
        'column_value' => 'getColumnValue',
        'upload_error_code' => 'getUploadErrorCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UPLOAD_ERROR_CODE_UNKNOWN_ERROR = 'UNKNOWN_ERROR';
    const UPLOAD_ERROR_CODE_BATCH_SYSTEM_ERROR = 'BATCH_SYSTEM_ERROR';
    const UPLOAD_ERROR_CODE_BATCH_HEADER_NOT_FOUND = 'BATCH_HEADER_NOT_FOUND';
    const UPLOAD_ERROR_CODE_BATCH_HEADER_NO_USEFUL_HEADER_FOUND = 'BATCH_HEADER_NO_USEFUL_HEADER_FOUND';
    const UPLOAD_ERROR_CODE_BATCH_HEADER_DUPLICATE = 'BATCH_HEADER_DUPLICATE';
    const UPLOAD_ERROR_CODE_BATCH_HEADER_MANDATORY_NOT_FOUND = 'BATCH_HEADER_MANDATORY_NOT_FOUND';
    const UPLOAD_ERROR_CODE_ID_NOT_UNIQUE = 'ID_NOT_UNIQUE';
    const UPLOAD_ERROR_CODE_CELL_CANNOT_EMPTY = 'CELL_CANNOT_EMPTY';
    const UPLOAD_ERROR_CODE_CELL_NOT_UNIQUE = 'CELL_NOT_UNIQUE';
    const UPLOAD_ERROR_CODE_CELL_LENGTH_INVALID = 'CELL_LENGTH_INVALID';
    const UPLOAD_ERROR_CODE_CELL_FORMAT_INVALID = 'CELL_FORMAT_INVALID';
    const UPLOAD_ERROR_CODE_EMAIL_FROMAT_INVALID = 'EMAIL_FROMAT_INVALID';
    const UPLOAD_ERROR_CODE_COLUMN_LENGTH_INVALID = 'COLUMN_LENGTH_INVALID';
    const UPLOAD_ERROR_CODE_COLUMN_RANGE_INVALID = 'COLUMN_RANGE_INVALID';
    const UPLOAD_ERROR_CODE_COLUMN_FORMAT_INVALID = 'COLUMN_FORMAT_INVALID';
    const UPLOAD_ERROR_CODE_COLUMN_NOT_EXIST = 'COLUMN_NOT_EXIST';
    const UPLOAD_ERROR_CODE_FIELD_NOT_SUFFICIENT = 'FIELD_NOT_SUFFICIENT';
    const UPLOAD_ERROR_CODE_LATSTRING_NUMBER_FORMAT_INVALID = 'LATSTRING_NUMBER_FORMAT_INVALID';
    const UPLOAD_ERROR_CODE_LAT_RANGE_INVALID = 'LAT_RANGE_INVALID';
    const UPLOAD_ERROR_CODE_LONSTRING_NUMBER_FORMAT_INVALID = 'LONSTRING_NUMBER_FORMAT_INVALID';
    const UPLOAD_ERROR_CODE_LON_RANGE_INVALID = 'LON_RANGE_INVALID';
    const UPLOAD_ERROR_CODE_POSTALCODE_US_FORMAT_INVALID = 'POSTALCODE_US_FORMAT_INVALID';
    const UPLOAD_ERROR_CODE_STATE_US_NOT_ISO_STATE_NAME = 'STATE_US_NOT_ISO_STATE_NAME';
    const UPLOAD_ERROR_CODE_COUNTRY_NOT_ISO_COUNTRY_NAME = 'COUNTRY_NOT_ISO_COUNTRY_NAME';
    const UPLOAD_ERROR_CODE_ORG_NOT_EXIST = 'ORG_NOT_EXIST';
    const UPLOAD_ERROR_CODE_EXTERNAL_ID_NOT_EXIST = 'EXTERNAL_ID_NOT_EXIST';
    const UPLOAD_ERROR_CODE_ROLE_NOT_EXIST = 'ROLE_NOT_EXIST';
    const UPLOAD_ERROR_CODE_DUPLICATE_ROLE_NAME = 'DUPLICATE_ROLE_NAME';
    const UPLOAD_ERROR_CODE_EXTERNAL_ID_LINKED = 'EXTERNAL_ID_LINKED';
    const UPLOAD_ERROR_CODE_ORG_IS_EMPTY = 'ORG_IS_EMPTY';
    const UPLOAD_ERROR_CODE_SUFFIX_IS_NOT_VALID = 'SUFFIX_IS_NOT_VALID';
    const UPLOAD_ERROR_CODE_ROLE_IS_EMPTY_WHILE_SSO_NOT_EMPTY = 'ROLE_IS_EMPTY_WHILE_SSO_NOT_EMPTY';
    const UPLOAD_ERROR_CODE_SSO_EXIST_ALREADY = 'SSO_EXIST_ALREADY';
    const UPLOAD_ERROR_CODE_EXTERNAL_ID_REGISTERED = 'EXTERNAL_ID_REGISTERED';
    const UPLOAD_ERROR_CODE_EXTERNAL_ID_EXTERNAL_ID_ORG_NOT_MATCH = 'EXTERNAL_ID_EXTERNAL_ID_ORG_NOT_MATCH';
    const UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_LOCATION_HEADER = 'DYN_LOC_INCOMPLETE_LOCATION_HEADER';
    const UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_DATE_HEADER = 'DYN_LOC_INCOMPLETE_DATE_HEADER';
    const UPLOAD_ERROR_CODE_DYN_LOC_EXTERNALID_IS_NULL_ERROR = 'DYN_LOC_EXTERNALID_IS_NULL_ERROR';
    const UPLOAD_ERROR_CODE_DYN_LOC_EXTERNALID_LENGTH_ERROR = 'DYN_LOC_EXTERNALID_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_LOCATION_INFO = 'DYN_LOC_INCOMPLETE_LOCATION_INFO';
    const UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_DATE_INFO = 'DYN_LOC_INCOMPLETE_DATE_INFO';
    const UPLOAD_ERROR_CODE_DYN_LOC_LOCATIONID_LENGTH_ERROR = 'DYN_LOC_LOCATIONID_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_DYN_LOC_ARRIVE_DATE_FORMAT_ERROR = 'DYN_LOC_ARRIVE_DATE_FORMAT_ERROR';
    const UPLOAD_ERROR_CODE_DYN_LOC_EXPIRATION_DATE_FORMAT_ERROR = 'DYN_LOC_EXPIRATION_DATE_FORMAT_ERROR';
    const UPLOAD_ERROR_CODE_DYN_LOC_SOURCE_LENGTH_ERROR = 'DYN_LOC_SOURCE_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_DYN_LOC_LOCATIONID_NOT_EXIST = 'DYN_LOC_LOCATIONID_NOT_EXIST';
    const UPLOAD_ERROR_CODE_DYN_LOC_EXPIRATION_DATE_ERROR = 'DYN_LOC_EXPIRATION_DATE_ERROR';
    const UPLOAD_ERROR_CODE_DYN_LOC_SOURCE_NOT_EXIST = 'DYN_LOC_SOURCE_NOT_EXIST';
    const UPLOAD_ERROR_CODE_DYN_LOC_INVALID_ASSET_ERROR = 'DYN_LOC_INVALID_ASSET_ERROR';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ERROR = 'EXP_LOC_SYNC_ERROR';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CRITICAL_ERROR = 'EXP_LOC_SYNC_CRITICAL_ERROR';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_BAD_REQUEST = 'EXP_LOC_SYNC_BAD_REQUEST';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONTACT_NOT_FOUND = 'EXP_LOC_SYNC_CONTACT_NOT_FOUND';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_INTERRUPTED = 'EXP_LOC_SYNC_INTERRUPTED';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_TIMEOUT = 'EXP_LOC_SYNC_TIMEOUT';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_SETTING_NOT_FOUND = 'EXP_LOC_SYNC_SETTING_NOT_FOUND';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_NOT_FOUND = 'EXP_LOC_SYNC_CONFIG_NOT_FOUND';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ASSET_EMPTY = 'EXP_LOC_SYNC_ASSET_EMPTY';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_INCOMPLETE = 'EXP_LOC_SYNC_CONFIG_INCOMPLETE';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_ERROR = 'EXP_LOC_SYNC_CONFIG_ERROR';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ASSET_NOT_FOUND = 'EXP_LOC_SYNC_ASSET_NOT_FOUND';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_NOT_MATCH = 'EXP_LOC_SYNC_CONFIG_NOT_MATCH';
    const UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ACCESS_FORBIDDEN = 'EXP_LOC_SYNC_ACCESS_FORBIDDEN';
    const UPLOAD_ERROR_CODE_LOC_COUNTRY_LENGTH_ERROR = 'LOC_COUNTRY_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_STATE_LENGTH_ERROR = 'LOC_STATE_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_CITY_LENGTH_ERROR = 'LOC_CITY_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_STREET_LENGTH_ERROR = 'LOC_STREET_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_POSTAL_CODE_LENGTH_ERROR = 'LOC_POSTAL_CODE_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_LON_IS_NOT_NUMBER = 'LOC_LON_IS_NOT_NUMBER';
    const UPLOAD_ERROR_CODE_LOC_LON_NOT_IN_VALID_RANGE = 'LOC_LON_NOT_IN_VALID_RANGE';
    const UPLOAD_ERROR_CODE_LOC_LAT_IS_NOT_NUMBER = 'LOC_LAT_IS_NOT_NUMBER';
    const UPLOAD_ERROR_CODE_LOC_LAT_NOT_IN_VALID_RANGE = 'LOC_LAT_NOT_IN_VALID_RANGE';
    const UPLOAD_ERROR_CODE_LOC_COUNTRY_UNDEFINED_ERROR = 'LOC_COUNTRY_UNDEFINED_ERROR';
    const UPLOAD_ERROR_CODE_LOC_STATE_UNDEFINED_ERROR = 'LOC_STATE_UNDEFINED_ERROR';
    const UPLOAD_ERROR_CODE_LOC_SUITE_LENGTH_ERROR = 'LOC_SUITE_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_FLOORNO_LENGTH_ERROR = 'LOC_FLOORNO_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_ROOMNO_LENGTH_ERROR = 'LOC_ROOMNO_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_LOCATION_NAME_LENGTH_ERROR = 'LOC_LOCATION_NAME_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_LOCATION_ICON_LENGTH_ERROR = 'LOC_LOCATION_ICON_LENGTH_ERROR';
    const UPLOAD_ERROR_CODE_LOC_INCOMPLETE_LOCATION_INFO = 'LOC_INCOMPLETE_LOCATION_INFO';
    const UPLOAD_ERROR_CODE_LOC_GEO_CODING_ERROR = 'LOC_GEO_CODING_ERROR';
    const UPLOAD_ERROR_CODE_ASSET_INCOMPLETE_LOCATION_INFO = 'ASSET_INCOMPLETE_LOCATION_INFO';
    const UPLOAD_ERROR_CODE_ASSET_LOCATION_ID_NOT_EXIST = 'ASSET_LOCATION_ID_NOT_EXIST';
    const UPLOAD_ERROR_CODE_DELETE_ERROR_ASSET_REFERRED_BY_CONTACT = 'DELETE_ERROR_ASSET_REFERRED_BY_CONTACT';
    const UPLOAD_ERROR_CODE_NO_ERROR = 'NO_ERROR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadErrorCodeAllowableValues()
    {
        return [
            self::UPLOAD_ERROR_CODE_UNKNOWN_ERROR,
            self::UPLOAD_ERROR_CODE_BATCH_SYSTEM_ERROR,
            self::UPLOAD_ERROR_CODE_BATCH_HEADER_NOT_FOUND,
            self::UPLOAD_ERROR_CODE_BATCH_HEADER_NO_USEFUL_HEADER_FOUND,
            self::UPLOAD_ERROR_CODE_BATCH_HEADER_DUPLICATE,
            self::UPLOAD_ERROR_CODE_BATCH_HEADER_MANDATORY_NOT_FOUND,
            self::UPLOAD_ERROR_CODE_ID_NOT_UNIQUE,
            self::UPLOAD_ERROR_CODE_CELL_CANNOT_EMPTY,
            self::UPLOAD_ERROR_CODE_CELL_NOT_UNIQUE,
            self::UPLOAD_ERROR_CODE_CELL_LENGTH_INVALID,
            self::UPLOAD_ERROR_CODE_CELL_FORMAT_INVALID,
            self::UPLOAD_ERROR_CODE_EMAIL_FROMAT_INVALID,
            self::UPLOAD_ERROR_CODE_COLUMN_LENGTH_INVALID,
            self::UPLOAD_ERROR_CODE_COLUMN_RANGE_INVALID,
            self::UPLOAD_ERROR_CODE_COLUMN_FORMAT_INVALID,
            self::UPLOAD_ERROR_CODE_COLUMN_NOT_EXIST,
            self::UPLOAD_ERROR_CODE_FIELD_NOT_SUFFICIENT,
            self::UPLOAD_ERROR_CODE_LATSTRING_NUMBER_FORMAT_INVALID,
            self::UPLOAD_ERROR_CODE_LAT_RANGE_INVALID,
            self::UPLOAD_ERROR_CODE_LONSTRING_NUMBER_FORMAT_INVALID,
            self::UPLOAD_ERROR_CODE_LON_RANGE_INVALID,
            self::UPLOAD_ERROR_CODE_POSTALCODE_US_FORMAT_INVALID,
            self::UPLOAD_ERROR_CODE_STATE_US_NOT_ISO_STATE_NAME,
            self::UPLOAD_ERROR_CODE_COUNTRY_NOT_ISO_COUNTRY_NAME,
            self::UPLOAD_ERROR_CODE_ORG_NOT_EXIST,
            self::UPLOAD_ERROR_CODE_EXTERNAL_ID_NOT_EXIST,
            self::UPLOAD_ERROR_CODE_ROLE_NOT_EXIST,
            self::UPLOAD_ERROR_CODE_DUPLICATE_ROLE_NAME,
            self::UPLOAD_ERROR_CODE_EXTERNAL_ID_LINKED,
            self::UPLOAD_ERROR_CODE_ORG_IS_EMPTY,
            self::UPLOAD_ERROR_CODE_SUFFIX_IS_NOT_VALID,
            self::UPLOAD_ERROR_CODE_ROLE_IS_EMPTY_WHILE_SSO_NOT_EMPTY,
            self::UPLOAD_ERROR_CODE_SSO_EXIST_ALREADY,
            self::UPLOAD_ERROR_CODE_EXTERNAL_ID_REGISTERED,
            self::UPLOAD_ERROR_CODE_EXTERNAL_ID_EXTERNAL_ID_ORG_NOT_MATCH,
            self::UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_LOCATION_HEADER,
            self::UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_DATE_HEADER,
            self::UPLOAD_ERROR_CODE_DYN_LOC_EXTERNALID_IS_NULL_ERROR,
            self::UPLOAD_ERROR_CODE_DYN_LOC_EXTERNALID_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_LOCATION_INFO,
            self::UPLOAD_ERROR_CODE_DYN_LOC_INCOMPLETE_DATE_INFO,
            self::UPLOAD_ERROR_CODE_DYN_LOC_LOCATIONID_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_DYN_LOC_ARRIVE_DATE_FORMAT_ERROR,
            self::UPLOAD_ERROR_CODE_DYN_LOC_EXPIRATION_DATE_FORMAT_ERROR,
            self::UPLOAD_ERROR_CODE_DYN_LOC_SOURCE_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_DYN_LOC_LOCATIONID_NOT_EXIST,
            self::UPLOAD_ERROR_CODE_DYN_LOC_EXPIRATION_DATE_ERROR,
            self::UPLOAD_ERROR_CODE_DYN_LOC_SOURCE_NOT_EXIST,
            self::UPLOAD_ERROR_CODE_DYN_LOC_INVALID_ASSET_ERROR,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ERROR,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CRITICAL_ERROR,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_BAD_REQUEST,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONTACT_NOT_FOUND,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_INTERRUPTED,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_TIMEOUT,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_SETTING_NOT_FOUND,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_NOT_FOUND,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ASSET_EMPTY,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_INCOMPLETE,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_ERROR,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ASSET_NOT_FOUND,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_CONFIG_NOT_MATCH,
            self::UPLOAD_ERROR_CODE_EXP_LOC_SYNC_ACCESS_FORBIDDEN,
            self::UPLOAD_ERROR_CODE_LOC_COUNTRY_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_STATE_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_CITY_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_STREET_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_POSTAL_CODE_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_LON_IS_NOT_NUMBER,
            self::UPLOAD_ERROR_CODE_LOC_LON_NOT_IN_VALID_RANGE,
            self::UPLOAD_ERROR_CODE_LOC_LAT_IS_NOT_NUMBER,
            self::UPLOAD_ERROR_CODE_LOC_LAT_NOT_IN_VALID_RANGE,
            self::UPLOAD_ERROR_CODE_LOC_COUNTRY_UNDEFINED_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_STATE_UNDEFINED_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_SUITE_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_FLOORNO_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_ROOMNO_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_LOCATION_NAME_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_LOCATION_ICON_LENGTH_ERROR,
            self::UPLOAD_ERROR_CODE_LOC_INCOMPLETE_LOCATION_INFO,
            self::UPLOAD_ERROR_CODE_LOC_GEO_CODING_ERROR,
            self::UPLOAD_ERROR_CODE_ASSET_INCOMPLETE_LOCATION_INFO,
            self::UPLOAD_ERROR_CODE_ASSET_LOCATION_ID_NOT_EXIST,
            self::UPLOAD_ERROR_CODE_DELETE_ERROR_ASSET_REFERRED_BY_CONTACT,
            self::UPLOAD_ERROR_CODE_NO_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['column_name'] = isset($data['column_name']) ? $data['column_name'] : null;
        $this->container['column_value'] = isset($data['column_value']) ? $data['column_value'] : null;
        $this->container['upload_error_code'] = isset($data['upload_error_code']) ? $data['upload_error_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUploadErrorCodeAllowableValues();
        if (!is_null($this->container['upload_error_code']) && !in_array($this->container['upload_error_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'upload_error_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets column_name
     *
     * @return string
     */
    public function getColumnName()
    {
        return $this->container['column_name'];
    }

    /**
     * Sets column_name
     *
     * @param string $column_name column_name
     *
     * @return $this
     */
    public function setColumnName($column_name)
    {
        $this->container['column_name'] = $column_name;

        return $this;
    }

    /**
     * Gets column_value
     *
     * @return string
     */
    public function getColumnValue()
    {
        return $this->container['column_value'];
    }

    /**
     * Sets column_value
     *
     * @param string $column_value column_value
     *
     * @return $this
     */
    public function setColumnValue($column_value)
    {
        $this->container['column_value'] = $column_value;

        return $this;
    }

    /**
     * Gets upload_error_code
     *
     * @return string
     */
    public function getUploadErrorCode()
    {
        return $this->container['upload_error_code'];
    }

    /**
     * Sets upload_error_code
     *
     * @param string $upload_error_code upload_error_code
     *
     * @return $this
     */
    public function setUploadErrorCode($upload_error_code)
    {
        $allowedValues = $this->getUploadErrorCodeAllowableValues();
        if (!is_null($upload_error_code) && !in_array($upload_error_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'upload_error_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upload_error_code'] = $upload_error_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


