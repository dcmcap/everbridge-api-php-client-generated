<?php
/**
 * UserWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_provision_for_ebu' => 'bool',
        'contact_id' => 'int',
        'contact_org_id' => 'int',
        'default_role_id' => 'int',
        'email' => 'string',
        'first_name' => 'string',
        'id' => 'int',
        'last_login_date' => '\DateTime',
        'last_modified_date' => '\DateTime',
        'last_modified_name' => 'string',
        'last_modified_proxy_name' => 'string',
        'last_name' => 'string',
        'locked' => 'bool',
        'middlename' => 'string',
        'owner' => 'string',
        'role_ids' => 'int[]',
        'roles' => '\Swagger\Client\Model\RoleWrapper[]',
        'sso_user_id' => 'string',
        'suffix' => 'string',
        'user_name' => 'string',
        'user_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_provision_for_ebu' => null,
        'contact_id' => 'int64',
        'contact_org_id' => 'int64',
        'default_role_id' => 'int64',
        'email' => null,
        'first_name' => null,
        'id' => 'int64',
        'last_login_date' => 'date-time',
        'last_modified_date' => 'date-time',
        'last_modified_name' => null,
        'last_modified_proxy_name' => null,
        'last_name' => null,
        'locked' => null,
        'middlename' => null,
        'owner' => null,
        'role_ids' => 'int64',
        'roles' => null,
        'sso_user_id' => null,
        'suffix' => null,
        'user_name' => null,
        'user_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_provision_for_ebu' => 'autoProvisionForEBU',
        'contact_id' => 'contactId',
        'contact_org_id' => 'contactOrgId',
        'default_role_id' => 'defaultRoleId',
        'email' => 'email',
        'first_name' => 'firstName',
        'id' => 'id',
        'last_login_date' => 'lastLoginDate',
        'last_modified_date' => 'lastModifiedDate',
        'last_modified_name' => 'lastModifiedName',
        'last_modified_proxy_name' => 'lastModifiedProxyName',
        'last_name' => 'lastName',
        'locked' => 'locked',
        'middlename' => 'middlename',
        'owner' => 'owner',
        'role_ids' => 'roleIds',
        'roles' => 'roles',
        'sso_user_id' => 'ssoUserId',
        'suffix' => 'suffix',
        'user_name' => 'userName',
        'user_status' => 'userStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_provision_for_ebu' => 'setAutoProvisionForEbu',
        'contact_id' => 'setContactId',
        'contact_org_id' => 'setContactOrgId',
        'default_role_id' => 'setDefaultRoleId',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'id' => 'setId',
        'last_login_date' => 'setLastLoginDate',
        'last_modified_date' => 'setLastModifiedDate',
        'last_modified_name' => 'setLastModifiedName',
        'last_modified_proxy_name' => 'setLastModifiedProxyName',
        'last_name' => 'setLastName',
        'locked' => 'setLocked',
        'middlename' => 'setMiddlename',
        'owner' => 'setOwner',
        'role_ids' => 'setRoleIds',
        'roles' => 'setRoles',
        'sso_user_id' => 'setSsoUserId',
        'suffix' => 'setSuffix',
        'user_name' => 'setUserName',
        'user_status' => 'setUserStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_provision_for_ebu' => 'getAutoProvisionForEbu',
        'contact_id' => 'getContactId',
        'contact_org_id' => 'getContactOrgId',
        'default_role_id' => 'getDefaultRoleId',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'id' => 'getId',
        'last_login_date' => 'getLastLoginDate',
        'last_modified_date' => 'getLastModifiedDate',
        'last_modified_name' => 'getLastModifiedName',
        'last_modified_proxy_name' => 'getLastModifiedProxyName',
        'last_name' => 'getLastName',
        'locked' => 'getLocked',
        'middlename' => 'getMiddlename',
        'owner' => 'getOwner',
        'role_ids' => 'getRoleIds',
        'roles' => 'getRoles',
        'sso_user_id' => 'getSsoUserId',
        'suffix' => 'getSuffix',
        'user_name' => 'getUserName',
        'user_status' => 'getUserStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const USER_STATUS_ACTIVE = 'Active';
    const USER_STATUS_INACTIVE = 'Inactive';
    const USER_STATUS_NOT_REGISTERED = 'NotRegistered';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserStatusAllowableValues()
    {
        return [
            self::USER_STATUS_ACTIVE,
            self::USER_STATUS_INACTIVE,
            self::USER_STATUS_NOT_REGISTERED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_provision_for_ebu'] = isset($data['auto_provision_for_ebu']) ? $data['auto_provision_for_ebu'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['contact_org_id'] = isset($data['contact_org_id']) ? $data['contact_org_id'] : null;
        $this->container['default_role_id'] = isset($data['default_role_id']) ? $data['default_role_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_login_date'] = isset($data['last_login_date']) ? $data['last_login_date'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_modified_name'] = isset($data['last_modified_name']) ? $data['last_modified_name'] : null;
        $this->container['last_modified_proxy_name'] = isset($data['last_modified_proxy_name']) ? $data['last_modified_proxy_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['middlename'] = isset($data['middlename']) ? $data['middlename'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['role_ids'] = isset($data['role_ids']) ? $data['role_ids'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['sso_user_id'] = isset($data['sso_user_id']) ? $data['sso_user_id'] : null;
        $this->container['suffix'] = isset($data['suffix']) ? $data['suffix'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['user_status'] = isset($data['user_status']) ? $data['user_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUserStatusAllowableValues();
        if (!is_null($this->container['user_status']) && !in_array($this->container['user_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'user_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_provision_for_ebu
     *
     * @return bool
     */
    public function getAutoProvisionForEbu()
    {
        return $this->container['auto_provision_for_ebu'];
    }

    /**
     * Sets auto_provision_for_ebu
     *
     * @param bool $auto_provision_for_ebu auto_provision_for_ebu
     *
     * @return $this
     */
    public function setAutoProvisionForEbu($auto_provision_for_ebu)
    {
        $this->container['auto_provision_for_ebu'] = $auto_provision_for_ebu;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets contact_org_id
     *
     * @return int
     */
    public function getContactOrgId()
    {
        return $this->container['contact_org_id'];
    }

    /**
     * Sets contact_org_id
     *
     * @param int $contact_org_id contact_org_id
     *
     * @return $this
     */
    public function setContactOrgId($contact_org_id)
    {
        $this->container['contact_org_id'] = $contact_org_id;

        return $this;
    }

    /**
     * Gets default_role_id
     *
     * @return int
     */
    public function getDefaultRoleId()
    {
        return $this->container['default_role_id'];
    }

    /**
     * Sets default_role_id
     *
     * @param int $default_role_id default_role_id
     *
     * @return $this
     */
    public function setDefaultRoleId($default_role_id)
    {
        $this->container['default_role_id'] = $default_role_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_login_date
     *
     * @return \DateTime
     */
    public function getLastLoginDate()
    {
        return $this->container['last_login_date'];
    }

    /**
     * Sets last_login_date
     *
     * @param \DateTime $last_login_date last_login_date
     *
     * @return $this
     */
    public function setLastLoginDate($last_login_date)
    {
        $this->container['last_login_date'] = $last_login_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_modified_name
     *
     * @return string
     */
    public function getLastModifiedName()
    {
        return $this->container['last_modified_name'];
    }

    /**
     * Sets last_modified_name
     *
     * @param string $last_modified_name last_modified_name
     *
     * @return $this
     */
    public function setLastModifiedName($last_modified_name)
    {
        $this->container['last_modified_name'] = $last_modified_name;

        return $this;
    }

    /**
     * Gets last_modified_proxy_name
     *
     * @return string
     */
    public function getLastModifiedProxyName()
    {
        return $this->container['last_modified_proxy_name'];
    }

    /**
     * Sets last_modified_proxy_name
     *
     * @param string $last_modified_proxy_name last_modified_proxy_name
     *
     * @return $this
     */
    public function setLastModifiedProxyName($last_modified_proxy_name)
    {
        $this->container['last_modified_proxy_name'] = $last_modified_proxy_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets middlename
     *
     * @return string
     */
    public function getMiddlename()
    {
        return $this->container['middlename'];
    }

    /**
     * Sets middlename
     *
     * @param string $middlename middlename
     *
     * @return $this
     */
    public function setMiddlename($middlename)
    {
        $this->container['middlename'] = $middlename;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets role_ids
     *
     * @return int[]
     */
    public function getRoleIds()
    {
        return $this->container['role_ids'];
    }

    /**
     * Sets role_ids
     *
     * @param int[] $role_ids role_ids
     *
     * @return $this
     */
    public function setRoleIds($role_ids)
    {
        $this->container['role_ids'] = $role_ids;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Swagger\Client\Model\RoleWrapper[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Swagger\Client\Model\RoleWrapper[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets sso_user_id
     *
     * @return string
     */
    public function getSsoUserId()
    {
        return $this->container['sso_user_id'];
    }

    /**
     * Sets sso_user_id
     *
     * @param string $sso_user_id sso_user_id
     *
     * @return $this
     */
    public function setSsoUserId($sso_user_id)
    {
        $this->container['sso_user_id'] = $sso_user_id;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string $suffix suffix
     *
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_status
     *
     * @return string
     */
    public function getUserStatus()
    {
        return $this->container['user_status'];
    }

    /**
     * Sets user_status
     *
     * @param string $user_status user_status
     *
     * @return $this
     */
    public function setUserStatus($user_status)
    {
        $allowedValues = $this->getUserStatusAllowableValues();
        if (!is_null($user_status) && !in_array($user_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_status'] = $user_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


